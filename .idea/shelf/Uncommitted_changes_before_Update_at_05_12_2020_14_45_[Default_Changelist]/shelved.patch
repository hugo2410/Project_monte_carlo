Index: Modules/AbstractFunc.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by hugo on 28/11/2020.\n//\n\n#ifndef PROJECT_MONTE_CARLO_ABSTRACTFUNC_H\n#define PROJECT_MONTE_CARLO_ABSTRACTFUNC_H\n\n#include \"Error.hpp\"\n#include \"AbstractVariable.h\"\n\nclass AbstractFunc {\npublic:\n\n    AbstractFunc();\n\n    virtual ~AbstractFunc();\n    virtual double evaluate(double x) = 0;\n};\n#endif //PROJECT_MONTE_CARLO_ABSTRACTFUNC_H\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/AbstractFunc.h b/Modules/AbstractFunc.h
--- a/Modules/AbstractFunc.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/AbstractFunc.h	(date 1606989168912)
@@ -5,7 +5,7 @@
 #ifndef PROJECT_MONTE_CARLO_ABSTRACTFUNC_H
 #define PROJECT_MONTE_CARLO_ABSTRACTFUNC_H
 
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include "AbstractVariable.h"
 
 class AbstractFunc {
Index: Modules/AbstractReader.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by mehdi on 24/11/20.\n//\n\n#ifndef PROJECT_MONTE_CARLO_ABSTRACTREADER_H\n#define PROJECT_MONTE_CARLO_ABSTRACTREADER_H\n#include \"Error.hpp\"\n#include \"AbstractVariable.h\"\n#include \"AbstractFunc.h\"\n\nclass AbstractReader {\npublic:\n\n    AbstractReader();\n\n    virtual ~AbstractReader();\n    virtual void read_file(const char *file_name,AbstractVariable* &pRandomVariable) = 0;\n\n};\n\n\n#endif //PROJECT_MONTE_CARLO_ABSTRACTREADER_H\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/AbstractReader.h b/Modules/AbstractReader.h
--- a/Modules/AbstractReader.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/AbstractReader.h	(date 1606989169056)
@@ -4,7 +4,7 @@
 
 #ifndef PROJECT_MONTE_CARLO_ABSTRACTREADER_H
 #define PROJECT_MONTE_CARLO_ABSTRACTREADER_H
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include "AbstractVariable.h"
 #include "AbstractFunc.h"
 
Index: Modules/NormalReader.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by mehdi on 24/11/20.\n//\n\n\n#include \"NormalReader.h\"\n#include \"NormalDist.h\"\n\nNormalReader::NormalReader()= default;\nNormalReader::~NormalReader()= default;\n\nvoid NormalReader::read_file(const char *file,AbstractVariable* &pRandomNormal ){\n    std::ifstream read_input (file);\n    std::cout<< \"File = \"<< file<< std::endl;\n    if(!read_input.is_open()){\n        throw Error(\"Couldn't open it  \", \"FILE\");\n    }\n    read_input.clear();\n    int vectorSize;\n    double mean;\n    double var;\n    read_input >> vectorSize;\n    if ((read_input.fail())|| (vectorSize <= 0)){\n        throw Error(\"VARIABLE\",\"The vector's size needs to be a positive integer\");\n    }\n    read_input >> mean;\n    if (read_input.fail()){\n        throw Error(\"VARIABLE\",\"The mean needs to be a float number\");\n    }\n    read_input >> var;\n    if ((read_input.fail())|| (var <= 0)){\n        throw Error(\"VARIABLE\",\"The variance needs to be a positive float number\");\n    }\n    std::cout << \"J'ai fini de lire une normale\" << std::endl;\n    pRandomNormal = new NormalDist(vectorSize,mean,var);\n    std::cout << \"J'ai fini de calculer une normale\" << std::endl;\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/NormalReader.cpp b/Modules/NormalReader.cpp
--- a/Modules/NormalReader.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/NormalReader.cpp	(date 1607175908598)
@@ -11,9 +11,8 @@
 
 void NormalReader::read_file(const char *file,AbstractVariable* &pRandomNormal ){
     std::ifstream read_input (file);
-    std::cout<< "File = "<< file<< std::endl;
     if(!read_input.is_open()){
-        throw Error("Couldn't open it  ", "FILE");
+        throw FileError();
     }
     read_input.clear();
     int vectorSize;
@@ -21,15 +20,15 @@
     double var;
     read_input >> vectorSize;
     if ((read_input.fail())|| (vectorSize <= 0)){
-        throw Error("VARIABLE","The vector's size needs to be a positive integer");
+        throw VectSizeError();
     }
     read_input >> mean;
     if (read_input.fail()){
-        throw Error("VARIABLE","The mean needs to be a float number");
+        throw MeanError();
     }
     read_input >> var;
     if ((read_input.fail())|| (var <= 0)){
-        throw Error("VARIABLE","The variance needs to be a positive float number");
+        throw VarError();
     }
     std::cout << "J'ai fini de lire une normale" << std::endl;
     pRandomNormal = new NormalDist(vectorSize,mean,var);
Index: Test/basic_tests/Input_test.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by hugo on 07/12/2020.\r\n//\r\n\r\n\r\n#include \"gtest/gtest.h\"\r\n#include \"Error.hpp\"\r\n#include \"AbstractVariable.h\"\r\n#include \"AbstractReader.h\"\r\n#include \"NormalReader.h\"\r\n#include \"UniformReader.h\"\r\n\r\n\r\n#define TEST_PATH \"11.txt\"\r\n#define TEST_PATH_SIZE \"TestNormal_size.dat\"\r\n#define TEST_PATH_MEAN \"TestNormal_mean.dat\"\r\n#define TEST_PATH_VAR \"TestNormal_var.dat\"\r\n\r\n#define TEST_PATH_UNIFORM \"DefaultUniform.dat\"\r\n\r\n\r\n\r\nclass InputTestFixture : public ::testing::Test\r\n{\r\nprotected:\r\n    virtual void TearDown() {\r\n        delete pRandomsample ;\r\n    }\r\n\r\n    virtual void SetUp() {\r\n        alpha = 0.05 ;\r\n        alpha_bad = 2. ;\r\n\r\n        order = 1 ;\r\n        order_bad = -2 ;\r\n        pRandomsample = 0 ;\r\n    }\r\npublic:\r\n    InputTestFixture() : Test() {\r\n\r\n        pInput_normal = new NormalReader;\r\n        pInput_uniform =  new UniformReader;\r\n\r\n    }\r\n\r\n    virtual ~InputTestFixture() {\r\n        delete pInput_normal ;\r\n        delete pInput_uniform ;\r\n    }\r\n\r\n\r\n    AbstractVariable* pRandomsample;\r\n    AbstractReader *pInput_normal ;\r\n    AbstractReader* pInput_uniform ;\r\n    double alpha ;\r\n    double alpha_bad ;\r\n    int order ;\r\n    int order_bad ;\r\n};\r\n\r\nTEST_F(InputTestFixture, Exception_nofile) {\r\n    ASSERT_THROW( pInput_normal ->read_file(TEST_PATH, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_normal_variance_check) {\r\n    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_VAR, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_normal_mean_check) {\r\n    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_MEAN,pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_normal_alpha_check) {\r\n    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_normal_order_check) {\r\n    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH,pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_uniform_size_check) {\r\n    ASSERT_THROW( pInput_uniform ->read_file(TEST_PATH_SIZE, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_uniform_lower_bound_check) {\r\n    ASSERT_THROW(pInput_uniform ->read_file( TEST_PATH_MEAN,pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_uniform_upper_bound_check) {\r\n    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_VAR, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_uniform_alpha_check) {\r\n    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample),Error);\r\n}\r\nTEST_F(InputTestFixture, input_uniform_order_check) {\r\n    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample),Error);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/basic_tests/Input_test.cpp b/Test/basic_tests/Input_test.cpp
--- a/Test/basic_tests/Input_test.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/basic_tests/Input_test.cpp	(date 1607175908586)
@@ -4,14 +4,15 @@
 
 
 #include "gtest/gtest.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include "AbstractVariable.h"
 #include "AbstractReader.h"
 #include "NormalReader.h"
 #include "UniformReader.h"
+#include "FunctReader.h"
 
 
-#define TEST_PATH "11.txt"
+#define TEST_PATH_NO_FILE " .txt"
 #define TEST_PATH_SIZE "TestNormal_size.dat"
 #define TEST_PATH_MEAN "TestNormal_mean.dat"
 #define TEST_PATH_VAR "TestNormal_var.dat"
@@ -38,53 +39,56 @@
 public:
     InputTestFixture() : Test() {
 
-        pInput_normal = new NormalReader;
-        pInput_uniform =  new UniformReader;
+        pNormal = new NormalReader;
+        pUniform =  new UniformReader;
+        pFunc = new FunctReader;
 
     }
 
     virtual ~InputTestFixture() {
-        delete pInput_normal ;
-        delete pInput_uniform ;
+        delete pNormal ;
+        delete pUniform ;
+        delete pFunc;
     }
 
 
     AbstractVariable* pRandomsample;
-    AbstractReader *pInput_normal ;
-    AbstractReader* pInput_uniform ;
+    AbstractReader *pNormal ;
+    AbstractReader* pUniform ;
+    AbstractReader* pFunc;
     double alpha ;
     double alpha_bad ;
     int order ;
     int order_bad ;
 };
 
-TEST_F(InputTestFixture, Exception_nofile) {
-    ASSERT_THROW( pInput_normal ->read_file(TEST_PATH, pRandomsample),Error);
+TEST_F(InputTestFixture, nofile_error) {
+    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_NO_FILE, pRandomsample), FileError);
 }
-TEST_F(InputTestFixture, input_normal_variance_check) {
-    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_VAR, pRandomsample),Error);
+TEST_F(InputTestFixture, normal_variance_error) {
+    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_VAR, pRandomsample), VarError);
 }
-TEST_F(InputTestFixture, input_normal_mean_check) {
-    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_MEAN,pRandomsample),Error);
+TEST_F(InputTestFixture, normal_mean_error) {
+    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_MEAN,pRandomsample), MeanError);
 }
-TEST_F(InputTestFixture, input_normal_alpha_check) {
-    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH, pRandomsample),Error);
+TEST_F(InputTestFixture, normal_size_error) {
+    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH_VECT, pRandomsample), VectSizeError);
 }
-TEST_F(InputTestFixture, input_normal_order_check) {
-    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH,pRandomsample),Error);
+TEST_F(InputTestFixture, normal_order_error) {
+    ASSERT_THROW(pInput_normal ->read_file(TEST_PATH,pRandomsample), AbstractError);
 }
 TEST_F(InputTestFixture, input_uniform_size_check) {
-    ASSERT_THROW( pInput_uniform ->read_file(TEST_PATH_SIZE, pRandomsample),Error);
+    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_SIZE, pRandomsample), AbstractError);
 }
 TEST_F(InputTestFixture, input_uniform_lower_bound_check) {
-    ASSERT_THROW(pInput_uniform ->read_file( TEST_PATH_MEAN,pRandomsample),Error);
+    ASSERT_THROW(pInput_uniform ->read_file( TEST_PATH_MEAN,pRandomsample), AbstractError);
 }
 TEST_F(InputTestFixture, input_uniform_upper_bound_check) {
-    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_VAR, pRandomsample),Error);
+    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_VAR, pRandomsample), AbstractError);
 }
 TEST_F(InputTestFixture, input_uniform_alpha_check) {
-    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample),Error);
+    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample), AbstractError);
 }
 TEST_F(InputTestFixture, input_uniform_order_check) {
-    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample),Error);
-}
\ No newline at end of file
+    ASSERT_THROW(pInput_uniform ->read_file(TEST_PATH_UNIFORM, pRandomsample), AbstractError);
+}*/
\ No newline at end of file
Index: Test/basic_tests/MonteCarloExpectation_test.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by pierr on 06/12/2019.\r\n//\r\n#include \"gtest/gtest.h\"\r\n#include \"Uniform.h\"\r\n#include \"Normal.h\"\r\n#include \"Error.hpp\"\r\n#include \"MonteCarloExpectation.hpp\"\r\n#include <cmath>\r\n\r\n\r\n#define TEST_SIZE 1000\r\n#define TEST_UPPER_BOUND 3.\r\n#define TEST_LOWER_BOUND 1.5\r\n#define TEST_MEAN 3.\r\n#define TEST_VARIANCE 1.5\r\n\r\nclass MonteCarloExpectationFixture : public ::testing::Test\r\n{\r\nprotected:\r\n    virtual void TearDown() {\r\n\r\n    }\r\n\r\n    virtual void SetUp() {\r\n\r\n        true_mean_uniform = (TEST_UPPER_BOUND + TEST_LOWER_BOUND)/2. ;\r\n\r\n    }\r\npublic:\r\n    MonteCarloExpectationFixture() : Test() {\r\n        uniform_sample =  new Uniform(TEST_SIZE, TEST_LOWER_BOUND, TEST_UPPER_BOUND);\r\n        normal_sample = new Normal(TEST_SIZE ,TEST_MEAN , TEST_VARIANCE ) ;\r\n        mc_uniform = new MonteCarloExpectation(uniform_sample);\r\n        mc_normal = new MonteCarloExpectation( normal_sample ) ;\r\n        mc = new MonteCarloExpectation();\r\n    }\r\n\r\n    virtual ~MonteCarloExpectationFixture() {\r\n        delete mc_uniform;\r\n        delete mc_normal ;\r\n        delete mc;\r\n        delete uniform_sample;\r\n        delete normal_sample ;\r\n    }\r\n    Random_variable* uniform_sample ;\r\n    Random_variable* normal_sample ;\r\n    MonteCarloExpectation* mc_uniform ;\r\n    MonteCarloExpectation* mc_normal;\r\n    MonteCarloExpectation* mc;\r\n    double true_mean_uniform ;\r\n};\r\n\r\nTEST_F(MonteCarloExpectationFixture, mean_uniform_get_check) {\r\n    ASSERT_NEAR(mc_uniform->getExpectation(), true_mean_uniform,1e-1);\r\n}\r\nTEST_F(MonteCarloExpectationFixture, mean_normal_get_check) {\r\n    ASSERT_NEAR(mc_normal->getExpectation(),TEST_MEAN,1e-1);\r\n}\r\nTEST_F(MonteCarloExpectationFixture, mean_uniform_calculation_check) {\r\n    ASSERT_NEAR(mc->calculate_expectation(uniform_sample),true_mean_uniform,1e-1);\r\n}\r\nTEST_F(MonteCarloExpectationFixture, mean_normal_calculation_check) {\r\n    ASSERT_NEAR(mc->calculate_expectation(normal_sample),TEST_MEAN,1e-1);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/basic_tests/MonteCarloExpectation_test.cpp b/Test/basic_tests/MonteCarloExpectation_test.cpp
--- a/Test/basic_tests/MonteCarloExpectation_test.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/basic_tests/MonteCarloExpectation_test.cpp	(date 1606989173840)
@@ -4,7 +4,7 @@
 #include "gtest/gtest.h"
 #include "Uniform.h"
 #include "Normal.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include "MonteCarloExpectation.hpp"
 #include <cmath>
 
Index: Test/basic_tests/Normal_test.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by pierr on 01/12/2019.\r\n//\r\n\r\n#include \"gtest/gtest.h\"\r\n#include \"Error.hpp\"\r\n#include <cmath>\r\n\r\n\r\n#define TEST_SIZE 50\r\n#define TEST_MEAN 3.\r\n#define TEST_VARIANCE 1.5\r\n\r\n\r\nclass NormalFixture : public ::testing::Test\r\n{\r\nprotected:\r\n    virtual void TearDown() {\r\n\r\n    }\r\n\r\n    virtual void SetUp() {\r\n\r\n    }\r\npublic:\r\n    NormalFixture() : Test() {\r\n        normal_sample = new Normal(TEST_SIZE, TEST_MEAN, TEST_VARIANCE);\r\n\r\n    }\r\n\r\n    virtual ~NormalFixture() {\r\n        delete normal_sample;\r\n    }\r\n    Normal* normal_sample ;\r\n};\r\n\r\nTEST_F(NormalFixture, mean_sample_check) {\r\n    EXPECT_EQ(normal_sample->get_mean(),TEST_MEAN);\r\n}\r\nTEST_F(NormalFixture, var_sample_check) {\r\n    EXPECT_EQ(normal_sample->get_var(),TEST_VARIANCE);\r\n}\r\nTEST_F(NormalFixture, size_sample_check) {\r\n    EXPECT_EQ(normal_sample->get_sample().size(),TEST_SIZE);\r\n}\r\nTEST_F(NormalFixture, size_subsample_check) {\r\n    Random_variable* p_rvs ;\r\n    p_rvs = normal_sample->sub_sample(20) ;\r\n    EXPECT_EQ(p_rvs->get_size() ,20);\r\n    delete p_rvs ;\r\n}\r\nTEST_F(NormalFixture, unchange_this_subsample_check) {\r\n    Random_variable* p_rvs ;\r\n    p_rvs = normal_sample->sub_sample(50) ;\r\n    auto v1 = p_rvs->get_sample();\r\n    auto v2 = normal_sample->get_sample() ;\r\n    double expect(0);\r\n    for (int i = 0; i < v1.size() ; ++i) {\r\n        expect+= v1[i]-v2[i] ;\r\n    }\r\n    EXPECT_EQ(expect,0);\r\n    delete p_rvs ;\r\n}\r\nTEST_F(NormalFixture, throw_sub_sample_check) {\r\n    ASSERT_THROW(normal_sample->sub_sample(100),Error);\r\n}\r\nTEST_F(NormalFixture, negative_size_sample_check) {\r\n    ASSERT_THROW(Normal(-TEST_SIZE, TEST_MEAN, TEST_VARIANCE),Error);\r\n}\r\nTEST_F(NormalFixture, negative_variance_check) {\r\n    ASSERT_THROW(Normal(TEST_SIZE, TEST_MEAN, -TEST_VARIANCE),Error);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/basic_tests/Normal_test.cpp b/Test/basic_tests/Normal_test.cpp
--- a/Test/basic_tests/Normal_test.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/basic_tests/Normal_test.cpp	(date 1606989173852)
@@ -3,7 +3,7 @@
 //
 
 #include "gtest/gtest.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include <cmath>
 
 
Index: Modules/UniformReader.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by mehdi on 24/11/20.\n//\n\n\n#include \"UniformReader.h\"\n#include \"UniformDist.h\"\n\nUniformReader::UniformReader(){}\nUniformReader::~UniformReader(){}\n\nvoid UniformReader::read_file(const char *file,AbstractVariable* &pRandomUniform) {\n    std::ifstream read_input (file);\n    std::cout<< \"File = \"<< file<< std::endl;\n    if (!read_input.is_open()) {\n        throw Error(\"Couldn't open it  \", \"FILE\");\n    }\n    read_input.clear();\n    int vectorSize;\n    int a;\n    int b;\n    read_input >> vectorSize;\n    if ((read_input.fail())|| (vectorSize <= 0)){\n        throw Error(\"VARIABLE\",\"The vector's size needs to be a positive integer\");\n    }\n    read_input >> a;\n    if (read_input.fail() ){\n        throw Error(\"VARIABLE\",\"The lower bound needs to be a float number\");\n    }\n    read_input >> b;\n    if (read_input.fail()){\n        throw Error(\"VARIABLE\",\"The lower bound needs to be a float number\");\n    }\n    else if (b <= a){\n        throw Error(\"VARIABLE\",\"The upper bound needs to be strictly greater then the previous value\");\n    }\n    std::cout << \"J'ai fini de lire une uniforme\" << std::endl;\n    // Creer une classe uniform avec ses informations\n    pRandomUniform = new UniformDist(vectorSize,a,b);\n    std::cout << \"J'ai fini de calculer une normale\" << std::endl;\n    for(int i =0; i<vectorSize;++i)\n        std::cout << pRandomUniform->get_vector()[i] << ' ';\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/UniformReader.cpp b/Modules/UniformReader.cpp
--- a/Modules/UniformReader.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/UniformReader.cpp	(date 1607025903141)
@@ -10,10 +10,12 @@
 UniformReader::~UniformReader(){}
 
 void UniformReader::read_file(const char *file,AbstractVariable* &pRandomUniform) {
+    std::cout<<"h"<<std::endl;
     std::ifstream read_input (file);
-    std::cout<< "File = "<< file<< std::endl;
+    std::cout<<"h"<<std::endl;
     if (!read_input.is_open()) {
-        throw Error("Couldn't open it  ", "FILE");
+        std::cout<<"h"<<std::endl;
+        throw FileError();
     }
     read_input.clear();
     int vectorSize;
@@ -21,18 +23,18 @@
     int b;
     read_input >> vectorSize;
     if ((read_input.fail())|| (vectorSize <= 0)){
-        throw Error("VARIABLE","The vector's size needs to be a positive integer");
+        throw VectSizeError();
     }
     read_input >> a;
     if (read_input.fail() ){
-        throw Error("VARIABLE","The lower bound needs to be a float number");
+        throw LowerError();
     }
     read_input >> b;
     if (read_input.fail()){
-        throw Error("VARIABLE","The lower bound needs to be a float number");
+        throw UpperError();
     }
     else if (b <= a){
-        throw Error("VARIABLE","The upper bound needs to be strictly greater then the previous value");
+        throw BoundError();
     }
     std::cout << "J'ai fini de lire une uniforme" << std::endl;
     // Creer une classe uniform avec ses informations
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ /dev/null	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/Project_Monte_carlo.iml" filepath="$PROJECT_DIR$/.idea/Project_Monte_carlo.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: Modules/TrigoFunc.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by hugo on 28/11/2020.\n//\n\n#ifndef PROJECT_MONTE_CARLO_TRIGOFUNC_H\n#define PROJECT_MONTE_CARLO_TRIGOFUNC_H\n\n#include \"AbstractFunc.h\"\n\nclass TrigoFunc:public AbstractFunc {\npublic:\n    TrigoFunc();\n    ~TrigoFunc() override;\n    void build();\n    double evaluate(double x) override ;\n\n};\n\n\n#endif //PROJECT_MONTE_CARLO_TRIGOFUNC_H\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/TrigoFunc.h b/Modules/TrigoFunc.h
--- a/Modules/TrigoFunc.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/TrigoFunc.h	(date 1606989153763)
@@ -11,9 +11,12 @@
 public:
     TrigoFunc();
     ~TrigoFunc() override;
-    void build();
+    TrigoFunc(int a, int b);
     double evaluate(double x) override ;
 
+private:
+    int coef_a;
+    int coef_b;
 };
 
 
Index: Modules/TrigoFunc.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by hugo on 28/11/2020.\n//\n\n#include \"TrigoFunc.h\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/TrigoFunc.cpp b/Modules/TrigoFunc.cpp
--- a/Modules/TrigoFunc.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/TrigoFunc.cpp	(date 1606989153775)
@@ -2,4 +2,19 @@
 // Created by hugo on 28/11/2020.
 //
 
+#include <iostream>
+#include <math.h>
+
 #include "TrigoFunc.h"
+
+TrigoFunc::TrigoFunc() {}
+TrigoFunc::~TrigoFunc() {}
+
+TrigoFunc::TrigoFunc(int a, int b):coef_a(a),coef_b(b){
+    std::cout<< "You have built the following polynomial: "<< coef_a<<"* cos( + "<<coef_b<<"* x ) "<<std::endl;
+
+}
+
+double TrigoFunc:: evaluate(double x){
+    return coef_a*cos(coef_b*x) ;
+};
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"CMakeRunConfigurationManager\" shouldGenerate=\"true\" shouldDeleteObsolete=\"true\">\n    <generated>\n      <config projectName=\"Project_Monte_carlo\" targetName=\"monte_carlo_run\" />\n      <config projectName=\"Project_Monte_carlo\" targetName=\"Input_test\" />\n      <config projectName=\"Project_Monte_carlo\" targetName=\"gtest\" />\n      <config projectName=\"Project_Monte_carlo\" targetName=\"Modules\" />\n      <config projectName=\"Project_Monte_carlo\" targetName=\"gtest_main\" />\n    </generated>\n  </component>\n  <component name=\"CMakeSettings\">\n    <configurations>\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\n    </configurations>\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"29280ede-bff2-4e7a-8182-6ac519fa5ecf\" name=\"Default Changelist\" comment=\"Moment done\">\n      <change afterPath=\"$PROJECT_DIR$/Modules/FunctReader.cpp\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/Modules/FunctReader.h\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/AbstractReader.h\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/AbstractReader.h\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/CMakeLists.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/CMakeLists.txt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/ExpFunc.h\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/ExpFunc.h\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/NormalDist.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/NormalDist.cpp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/StatisticalMoment.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/StatisticalMoment.cpp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Modules/StatisticalMoment.h\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Modules/StatisticalMoment.h\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Test/basic_tests/Input_test.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Test/basic_tests/Input_test.cpp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile2\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile2\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/progress.marks\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/progress.marks\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/Project_Monte_carlo.cbp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/Project_Monte_carlo.cbp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/main.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.cpp\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ClangdSettings\">\n    <option name=\"formatViaClangd\" value=\"false\" />\n  </component>\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"CMakeBuildProfile:Debug\" />\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"CMakeLists.txt\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"OCResolveContextSettings\">\n    <option name=\"configuration\" value=\"0-Debug-Modules\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1kk6lZRK0tzrcU0oPy5QrmrHntU\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"cf.first.check.clang-format\" value=\"false\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/cmake-build-debug\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"terminal\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/cmake-build-debug\" />\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/cmake-build-debug\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"CMake Application.monte_carlo_run\">\n    <configuration name=\"Input_test\" type=\"CMakeGoogleTestRunConfigurationType\" factoryName=\"Google Test\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Project_Monte_carlo\" TARGET_NAME=\"Input_test\" CONFIG_NAME=\"Debug\" RUN_TARGET_PROJECT_NAME=\"Project_Monte_carlo\" RUN_TARGET_NAME=\"Input_test\" TEST_MODE=\"SUITE_TEST\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n        <option name=\"BeforeTestRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Modules\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Project_Monte_carlo\" TARGET_NAME=\"Modules\" CONFIG_NAME=\"Debug\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"gtest\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Project_Monte_carlo\" TARGET_NAME=\"gtest\" CONFIG_NAME=\"Debug\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"gtest_main\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Project_Monte_carlo\" TARGET_NAME=\"gtest_main\" CONFIG_NAME=\"Debug\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"monte_carlo_run\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Project_Monte_carlo\" TARGET_NAME=\"monte_carlo_run\" CONFIG_NAME=\"Debug\" RUN_TARGET_PROJECT_NAME=\"Project_Monte_carlo\" RUN_TARGET_NAME=\"monte_carlo_run\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"test\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" WORKING_DIR=\"file://$PROJECT_DIR$\" PASS_PARENT_ENVS_2=\"true\" CONFIG_NAME=\"Debug\" RUN_PATH=\"$PROJECT_DIR$/cmake-build-debug/Test/basic_tests/Input_test\" EXPLICIT_BUILD_TARGET_NAME=\"all\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"GradleAppRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.cpp.gradle.execution.GradleNativeBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"CMake Application.Modules\" />\n      <item itemvalue=\"CMake Application.gtest\" />\n      <item itemvalue=\"CMake Application.gtest_main\" />\n      <item itemvalue=\"CMake Application.monte_carlo_run\" />\n      <item itemvalue=\"CMake Application.test\" />\n      <item itemvalue=\"Google Test.Input_test\" />\n    </list>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"29280ede-bff2-4e7a-8182-6ac519fa5ecf\" name=\"Default Changelist\" comment=\"\" />\n      <created>1606232396522</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1606232396522</updated>\n      <workItem from=\"1606232400806\" duration=\"3663000\" />\n      <workItem from=\"1606238314808\" duration=\"63000\" />\n      <workItem from=\"1606323398421\" duration=\"3009000\" />\n      <workItem from=\"1606326886474\" duration=\"621000\" />\n      <workItem from=\"1606657266405\" duration=\"8690000\" />\n      <workItem from=\"1606723460518\" duration=\"3523000\" />\n      <workItem from=\"1606744125427\" duration=\"598000\" />\n      <workItem from=\"1606928897220\" duration=\"2467000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\n      <created>1606232472143</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606232472143</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added folders and comments for doxygen\">\n      <created>1606238077384</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606238077384</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added folders and comments for doxygen\">\n      <created>1606255202718</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606255202719</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Removed Hello world\">\n      <created>1606255269232</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606255269232</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"probleme prints\">\n      <created>1606326096253</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606326096254</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Cmake for boost\">\n      <created>1606586632631</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606586632631</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Cmake for boost update\">\n      <created>1606587463193</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606587463193</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"added test\">\n      <created>1606587614954</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606587614954</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Casser tout / Expectation noramelment ok\">\n      <created>1606600141173</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606600141173</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Moment done\">\n      <created>1606674437821</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1606674437821</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"11\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/..\" />\n    </ignored-roots>\n    <MESSAGE value=\"Initial commit\" />\n    <MESSAGE value=\"Added folders and comments for doxygen\" />\n    <MESSAGE value=\"Removed Hello world\" />\n    <MESSAGE value=\"probleme prints\" />\n    <MESSAGE value=\"Cmake for boost\" />\n    <MESSAGE value=\"Cmake for boost update\" />\n    <MESSAGE value=\"added test\" />\n    <MESSAGE value=\"Casser tout / Expectation noramelment ok\" />\n    <MESSAGE value=\"Moment done\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Moment done\" />\n  </component>\n  <component name=\"WindowStateProjectService\">\n    <state x=\"458\" y=\"162\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1606588203438\">\n      <screen x=\"72\" y=\"27\" width=\"1848\" height=\"1053\" />\n    </state>\n    <state x=\"458\" y=\"162\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606588203438\" />\n    <state x=\"652\" y=\"354\" width=\"672\" height=\"396\" key=\"#com.intellij.fileTypes.FileTypeChooser\" timestamp=\"1606325198379\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state x=\"652\" y=\"354\" width=\"672\" height=\"396\" key=\"#com.intellij.fileTypes.FileTypeChooser/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606325198379\" />\n    <state x=\"726\" y=\"301\" width=\"524\" height=\"502\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog\" timestamp=\"1606325194378\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state x=\"726\" y=\"301\" width=\"524\" height=\"502\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606325194378\" />\n    <state x=\"536\" y=\"98\" width=\"916\" height=\"898\" key=\"CommitChangelistDialog2\" timestamp=\"1606238144394\">\n      <screen x=\"72\" y=\"27\" width=\"1848\" height=\"1053\" />\n    </state>\n    <state x=\"536\" y=\"98\" width=\"916\" height=\"898\" key=\"CommitChangelistDialog2/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606238144394\" />\n    <state x=\"813\" y=\"311\" width=\"424\" height=\"496\" key=\"FileChooserDialogImpl\" timestamp=\"1606588201424\">\n      <screen x=\"72\" y=\"27\" width=\"1848\" height=\"1053\" />\n    </state>\n    <state x=\"813\" y=\"311\" width=\"424\" height=\"496\" key=\"FileChooserDialogImpl/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606588201424\" />\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1606729018800\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.bottom/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606729018800\" />\n    <state width=\"1802\" height=\"256\" key=\"GridCell.Tab.0.bottom/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606596439592\" />\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.center\" timestamp=\"1606729018800\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.center/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606729018800\" />\n    <state width=\"1802\" height=\"256\" key=\"GridCell.Tab.0.center/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606596439591\" />\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.left\" timestamp=\"1606729018799\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.left/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606729018799\" />\n    <state width=\"1802\" height=\"256\" key=\"GridCell.Tab.0.left/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606596439591\" />\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.right\" timestamp=\"1606729018800\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"278\" key=\"GridCell.Tab.0.right/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606729018800\" />\n    <state width=\"1802\" height=\"256\" key=\"GridCell.Tab.0.right/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606596439591\" />\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.bottom\" timestamp=\"1606326339704\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.bottom/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606326339704\" />\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.center\" timestamp=\"1606326339704\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.center/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606326339704\" />\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.left\" timestamp=\"1606326339704\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.left/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606326339704\" />\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.right\" timestamp=\"1606326339704\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state width=\"1807\" height=\"344\" key=\"GridCell.Tab.1.right/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606326339704\" />\n    <state x=\"519\" y=\"218\" width=\"1016\" height=\"742\" key=\"SettingsEditor\" timestamp=\"1606593961419\">\n      <screen x=\"72\" y=\"27\" width=\"1848\" height=\"1053\" />\n    </state>\n    <state x=\"519\" y=\"218\" width=\"1016\" height=\"742\" key=\"SettingsEditor/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606593961419\" />\n    <state x=\"590\" y=\"262\" width=\"800\" height=\"528\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1606674443275\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state x=\"590\" y=\"262\" width=\"800\" height=\"528\" key=\"Vcs.Push.Dialog.v2/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606674443275\" />\n    <state x=\"594\" y=\"247\" width=\"800\" height=\"540\" key=\"Vcs.Push.Dialog.v2/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606587620558\" />\n    <state x=\"777\" y=\"441\" width=\"438\" height=\"182\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1606600115302\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state x=\"777\" y=\"441\" width=\"438\" height=\"182\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606600115302\" />\n    <state x=\"780\" y=\"431\" width=\"431\" height=\"182\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606587451497\" />\n    <state x=\"772\" y=\"338\" width=\"432\" height=\"429\" key=\"refactoring.ChangeSignatureDialog\" timestamp=\"1606597368165\">\n      <screen x=\"67\" y=\"27\" width=\"1853\" height=\"1053\" />\n    </state>\n    <state x=\"772\" y=\"338\" width=\"432\" height=\"429\" key=\"refactoring.ChangeSignatureDialog/67.27.1853.1053@67.27.1853.1053\" timestamp=\"1606597368165\" />\n    <state x=\"660\" y=\"249\" key=\"run.anything.popup\" timestamp=\"1606326937389\">\n      <screen x=\"72\" y=\"27\" width=\"1848\" height=\"1053\" />\n    </state>\n    <state x=\"660\" y=\"249\" key=\"run.anything.popup/72.27.1848.1053@72.27.1848.1053\" timestamp=\"1606326937389\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/.idea/workspace.xml	(date 1607175908646)
@@ -20,33 +20,49 @@
   </component>
   <component name="CMakeRunConfigurationManager" shouldGenerate="true" shouldDeleteObsolete="true">
     <generated>
-      <config projectName="Project_Monte_carlo" targetName="monte_carlo_run" />
-      <config projectName="Project_Monte_carlo" targetName="Input_test" />
-      <config projectName="Project_Monte_carlo" targetName="gtest" />
       <config projectName="Project_Monte_carlo" targetName="Modules" />
+      <config projectName="Project_Monte_carlo" targetName="gtest" />
+      <config projectName="Project_Monte_carlo" targetName="Input_test" />
       <config projectName="Project_Monte_carlo" targetName="gtest_main" />
+      <config projectName="Project_Monte_carlo" targetName="monte_carlo_run" />
     </generated>
   </component>
   <component name="CMakeSettings">
     <configurations>
-      <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
+      <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" ENABLED="true" />
     </configurations>
   </component>
   <component name="ChangeListManager">
     <list default="true" id="29280ede-bff2-4e7a-8182-6ac519fa5ecf" name="Default Changelist" comment="Moment done">
-      <change afterPath="$PROJECT_DIR$/Modules/FunctReader.cpp" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Modules/FunctReader.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/AbstractFunc.h" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/AbstractFunc.h" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Modules/AbstractReader.h" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/AbstractReader.h" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Modules/CMakeLists.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/CMakeLists.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/Error.hpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/AbstractError.hpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/ExpFunc.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/ExpFunc.cpp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Modules/ExpFunc.h" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/ExpFunc.h" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Modules/NormalDist.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/NormalDist.cpp" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Modules/StatisticalMoment.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/StatisticalMoment.cpp" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Modules/StatisticalMoment.h" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/StatisticalMoment.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/FunctReader.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/FunctReader.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/NormalReader.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/NormalReader.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/TrigoFunc.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/TrigoFunc.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/TrigoFunc.h" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/TrigoFunc.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Modules/UniformReader.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Modules/UniformReader.cpp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Test/basic_tests/Input_test.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Test/basic_tests/Input_test.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/basic_tests/MonteCarloExpectation_test.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Test/basic_tests/MonteCarloExpectation_test.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/basic_tests/Normal_test.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Test/basic_tests/Normal_test.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/basic_tests/StandardCentralLimitThm_test.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Test/basic_tests/StandardCentralLimitThm_test.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/basic_tests/Uniform_test.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/Test/basic_tests/Uniform_test.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/lib/googletest/include/gtest/gtest.h" beforeDir="false" afterPath="$PROJECT_DIR$/Test/lib/googletest/include/gtest/gtest.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/lib/googletest/include/gtest/internal/gtest-port.h" beforeDir="false" afterPath="$PROJECT_DIR$/Test/lib/googletest/include/gtest/internal/gtest-port.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Test/lib/googletest/src/gtest-death-test.cc" beforeDir="false" afterPath="$PROJECT_DIR$/Test/lib/googletest/src/gtest-death-test.cc" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile.cmake" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile.cmake" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile2" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile2" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/progress.marks" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/progress.marks" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/TargetDirectories.txt" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/TargetDirectories.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/clion-log.txt" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/clion-log.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/Makefile" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/Makefile" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/cmake-build-debug/Project_Monte_carlo.cbp" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/Project_Monte_carlo.cbp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/cmake_install.cmake" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/cmake_install.cmake" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/main.cpp" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -67,9 +83,6 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="OCResolveContextSettings">
-    <option name="configuration" value="0-Debug-Modules" />
   </component>
   <component name="ProjectId" id="1kk6lZRK0tzrcU0oPy5QrmrHntU" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
@@ -97,42 +110,44 @@
       <recent name="$PROJECT_DIR$" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/cmake-build-debug/Test/basic_tests" />
+      <recent name="$PROJECT_DIR$/Test/basic_tests" />
       <recent name="$PROJECT_DIR$/cmake-build-debug" />
     </key>
   </component>
-  <component name="RunManager" selected="CMake Application.monte_carlo_run">
-    <configuration name="Input_test" type="CMakeGoogleTestRunConfigurationType" factoryName="Google Test" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="Input_test" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Project_Monte_carlo" RUN_TARGET_NAME="Input_test" TEST_MODE="SUITE_TEST">
+  <component name="RunManager" selected="CMake Application.test">
+    <configuration name="Input_test" type="CMakeGoogleTestRunConfigurationType" factoryName="Google Test" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="Input_test" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Project_Monte_carlo" RUN_TARGET_NAME="Input_test" TEST_MODE="SUITE_TEST">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
         <option name="BeforeTestRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="Modules" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="Modules" CONFIG_NAME="Debug">
+    <configuration name="Modules" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="Modules" CONFIG_NAME="Debug">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="gtest" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="gtest" CONFIG_NAME="Debug">
+    <configuration name="gtest" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="gtest" CONFIG_NAME="Debug">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="gtest_main" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="gtest_main" CONFIG_NAME="Debug">
+    <configuration name="gtest_main" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="gtest_main" CONFIG_NAME="Debug">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="monte_carlo_run" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="monte_carlo_run" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Project_Monte_carlo" RUN_TARGET_NAME="monte_carlo_run">
+    <configuration name="monte_carlo_run" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Project_Monte_carlo" TARGET_NAME="monte_carlo_run" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Project_Monte_carlo" RUN_TARGET_NAME="monte_carlo_run">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="test" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" WORKING_DIR="file://$PROJECT_DIR$" PASS_PARENT_ENVS_2="true" CONFIG_NAME="Debug" RUN_PATH="$PROJECT_DIR$/cmake-build-debug/Test/basic_tests/Input_test" EXPLICIT_BUILD_TARGET_NAME="all">
+    <configuration name="test" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" WORKING_DIR="file://$PROJECT_DIR$" PASS_PARENT_ENVS_2="true" CONFIG_NAME="Debug" RUN_PATH="$PROJECT_DIR$/cmake-build-debug/Test/basic_tests/Input_test" EXPLICIT_BUILD_TARGET_NAME="all">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration default="true" type="GradleAppRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" PASS_PARENT_ENVS_2="true">
+    <configuration default="true" type="GradleAppRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" PASS_PARENT_ENVS_2="true">
       <method v="2">
         <option name="com.jetbrains.cidr.cpp.gradle.execution.GradleNativeBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
@@ -162,6 +177,7 @@
       <workItem from="1606723460518" duration="3523000" />
       <workItem from="1606744125427" duration="598000" />
       <workItem from="1606928897220" duration="2467000" />
+      <workItem from="1607173384332" duration="2027000" />
     </task>
     <task id="LOCAL-00001" summary="Initial commit">
       <created>1606232472143</created>
@@ -266,84 +282,4 @@
     <MESSAGE value="Moment done" />
     <option name="LAST_COMMIT_MESSAGE" value="Moment done" />
   </component>
-  <component name="WindowStateProjectService">
-    <state x="458" y="162" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1606588203438">
-      <screen x="72" y="27" width="1848" height="1053" />
-    </state>
-    <state x="458" y="162" key="#com.intellij.execution.impl.EditConfigurationsDialog/72.27.1848.1053@72.27.1848.1053" timestamp="1606588203438" />
-    <state x="652" y="354" width="672" height="396" key="#com.intellij.fileTypes.FileTypeChooser" timestamp="1606325198379">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state x="652" y="354" width="672" height="396" key="#com.intellij.fileTypes.FileTypeChooser/67.27.1853.1053@67.27.1853.1053" timestamp="1606325198379" />
-    <state x="726" y="301" width="524" height="502" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog" timestamp="1606325194378">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state x="726" y="301" width="524" height="502" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/67.27.1853.1053@67.27.1853.1053" timestamp="1606325194378" />
-    <state x="536" y="98" width="916" height="898" key="CommitChangelistDialog2" timestamp="1606238144394">
-      <screen x="72" y="27" width="1848" height="1053" />
-    </state>
-    <state x="536" y="98" width="916" height="898" key="CommitChangelistDialog2/72.27.1848.1053@72.27.1848.1053" timestamp="1606238144394" />
-    <state x="813" y="311" width="424" height="496" key="FileChooserDialogImpl" timestamp="1606588201424">
-      <screen x="72" y="27" width="1848" height="1053" />
-    </state>
-    <state x="813" y="311" width="424" height="496" key="FileChooserDialogImpl/72.27.1848.1053@72.27.1848.1053" timestamp="1606588201424" />
-    <state width="1807" height="278" key="GridCell.Tab.0.bottom" timestamp="1606729018800">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="278" key="GridCell.Tab.0.bottom/67.27.1853.1053@67.27.1853.1053" timestamp="1606729018800" />
-    <state width="1802" height="256" key="GridCell.Tab.0.bottom/72.27.1848.1053@72.27.1848.1053" timestamp="1606596439592" />
-    <state width="1807" height="278" key="GridCell.Tab.0.center" timestamp="1606729018800">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="278" key="GridCell.Tab.0.center/67.27.1853.1053@67.27.1853.1053" timestamp="1606729018800" />
-    <state width="1802" height="256" key="GridCell.Tab.0.center/72.27.1848.1053@72.27.1848.1053" timestamp="1606596439591" />
-    <state width="1807" height="278" key="GridCell.Tab.0.left" timestamp="1606729018799">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="278" key="GridCell.Tab.0.left/67.27.1853.1053@67.27.1853.1053" timestamp="1606729018799" />
-    <state width="1802" height="256" key="GridCell.Tab.0.left/72.27.1848.1053@72.27.1848.1053" timestamp="1606596439591" />
-    <state width="1807" height="278" key="GridCell.Tab.0.right" timestamp="1606729018800">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="278" key="GridCell.Tab.0.right/67.27.1853.1053@67.27.1853.1053" timestamp="1606729018800" />
-    <state width="1802" height="256" key="GridCell.Tab.0.right/72.27.1848.1053@72.27.1848.1053" timestamp="1606596439591" />
-    <state width="1807" height="344" key="GridCell.Tab.1.bottom" timestamp="1606326339704">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="344" key="GridCell.Tab.1.bottom/67.27.1853.1053@67.27.1853.1053" timestamp="1606326339704" />
-    <state width="1807" height="344" key="GridCell.Tab.1.center" timestamp="1606326339704">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="344" key="GridCell.Tab.1.center/67.27.1853.1053@67.27.1853.1053" timestamp="1606326339704" />
-    <state width="1807" height="344" key="GridCell.Tab.1.left" timestamp="1606326339704">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="344" key="GridCell.Tab.1.left/67.27.1853.1053@67.27.1853.1053" timestamp="1606326339704" />
-    <state width="1807" height="344" key="GridCell.Tab.1.right" timestamp="1606326339704">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state width="1807" height="344" key="GridCell.Tab.1.right/67.27.1853.1053@67.27.1853.1053" timestamp="1606326339704" />
-    <state x="519" y="218" width="1016" height="742" key="SettingsEditor" timestamp="1606593961419">
-      <screen x="72" y="27" width="1848" height="1053" />
-    </state>
-    <state x="519" y="218" width="1016" height="742" key="SettingsEditor/72.27.1848.1053@72.27.1848.1053" timestamp="1606593961419" />
-    <state x="590" y="262" width="800" height="528" key="Vcs.Push.Dialog.v2" timestamp="1606674443275">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state x="590" y="262" width="800" height="528" key="Vcs.Push.Dialog.v2/67.27.1853.1053@67.27.1853.1053" timestamp="1606674443275" />
-    <state x="594" y="247" width="800" height="540" key="Vcs.Push.Dialog.v2/72.27.1848.1053@72.27.1848.1053" timestamp="1606587620558" />
-    <state x="777" y="441" width="438" height="182" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1606600115302">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state x="777" y="441" width="438" height="182" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/67.27.1853.1053@67.27.1853.1053" timestamp="1606600115302" />
-    <state x="780" y="431" width="431" height="182" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/72.27.1848.1053@72.27.1848.1053" timestamp="1606587451497" />
-    <state x="772" y="338" width="432" height="429" key="refactoring.ChangeSignatureDialog" timestamp="1606597368165">
-      <screen x="67" y="27" width="1853" height="1053" />
-    </state>
-    <state x="772" y="338" width="432" height="429" key="refactoring.ChangeSignatureDialog/67.27.1853.1053@67.27.1853.1053" timestamp="1606597368165" />
-    <state x="660" y="249" key="run.anything.popup" timestamp="1606326937389">
-      <screen x="72" y="27" width="1848" height="1053" />
-    </state>
-    <state x="660" y="249" key="run.anything.popup/72.27.1848.1053@72.27.1848.1053" timestamp="1606326937389" />
-  </component>
 </project>
\ No newline at end of file
Index: Modules/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>project(Modules)\n\nset(HEADER_FILES\n        AbstractReader.h\n        AbstractExpectation.h\n        NormalReader.h\n        UniformReader.h\n        Error.hpp\n        MonteCarloExpectation.h\n        ExpFunc.h\n        UniformDist.h\n        NormalDist.h\n        AbstractVariable.h\n        AbstractFunc.h\n        TrigoFunc.h\n        PolynomlFunc.h\n        )\n\nset(SOURCE_FILES\n        MonteCarloExpectation.cpp\n        AbstractReader.cpp\n        NormalReader.cpp\n        UniformReader.cpp\n        UniformDist.cpp NormalDist.cpp   AbstractFunc.cpp  TrigoFunc.cpp  PolynomlFunc.cpp  ExpFunc.cpp AbstractExpectation.cpp StatisticalMoment.cpp StatisticalMoment.h FunctReader.cpp FunctReader.h)\n\nadd_library(Modules STATIC ${SOURCE_FILES} ${HEADER_FILES})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/CMakeLists.txt b/Modules/CMakeLists.txt
--- a/Modules/CMakeLists.txt	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/CMakeLists.txt	(date 1607025462843)
@@ -5,8 +5,9 @@
         AbstractExpectation.h
         NormalReader.h
         UniformReader.h
-        Error.hpp
+        AbstractError.hpp
         MonteCarloExpectation.h
+        FunctReader.h
         ExpFunc.h
         UniformDist.h
         NormalDist.h
@@ -21,6 +22,8 @@
         AbstractReader.cpp
         NormalReader.cpp
         UniformReader.cpp
-        UniformDist.cpp NormalDist.cpp   AbstractFunc.cpp  TrigoFunc.cpp  PolynomlFunc.cpp  ExpFunc.cpp AbstractExpectation.cpp StatisticalMoment.cpp StatisticalMoment.h FunctReader.cpp FunctReader.h)
+        UniformDist.cpp
+        FunctReader.cpp
+        NormalDist.cpp   AbstractFunc.cpp  TrigoFunc.cpp  PolynomlFunc.cpp  ExpFunc.cpp AbstractExpectation.cpp StatisticalMoment.cpp StatisticalMoment.h)
 
 add_library(Modules STATIC ${SOURCE_FILES} ${HEADER_FILES})
\ No newline at end of file
Index: Test/basic_tests/StandardCentralLimitThm_test.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by pierr on 06/12/2019.\r\n//\r\n\r\n#include \"gtest/gtest.h\"\r\n#include \"Uniform.h\"\r\n#include \"Normal.h\"\r\n#include \"Error.hpp\"\r\n#include \"MonteCarloExpectation.hpp\"\r\n#include \"StandardCentralLimitThm.hpp\"\r\n#include <cmath>\r\n\r\n\r\n#define TEST_SIZE 1000\r\n#define TEST_UPPER_BOUND 3.\r\n#define TEST_LOWER_BOUND 1.5\r\n#define TEST_MEAN 3.\r\n#define TEST_VARIANCE 1.5\r\n\r\nclass StandardCentrallLimitThmFixture : public ::testing::Test\r\n{\r\nprotected:\r\n    virtual void TearDown() {\r\n\r\n    }\r\n\r\n    virtual void SetUp() {\r\n\r\n    }\r\npublic:\r\n    StandardCentrallLimitThmFixture() : Test() {\r\n        uniform_sample =  new Uniform(TEST_SIZE, TEST_LOWER_BOUND, TEST_UPPER_BOUND);\r\n        normal_sample = new Normal(TEST_SIZE ,TEST_MEAN , TEST_VARIANCE ) ;\r\n        mc_uniform = new MonteCarloExpectation(uniform_sample);\r\n        mc_normal = new MonteCarloExpectation( normal_sample ) ;\r\n        st_central_limite = new StandardCentralLimitThm() ;\r\n    }\r\n\r\n    virtual ~StandardCentrallLimitThmFixture() {\r\n        delete mc_uniform;\r\n        delete mc_normal ;\r\n        delete uniform_sample;\r\n        delete normal_sample ;\r\n        delete st_central_limite ;\r\n    }\r\n    Random_variable* uniform_sample ;\r\n    Random_variable* normal_sample ;\r\n    MonteCarloExpectation* mc_uniform ;\r\n    MonteCarloExpectation* mc_normal;\r\n    AbstCentralLimitThm* st_central_limite ;\r\n};\r\n\r\nTEST_F(StandardCentrallLimitThmFixture, uniform_central_limite_check) {\r\n    st_central_limite->calculate_CentralLimitThm(uniform_sample,mc_uniform,0.05);\r\n    EXPECT_TRUE(st_central_limite->is_verified());\r\n}\r\nTEST_F(StandardCentrallLimitThmFixture, normal_central_limite_check) {\r\n    st_central_limite->calculate_CentralLimitThm(normal_sample,mc_normal,0.05);\r\n    EXPECT_TRUE(st_central_limite->is_verified());\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/basic_tests/StandardCentralLimitThm_test.cpp b/Test/basic_tests/StandardCentralLimitThm_test.cpp
--- a/Test/basic_tests/StandardCentralLimitThm_test.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/basic_tests/StandardCentralLimitThm_test.cpp	(date 1606989168784)
@@ -5,7 +5,7 @@
 #include "gtest/gtest.h"
 #include "Uniform.h"
 #include "Normal.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include "MonteCarloExpectation.hpp"
 #include "StandardCentralLimitThm.hpp"
 #include <cmath>
Index: Modules/ExpFunc.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by hugo on 28/11/2020.\n//\n\n#include \"ExpFunc.h\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/ExpFunc.cpp b/Modules/ExpFunc.cpp
--- a/Modules/ExpFunc.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/ExpFunc.cpp	(date 1606989168804)
@@ -2,4 +2,19 @@
 // Created by hugo on 28/11/2020.
 //
 
+#include <iostream>
+#include <math.h>
 #include "ExpFunc.h"
+
+
+ExpFunc::ExpFunc()  {}
+ExpFunc::~ExpFunc() {}
+
+ExpFunc::ExpFunc(int a, int b):coef_a(a),coef_b(b){
+    std::cout<< "You have built the following exponential function: "<< coef_b<<"* e^( + "<<coef_a<<"* x) "<<std::endl;
+
+}
+
+double ExpFunc:: evaluate(double x){
+    return coef_b*exp(coef_a*x);
+};
\ No newline at end of file
Index: cmake-build-debug/CMakeFiles/TargetDirectories.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/rebuild_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/edit_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/monte_carlo_run.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/rebuild_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/edit_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/rebuild_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/edit_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/Input_test.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/rebuild_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/edit_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest_main.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/rebuild_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/edit_cache.dir\n/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/Modules.dir\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/TargetDirectories.txt b/cmake-build-debug/CMakeFiles/TargetDirectories.txt
--- a/cmake-build-debug/CMakeFiles/TargetDirectories.txt	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/CMakeFiles/TargetDirectories.txt	(date 1607025467183)
@@ -1,15 +1,15 @@
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/rebuild_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/edit_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/monte_carlo_run.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/rebuild_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/edit_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/rebuild_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/edit_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/Input_test.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/rebuild_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/edit_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest_main.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/rebuild_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/edit_cache.dir
-/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/Modules.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles/rebuild_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles/edit_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles/monte_carlo_run.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/rebuild_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/CMakeFiles/edit_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/rebuild_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/edit_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/CMakeFiles/Input_test.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/rebuild_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/edit_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest_main.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/CMakeFiles/gtest.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/rebuild_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/edit_cache.dir
+/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/CMakeFiles/Modules.dir
Index: Test/basic_tests/Uniform_test.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by pierr on 01/12/2019.\r\n//\r\n\r\n#include \"gtest/gtest.h\"\r\n#include \"Uniform.h\"\r\n#include \"Error.hpp\"\r\n#include <cmath>\r\n\r\n\r\n#define TEST_SIZE 50\r\n#define TEST_UPPER_BOUND 3.\r\n#define TEST_LOWER_BOUND 1.5\r\n\r\n\r\nclass UniformFixture : public ::testing::Test\r\n{\r\nprotected:\r\n    virtual void TearDown() {\r\n\r\n    }\r\n\r\n    virtual void SetUp() {\r\n\r\n        mean = (TEST_UPPER_BOUND + TEST_LOWER_BOUND)/2. ;\r\n        var = pow(TEST_UPPER_BOUND+TEST_LOWER_BOUND,2)/12.0 ;\r\n    }\r\npublic:\r\n    UniformFixture() : Test() {\r\n        uniform_sample = new Uniform(TEST_SIZE, TEST_LOWER_BOUND, TEST_UPPER_BOUND);\r\n\r\n    }\r\n\r\n    virtual ~UniformFixture() {\r\n        delete uniform_sample;\r\n    }\r\n    Uniform* uniform_sample;\r\n    double mean ;\r\n    double var ;\r\n};\r\n\r\nTEST_F(UniformFixture, mean_sample_check) {\r\n    EXPECT_EQ(mean,uniform_sample->get_mean());\r\n}\r\nTEST_F(UniformFixture, var_sample_check) {\r\n    EXPECT_EQ(var,uniform_sample->get_var());\r\n}\r\nTEST_F(UniformFixture, size_sample_check) {\r\n    EXPECT_EQ(TEST_SIZE,uniform_sample->get_sample().size());\r\n}\r\nTEST_F(UniformFixture, size_sub_sample_throw_check) {\r\n    ASSERT_THROW(uniform_sample->sub_sample(100),Error);\r\n}\r\nTEST_F(UniformFixture, size_sub_sample_check) {\r\n    Random_variable* p_rvs ;\r\n    p_rvs = uniform_sample->sub_sample(20) ;\r\n    EXPECT_EQ(p_rvs->get_size(),20);\r\n    delete p_rvs ;\r\n}\r\nTEST_F(UniformFixture, unchange_this_sub_sample_check) {\r\n    Random_variable* p_rvs ;\r\n    p_rvs = uniform_sample->sub_sample(50) ;\r\n    auto v1 = p_rvs->get_sample();\r\n    auto v2 = uniform_sample->get_sample() ;\r\n    double expect(0);\r\n    for (int i = 0; i < v1.size() ; ++i) {\r\n        expect+= v1[i]-v2[i] ;\r\n    }\r\n    EXPECT_EQ(expect,0);\r\n    delete p_rvs ;\r\n}\r\nTEST_F(UniformFixture, negative_size_sample_throw_check) {\r\n    ASSERT_THROW(Uniform(-TEST_SIZE, TEST_LOWER_BOUND, TEST_UPPER_BOUND),Error);\r\n}\r\nTEST_F(UniformFixture, interval_trrow_check) {\r\n    ASSERT_THROW(Uniform(TEST_SIZE, TEST_UPPER_BOUND, TEST_LOWER_BOUND),Error);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/basic_tests/Uniform_test.cpp b/Test/basic_tests/Uniform_test.cpp
--- a/Test/basic_tests/Uniform_test.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/basic_tests/Uniform_test.cpp	(date 1606989168852)
@@ -4,7 +4,7 @@
 
 #include "gtest/gtest.h"
 #include "Uniform.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 #include <cmath>
 
 
Index: cmake-build-debug/CMakeFiles/clion-log.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/app/extra/clion/bin/cmake/linux/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G \"CodeBlocks - Unix Makefiles\" /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo\nCMake Warning at Test/lib/googletest/CMakeLists.txt:54 (project):\n  VERSION keyword not followed by a value or was followed by a value that\n  expanded to nothing.\n\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/clion-log.txt b/cmake-build-debug/CMakeFiles/clion-log.txt
--- a/cmake-build-debug/CMakeFiles/clion-log.txt	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/CMakeFiles/clion-log.txt	(date 1607025467319)
@@ -1,4 +1,4 @@
-/app/extra/clion/bin/cmake/linux/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo
+/snap/clion/137/bin/cmake/linux/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" /home/hugo/MA3/Project_monte_carlo
 CMake Warning at Test/lib/googletest/CMakeLists.txt:54 (project):
   VERSION keyword not followed by a value or was followed by a value that
   expanded to nothing.
@@ -6,4 +6,4 @@
 
 -- Configuring done
 -- Generating done
--- Build files have been written to: /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug
+-- Build files have been written to: /home/hugo/MA3/Project_monte_carlo/cmake-build-debug
Index: Modules/ExpFunc.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by hugo on 28/11/2020.\n//\n\n#ifndef PROJECT_MONTE_CARLO_EXPFUNC_H\n#define PROJECT_MONTE_CARLO_EXPFUNC_H\n\n#include \"AbstractFunc.h\"\n\nclass ExpFunc : public AbstractFunc{\npublic:\n    ExpFunc(int i, int i1);\n    ~ExpFunc();\n    void build();\n    double evaluate(double x);\n};\n\n\n#endif //PROJECT_MONTE_CARLO_EXPFUNC_H\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/ExpFunc.h b/Modules/ExpFunc.h
--- a/Modules/ExpFunc.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/ExpFunc.h	(date 1607025375793)
@@ -9,10 +9,16 @@
 
 class ExpFunc : public AbstractFunc{
 public:
-    ExpFunc(int i, int i1);
+    ExpFunc();
     ~ExpFunc();
-    void build();
+    ExpFunc(int a, int b);
     double evaluate(double x);
+
+
+private:
+    int coef_a;
+    int coef_b;
+
 };
 
 
Index: cmake-build-debug/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.17\n\n# Default target executed when no arguments are given to make.\ndefault_target: all\n\n.PHONY : default_target\n\n# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n.NOTPARALLEL:\n\n\n#=============================================================================\n# Special targets provided by cmake.\n\n# Disable implicit rules so canonical targets will work.\n.SUFFIXES:\n\n\n# Disable VCS-based implicit rules.\n% : %,v\n\n\n# Disable VCS-based implicit rules.\n% : RCS/%\n\n\n# Disable VCS-based implicit rules.\n% : RCS/%,v\n\n\n# Disable VCS-based implicit rules.\n% : SCCS/s.%\n\n\n# Disable VCS-based implicit rules.\n% : s.%\n\n\n.SUFFIXES: .hpux_make_needs_suffix_list\n\n\n# Command-line flag to silence nested $(MAKE).\n$(VERBOSE)MAKESILENT = -s\n\n# Suppress display of executed commands.\n$(VERBOSE).SILENT:\n\n\n# A target that is always out of date.\ncmake_force:\n\n.PHONY : cmake_force\n\n#=============================================================================\n# Set environment variables for the build.\n\n# The shell in which to execute make rules.\nSHELL = /bin/sh\n\n# The CMake executable.\nCMAKE_COMMAND = /app/extra/clion/bin/cmake/linux/bin/cmake\n\n# The command to remove a file.\nRM = /app/extra/clion/bin/cmake/linux/bin/cmake -E rm -f\n\n# Escaping for special characters.\nEQUALS = =\n\n# The top-level source directory on which CMake was run.\nCMAKE_SOURCE_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo\n\n# The top-level build directory on which CMake was run.\nCMAKE_BINARY_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\n\n#=============================================================================\n# Targets provided globally by CMake.\n\n# Special rule for the target rebuild_cache\nrebuild_cache:\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"Running CMake to regenerate build system...\"\n\t/app/extra/clion/bin/cmake/linux/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)\n.PHONY : rebuild_cache\n\n# Special rule for the target rebuild_cache\nrebuild_cache/fast: rebuild_cache\n\n.PHONY : rebuild_cache/fast\n\n# Special rule for the target edit_cache\nedit_cache:\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"No interactive CMake dialog available...\"\n\t/app/extra/clion/bin/cmake/linux/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.\n.PHONY : edit_cache\n\n# Special rule for the target edit_cache\nedit_cache/fast: edit_cache\n\n.PHONY : edit_cache/fast\n\n# The main all target\nall: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/progress.marks\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : all\n\n# The main clean target\nclean:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean\n.PHONY : clean\n\n# The main clean target\nclean/fast: clean\n\n.PHONY : clean/fast\n\n# Prepare targets for installation.\npreinstall: all\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall\n.PHONY : preinstall\n\n# Prepare targets for installation.\npreinstall/fast:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall\n.PHONY : preinstall/fast\n\n# clear depends\ndepend:\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1\n.PHONY : depend\n\n#=============================================================================\n# Target rules for targets named monte_carlo_run\n\n# Build rule for target.\nmonte_carlo_run: cmake_check_build_system\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 monte_carlo_run\n.PHONY : monte_carlo_run\n\n# fast build rule for target.\nmonte_carlo_run/fast:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/build\n.PHONY : monte_carlo_run/fast\n\n#=============================================================================\n# Target rules for targets named Input_test\n\n# Build rule for target.\nInput_test: cmake_check_build_system\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Input_test\n.PHONY : Input_test\n\n# fast build rule for target.\nInput_test/fast:\n\t$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/build\n.PHONY : Input_test/fast\n\n#=============================================================================\n# Target rules for targets named gtest_main\n\n# Build rule for target.\ngtest_main: cmake_check_build_system\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 gtest_main\n.PHONY : gtest_main\n\n# fast build rule for target.\ngtest_main/fast:\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/build\n.PHONY : gtest_main/fast\n\n#=============================================================================\n# Target rules for targets named gtest\n\n# Build rule for target.\ngtest: cmake_check_build_system\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 gtest\n.PHONY : gtest\n\n# fast build rule for target.\ngtest/fast:\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/build\n.PHONY : gtest/fast\n\n#=============================================================================\n# Target rules for targets named Modules\n\n# Build rule for target.\nModules: cmake_check_build_system\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Modules\n.PHONY : Modules\n\n# fast build rule for target.\nModules/fast:\n\t$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/build\n.PHONY : Modules/fast\n\nmain.o: main.cpp.o\n\n.PHONY : main.o\n\n# target to build an object file\nmain.cpp.o:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/main.cpp.o\n.PHONY : main.cpp.o\n\nmain.i: main.cpp.i\n\n.PHONY : main.i\n\n# target to preprocess a source file\nmain.cpp.i:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/main.cpp.i\n.PHONY : main.cpp.i\n\nmain.s: main.cpp.s\n\n.PHONY : main.s\n\n# target to generate assembly for a file\nmain.cpp.s:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/main.cpp.s\n.PHONY : main.cpp.s\n\n# Help Target\nhelp:\n\t@echo \"The following are some of the valid targets for this Makefile:\"\n\t@echo \"... all (the default if no target is provided)\"\n\t@echo \"... clean\"\n\t@echo \"... depend\"\n\t@echo \"... edit_cache\"\n\t@echo \"... rebuild_cache\"\n\t@echo \"... Input_test\"\n\t@echo \"... Modules\"\n\t@echo \"... gtest\"\n\t@echo \"... gtest_main\"\n\t@echo \"... monte_carlo_run\"\n\t@echo \"... main.o\"\n\t@echo \"... main.i\"\n\t@echo \"... main.s\"\n.PHONY : help\n\n\n\n#=============================================================================\n# Special targets to cleanup operation of make.\n\n# Special rule to run CMake to check the build system integrity.\n# No rule that depends on this can have commands that come from listfiles\n# because they might be regenerated.\ncmake_check_build_system:\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0\n.PHONY : cmake_check_build_system\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Makefile b/cmake-build-debug/Makefile
--- a/cmake-build-debug/Makefile	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/Makefile	(date 1607025467171)
@@ -59,19 +59,19 @@
 SHELL = /bin/sh
 
 # The CMake executable.
-CMAKE_COMMAND = /app/extra/clion/bin/cmake/linux/bin/cmake
+CMAKE_COMMAND = /snap/clion/137/bin/cmake/linux/bin/cmake
 
 # The command to remove a file.
-RM = /app/extra/clion/bin/cmake/linux/bin/cmake -E rm -f
+RM = /snap/clion/137/bin/cmake/linux/bin/cmake -E rm -f
 
 # Escaping for special characters.
 EQUALS = =
 
 # The top-level source directory on which CMake was run.
-CMAKE_SOURCE_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo
+CMAKE_SOURCE_DIR = /home/hugo/MA3/Project_monte_carlo
 
 # The top-level build directory on which CMake was run.
-CMAKE_BINARY_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug
+CMAKE_BINARY_DIR = /home/hugo/MA3/Project_monte_carlo/cmake-build-debug
 
 #=============================================================================
 # Targets provided globally by CMake.
@@ -79,7 +79,7 @@
 # Special rule for the target rebuild_cache
 rebuild_cache:
 	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
-	/app/extra/clion/bin/cmake/linux/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+	/snap/clion/137/bin/cmake/linux/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
 .PHONY : rebuild_cache
 
 # Special rule for the target rebuild_cache
@@ -90,7 +90,7 @@
 # Special rule for the target edit_cache
 edit_cache:
 	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "No interactive CMake dialog available..."
-	/app/extra/clion/bin/cmake/linux/bin/cmake -E echo No\ interactive\ CMake\ dialog\ available.
+	/snap/clion/137/bin/cmake/linux/bin/cmake -E echo No\ interactive\ CMake\ dialog\ available.
 .PHONY : edit_cache
 
 # Special rule for the target edit_cache
@@ -100,9 +100,9 @@
 
 # The main all target
 all: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles/progress.marks
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles/progress.marks
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : all
 
 # The main clean target
Index: Test/lib/googletest/include/gtest/gtest.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright 2005, Google Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n//\r\n// The Google C++ Testing and Mocking Framework (Google Test)\r\n//\r\n// This header file defines the public API for Google Test.  It should be\r\n// included by any test program that uses Google Test.\r\n//\r\n// IMPORTANT NOTE: Due to limitation of the C++ language, we have to\r\n// leave some internal implementation details in this header file.\r\n// They are clearly marked by comments like this:\r\n//\r\n//   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\n//\r\n// Such code is NOT meant to be used by a user directly, and is subject\r\n// to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user\r\n// program!\r\n//\r\n// Acknowledgment: Google Test borrowed the idea of automatic test\r\n// registration from Barthelemy Dagenais' (barthelemy@prologique.com)\r\n// easyUnit framework.\r\n\r\n// GOOGLETEST_CM0001 DO NOT DELETE\r\n\r\n#ifndef GTEST_INCLUDE_GTEST_GTEST_H_\r\n#define GTEST_INCLUDE_GTEST_GTEST_H_\r\n\r\n#include <cstddef>\r\n#include <limits>\r\n#include <memory>\r\n#include <ostream>\r\n#include <type_traits>\r\n#include <vector>\r\n\r\n#include \"gtest/internal/gtest-internal.h\"\r\n#include \"gtest/internal/gtest-string.h\"\r\n#include \"gtest/gtest-death-test.h\"\r\n#include \"gtest/gtest-matchers.h\"\r\n#include \"gtest/gtest-message.h\"\r\n#include \"gtest/gtest-param-test.h\"\r\n#include \"gtest/gtest-printers.h\"\r\n#include \"gtest/gtest_prod.h\"\r\n#include \"gtest/gtest-test-part.h\"\r\n#include \"gtest/gtest-typed-test.h\"\r\n\r\nGTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\r\n/* class A needs to have dll-interface to be used by clients of class B */)\r\n\r\nnamespace testing {\r\n\r\n// Silence C4100 (unreferenced formal parameter) and 4805\r\n// unsafe mix of type 'const int' and type 'const bool'\r\n#ifdef _MSC_VER\r\n# pragma warning(push)\r\n# pragma warning(disable:4805)\r\n# pragma warning(disable:4100)\r\n#endif\r\n\r\n\r\n// Declares the flags.\r\n\r\n// This flag temporary enables the disabled tests.\r\nGTEST_DECLARE_bool_(also_run_disabled_tests);\r\n\r\n// This flag brings the debugger on an assertion failure.\r\nGTEST_DECLARE_bool_(break_on_failure);\r\n\r\n// This flag controls whether Google Test catches all test-thrown exceptions\r\n// and logs them as failures.\r\nGTEST_DECLARE_bool_(catch_exceptions);\r\n\r\n// This flag enables using colors in terminal output. Available values are\r\n// \"yes\" to enable colors, \"no\" (disable colors), or \"auto\" (the default)\r\n// to let Google Test decide.\r\nGTEST_DECLARE_string_(color);\r\n\r\n// This flag sets up the filter to select by name using a glob pattern\r\n// the tests to run. If the filter is not given all tests are executed.\r\nGTEST_DECLARE_string_(filter);\r\n\r\n// This flag controls whether Google Test installs a signal handler that dumps\r\n// debugging information when fatal signals are raised.\r\nGTEST_DECLARE_bool_(install_failure_signal_handler);\r\n\r\n// This flag causes the Google Test to list tests. None of the tests listed\r\n// are actually run if the flag is provided.\r\nGTEST_DECLARE_bool_(list_tests);\r\n\r\n// This flag controls whether Google Test emits a detailed XML report to a file\r\n// in addition to its normal textual output.\r\nGTEST_DECLARE_string_(output);\r\n\r\n// This flags control whether Google Test prints the elapsed time for each\r\n// test.\r\nGTEST_DECLARE_bool_(print_time);\r\n\r\n// This flags control whether Google Test prints UTF8 characters as text.\r\nGTEST_DECLARE_bool_(print_utf8);\r\n\r\n// This flag specifies the random number seed.\r\nGTEST_DECLARE_int32_(random_seed);\r\n\r\n// This flag sets how many times the tests are repeated. The default value\r\n// is 1. If the value is -1 the tests are repeating forever.\r\nGTEST_DECLARE_int32_(repeat);\r\n\r\n// This flag controls whether Google Test includes Google Test internal\r\n// stack frames in failure stack traces.\r\nGTEST_DECLARE_bool_(show_internal_stack_frames);\r\n\r\n// When this flag is specified, tests' order is randomized on every iteration.\r\nGTEST_DECLARE_bool_(shuffle);\r\n\r\n// This flag specifies the maximum number of stack frames to be\r\n// printed in a failure message.\r\nGTEST_DECLARE_int32_(stack_trace_depth);\r\n\r\n// When this flag is specified, a failed assertion will throw an\r\n// exception if exceptions are enabled, or exit the program with a\r\n// non-zero code otherwise. For use with an external test framework.\r\nGTEST_DECLARE_bool_(throw_on_failure);\r\n\r\n// When this flag is set with a \"host:port\" string, on supported\r\n// platforms test results are streamed to the specified port on\r\n// the specified host machine.\r\nGTEST_DECLARE_string_(stream_result_to);\r\n\r\n#if GTEST_USE_OWN_FLAGFILE_FLAG_\r\nGTEST_DECLARE_string_(flagfile);\r\n#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_\r\n\r\n// The upper limit for valid stack trace depths.\r\nconst int kMaxStackTraceDepth = 100;\r\n\r\nnamespace internal {\r\n\r\nclass AssertHelper;\r\nclass DefaultGlobalTestPartResultReporter;\r\nclass ExecDeathTest;\r\nclass NoExecDeathTest;\r\nclass FinalSuccessChecker;\r\nclass GTestFlagSaver;\r\nclass StreamingListenerTest;\r\nclass TestResultAccessor;\r\nclass TestEventListenersAccessor;\r\nclass TestEventRepeater;\r\nclass UnitTestRecordPropertyTestHelper;\r\nclass WindowsDeathTest;\r\nclass FuchsiaDeathTest;\r\nclass UnitTestImpl* GetUnitTestImpl();\r\nvoid ReportFailureInUnknownLocation(TestPartResult::Type result_type,\r\n                                    const std::string& message);\r\n\r\n}  // namespace internal\r\n\r\n// The friend relationship of some of these classes is cyclic.\r\n// If we don't forward declare them the compiler might confuse the classes\r\n// in friendship clauses with same named classes on the scope.\r\nclass Test;\r\nclass TestSuite;\r\n\r\n// Old API is still available but deprecated\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\nusing TestCase = TestSuite;\r\n#endif\r\nclass TestInfo;\r\nclass UnitTest;\r\n\r\n// A class for indicating whether an assertion was successful.  When\r\n// the assertion wasn't successful, the AssertionResult object\r\n// remembers a non-empty message that describes how it failed.\r\n//\r\n// To create an instance of this class, use one of the factory functions\r\n// (AssertionSuccess() and AssertionFailure()).\r\n//\r\n// This class is useful for two purposes:\r\n//   1. Defining predicate functions to be used with Boolean test assertions\r\n//      EXPECT_TRUE/EXPECT_FALSE and their ASSERT_ counterparts\r\n//   2. Defining predicate-format functions to be\r\n//      used with predicate assertions (ASSERT_PRED_FORMAT*, etc).\r\n//\r\n// For example, if you define IsEven predicate:\r\n//\r\n//   testing::AssertionResult IsEven(int n) {\r\n//     if ((n % 2) == 0)\r\n//       return testing::AssertionSuccess();\r\n//     else\r\n//       return testing::AssertionFailure() << n << \" is odd\";\r\n//   }\r\n//\r\n// Then the failed expectation EXPECT_TRUE(IsEven(Fib(5)))\r\n// will print the message\r\n//\r\n//   Value of: IsEven(Fib(5))\r\n//     Actual: false (5 is odd)\r\n//   Expected: true\r\n//\r\n// instead of a more opaque\r\n//\r\n//   Value of: IsEven(Fib(5))\r\n//     Actual: false\r\n//   Expected: true\r\n//\r\n// in case IsEven is a simple Boolean predicate.\r\n//\r\n// If you expect your predicate to be reused and want to support informative\r\n// messages in EXPECT_FALSE and ASSERT_FALSE (negative assertions show up\r\n// about half as often as positive ones in our tests), supply messages for\r\n// both success and failure cases:\r\n//\r\n//   testing::AssertionResult IsEven(int n) {\r\n//     if ((n % 2) == 0)\r\n//       return testing::AssertionSuccess() << n << \" is even\";\r\n//     else\r\n//       return testing::AssertionFailure() << n << \" is odd\";\r\n//   }\r\n//\r\n// Then a statement EXPECT_FALSE(IsEven(Fib(6))) will print\r\n//\r\n//   Value of: IsEven(Fib(6))\r\n//     Actual: true (8 is even)\r\n//   Expected: false\r\n//\r\n// NB: Predicates that support negative Boolean assertions have reduced\r\n// performance in positive ones so be careful not to use them in tests\r\n// that have lots (tens of thousands) of positive Boolean assertions.\r\n//\r\n// To use this class with EXPECT_PRED_FORMAT assertions such as:\r\n//\r\n//   // Verifies that Foo() returns an even number.\r\n//   EXPECT_PRED_FORMAT1(IsEven, Foo());\r\n//\r\n// you need to define:\r\n//\r\n//   testing::AssertionResult IsEven(const char* expr, int n) {\r\n//     if ((n % 2) == 0)\r\n//       return testing::AssertionSuccess();\r\n//     else\r\n//       return testing::AssertionFailure()\r\n//         << \"Expected: \" << expr << \" is even\\n  Actual: it's \" << n;\r\n//   }\r\n//\r\n// If Foo() returns 5, you will see the following message:\r\n//\r\n//   Expected: Foo() is even\r\n//     Actual: it's 5\r\n//\r\nclass GTEST_API_ AssertionResult {\r\n public:\r\n  // Copy constructor.\r\n  // Used in EXPECT_TRUE/FALSE(assertion_result).\r\n  AssertionResult(const AssertionResult& other);\r\n\r\n#if defined(_MSC_VER) && _MSC_VER < 1910\r\n  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 /* forcing value to bool */)\r\n#endif\r\n\r\n  // Used in the EXPECT_TRUE/FALSE(bool_expression).\r\n  //\r\n  // T must be contextually convertible to bool.\r\n  //\r\n  // The second parameter prevents this overload from being considered if\r\n  // the argument is implicitly convertible to AssertionResult. In that case\r\n  // we want AssertionResult's copy constructor to be used.\r\n  template <typename T>\r\n  explicit AssertionResult(\r\n      const T& success,\r\n      typename std::enable_if<\r\n          !std::is_convertible<T, AssertionResult>::value>::type*\r\n      /*enabler*/\r\n      = nullptr)\r\n      : success_(success) {}\r\n\r\n#if defined(_MSC_VER) && _MSC_VER < 1910\r\n  GTEST_DISABLE_MSC_WARNINGS_POP_()\r\n#endif\r\n\r\n  // Assignment operator.\r\n  AssertionResult& operator=(AssertionResult other) {\r\n    swap(other);\r\n    return *this;\r\n  }\r\n\r\n  // Returns true if and only if the assertion succeeded.\r\n  operator bool() const { return success_; }  // NOLINT\r\n\r\n  // Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.\r\n  AssertionResult operator!() const;\r\n\r\n  // Returns the text streamed into this AssertionResult. Test assertions\r\n  // use it when they fail (i.e., the predicate's outcome doesn't match the\r\n  // assertion's expectation). When nothing has been streamed into the\r\n  // object, returns an empty string.\r\n  const char* message() const {\r\n    return message_.get() != nullptr ? message_->c_str() : \"\";\r\n  }\r\n  // Deprecated; please use message() instead.\r\n  const char* failure_message() const { return message(); }\r\n\r\n  // Streams a custom failure message into this object.\r\n  template <typename T> AssertionResult& operator<<(const T& value) {\r\n    AppendMessage(Message() << value);\r\n    return *this;\r\n  }\r\n\r\n  // Allows streaming basic output manipulators such as endl or flush into\r\n  // this object.\r\n  AssertionResult& operator<<(\r\n      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {\r\n    AppendMessage(Message() << basic_manipulator);\r\n    return *this;\r\n  }\r\n\r\n private:\r\n  // Appends the contents of message to message_.\r\n  void AppendMessage(const Message& a_message) {\r\n    if (message_.get() == nullptr) message_.reset(new ::std::string);\r\n    message_->append(a_message.GetString().c_str());\r\n  }\r\n\r\n  // Swap the contents of this AssertionResult with other.\r\n  void swap(AssertionResult& other);\r\n\r\n  // Stores result of the assertion predicate.\r\n  bool success_;\r\n  // Stores the message describing the condition in case the expectation\r\n  // construct is not satisfied with the predicate's outcome.\r\n  // Referenced via a pointer to avoid taking too much stack frame space\r\n  // with test assertions.\r\n  std::unique_ptr< ::std::string> message_;\r\n};\r\n\r\n// Makes a successful assertion result.\r\nGTEST_API_ AssertionResult AssertionSuccess();\r\n\r\n// Makes a failed assertion result.\r\nGTEST_API_ AssertionResult AssertionFailure();\r\n\r\n// Makes a failed assertion result with the given failure message.\r\n// Deprecated; use AssertionFailure() << msg.\r\nGTEST_API_ AssertionResult AssertionFailure(const Message& msg);\r\n\r\n}  // namespace testing\r\n\r\n// Includes the auto-generated header that implements a family of generic\r\n// predicate assertion macros. This include comes late because it relies on\r\n// APIs declared above.\r\n#include \"gtest/gtest_pred_impl.h\"\r\n\r\nnamespace testing {\r\n\r\n// The abstract class that all tests inherit from.\r\n//\r\n// In Google Test, a unit test program contains one or many TestSuites, and\r\n// each TestSuite contains one or many Tests.\r\n//\r\n// When you define a test using the TEST macro, you don't need to\r\n// explicitly derive from Test - the TEST macro automatically does\r\n// this for you.\r\n//\r\n// The only time you derive from Test is when defining a test fixture\r\n// to be used in a TEST_F.  For example:\r\n//\r\n//   class FooTest : public testing::Test {\r\n//    protected:\r\n//     void SetUp() override { ... }\r\n//     void TearDown() override { ... }\r\n//     ...\r\n//   };\r\n//\r\n//   TEST_F(FooTest, Bar) { ... }\r\n//   TEST_F(FooTest, Baz) { ... }\r\n//\r\n// Test is not copyable.\r\nclass GTEST_API_ Test {\r\n public:\r\n  friend class TestInfo;\r\n\r\n  // The d'tor is virtual as we intend to inherit from Test.\r\n  virtual ~Test();\r\n\r\n  // Sets up the stuff shared by all tests in this test case.\r\n  //\r\n  // Google Test will call Foo::SetUpTestSuite() before running the first\r\n  // test in test case Foo.  Hence a sub-class can define its own\r\n  // SetUpTestSuite() method to shadow the one defined in the super\r\n  // class.\r\n  // Failures that happen during SetUpTestSuite are logged but otherwise\r\n  // ignored.\r\n  static void SetUpTestSuite() {}\r\n\r\n  // Tears down the stuff shared by all tests in this test suite.\r\n  //\r\n  // Google Test will call Foo::TearDownTestSuite() after running the last\r\n  // test in test case Foo.  Hence a sub-class can define its own\r\n  // TearDownTestSuite() method to shadow the one defined in the super\r\n  // class.\r\n  // Failures that happen during TearDownTestSuite are logged but otherwise\r\n  // ignored.\r\n  static void TearDownTestSuite() {}\r\n\r\n  // Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  static void TearDownTestCase() {}\r\n  static void SetUpTestCase() {}\r\n#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Returns true if and only if the current test has a fatal failure.\r\n  static bool HasFatalFailure();\r\n\r\n  // Returns true if and only if the current test has a non-fatal failure.\r\n  static bool HasNonfatalFailure();\r\n\r\n  // Returns true if and only if the current test was skipped.\r\n  static bool IsSkipped();\r\n\r\n  // Returns true if and only if the current test has a (either fatal or\r\n  // non-fatal) failure.\r\n  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }\r\n\r\n  // Logs a property for the current test, test suite, or for the entire\r\n  // invocation of the test program when used outside of the context of a\r\n  // test suite.  Only the last value for a given key is remembered.  These\r\n  // are public static so they can be called from utility functions that are\r\n  // not members of the test fixture.  Calls to RecordProperty made during\r\n  // lifespan of the test (from the moment its constructor starts to the\r\n  // moment its destructor finishes) will be output in XML as attributes of\r\n  // the <testcase> element.  Properties recorded from fixture's\r\n  // SetUpTestSuite or TearDownTestSuite are logged as attributes of the\r\n  // corresponding <testsuite> element.  Calls to RecordProperty made in the\r\n  // global context (before or after invocation of RUN_ALL_TESTS and from\r\n  // SetUp/TearDown method of Environment objects registered with Google\r\n  // Test) will be output as attributes of the <testsuites> element.\r\n  static void RecordProperty(const std::string& key, const std::string& value);\r\n  static void RecordProperty(const std::string& key, int value);\r\n\r\n protected:\r\n  // Creates a Test object.\r\n  Test();\r\n\r\n  // Sets up the test fixture.\r\n  virtual void SetUp();\r\n\r\n  // Tears down the test fixture.\r\n  virtual void TearDown();\r\n\r\n private:\r\n  // Returns true if and only if the current test has the same fixture class\r\n  // as the first test in the current test suite.\r\n  static bool HasSameFixtureClass();\r\n\r\n  // Runs the test after the test fixture has been set up.\r\n  //\r\n  // A sub-class must implement this to define the test logic.\r\n  //\r\n  // DO NOT OVERRIDE THIS FUNCTION DIRECTLY IN A USER PROGRAM.\r\n  // Instead, use the TEST or TEST_F macro.\r\n  virtual void TestBody() = 0;\r\n\r\n  // Sets up, executes, and tears down the test.\r\n  void Run();\r\n\r\n  // Deletes self.  We deliberately pick an unusual name for this\r\n  // internal method to avoid clashing with names used in user TESTs.\r\n  void DeleteSelf_() { delete this; }\r\n\r\n  const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;\r\n\r\n  // Often a user misspells SetUp() as Setup() and spends a long time\r\n  // wondering why it is never called by Google Test.  The declaration of\r\n  // the following method is solely for catching such an error at\r\n  // compile time:\r\n  //\r\n  //   - The return type is deliberately chosen to be not void, so it\r\n  //   will be a conflict if void Setup() is declared in the user's\r\n  //   test fixture.\r\n  //\r\n  //   - This method is private, so it will be another compiler error\r\n  //   if the method is called from the user's test fixture.\r\n  //\r\n  // DO NOT OVERRIDE THIS FUNCTION.\r\n  //\r\n  // If you see an error about overriding the following function or\r\n  // about it being private, you have mis-spelled SetUp() as Setup().\r\n  struct Setup_should_be_spelled_SetUp {};\r\n  virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }\r\n\r\n  // We disallow copying Tests.\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(Test);\r\n};\r\n\r\ntypedef internal::TimeInMillis TimeInMillis;\r\n\r\n// A copyable object representing a user specified test property which can be\r\n// output as a key/value string pair.\r\n//\r\n// Don't inherit from TestProperty as its destructor is not virtual.\r\nclass TestProperty {\r\n public:\r\n  // C'tor.  TestProperty does NOT have a default constructor.\r\n  // Always use this constructor (with parameters) to create a\r\n  // TestProperty object.\r\n  TestProperty(const std::string& a_key, const std::string& a_value) :\r\n    key_(a_key), value_(a_value) {\r\n  }\r\n\r\n  // Gets the user supplied key.\r\n  const char* key() const {\r\n    return key_.c_str();\r\n  }\r\n\r\n  // Gets the user supplied value.\r\n  const char* value() const {\r\n    return value_.c_str();\r\n  }\r\n\r\n  // Sets a new value, overriding the one supplied in the constructor.\r\n  void SetValue(const std::string& new_value) {\r\n    value_ = new_value;\r\n  }\r\n\r\n private:\r\n  // The key supplied by the user.\r\n  std::string key_;\r\n  // The value supplied by the user.\r\n  std::string value_;\r\n};\r\n\r\n// The result of a single Test.  This includes a list of\r\n// TestPartResults, a list of TestProperties, a count of how many\r\n// death tests there are in the Test, and how much time it took to run\r\n// the Test.\r\n//\r\n// TestResult is not copyable.\r\nclass GTEST_API_ TestResult {\r\n public:\r\n  // Creates an empty TestResult.\r\n  TestResult();\r\n\r\n  // D'tor.  Do not inherit from TestResult.\r\n  ~TestResult();\r\n\r\n  // Gets the number of all test parts.  This is the sum of the number\r\n  // of successful test parts and the number of failed test parts.\r\n  int total_part_count() const;\r\n\r\n  // Returns the number of the test properties.\r\n  int test_property_count() const;\r\n\r\n  // Returns true if and only if the test passed (i.e. no test part failed).\r\n  bool Passed() const { return !Skipped() && !Failed(); }\r\n\r\n  // Returns true if and only if the test was skipped.\r\n  bool Skipped() const;\r\n\r\n  // Returns true if and only if the test failed.\r\n  bool Failed() const;\r\n\r\n  // Returns true if and only if the test fatally failed.\r\n  bool HasFatalFailure() const;\r\n\r\n  // Returns true if and only if the test has a non-fatal failure.\r\n  bool HasNonfatalFailure() const;\r\n\r\n  // Returns the elapsed time, in milliseconds.\r\n  TimeInMillis elapsed_time() const { return elapsed_time_; }\r\n\r\n  // Gets the time of the test case start, in ms from the start of the\r\n  // UNIX epoch.\r\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\r\n\r\n  // Returns the i-th test part result among all the results. i can range from 0\r\n  // to total_part_count() - 1. If i is not in that range, aborts the program.\r\n  const TestPartResult& GetTestPartResult(int i) const;\r\n\r\n  // Returns the i-th test property. i can range from 0 to\r\n  // test_property_count() - 1. If i is not in that range, aborts the\r\n  // program.\r\n  const TestProperty& GetTestProperty(int i) const;\r\n\r\n private:\r\n  friend class TestInfo;\r\n  friend class TestSuite;\r\n  friend class UnitTest;\r\n  friend class internal::DefaultGlobalTestPartResultReporter;\r\n  friend class internal::ExecDeathTest;\r\n  friend class internal::TestResultAccessor;\r\n  friend class internal::UnitTestImpl;\r\n  friend class internal::WindowsDeathTest;\r\n  friend class internal::FuchsiaDeathTest;\r\n\r\n  // Gets the vector of TestPartResults.\r\n  const std::vector<TestPartResult>& test_part_results() const {\r\n    return test_part_results_;\r\n  }\r\n\r\n  // Gets the vector of TestProperties.\r\n  const std::vector<TestProperty>& test_properties() const {\r\n    return test_properties_;\r\n  }\r\n\r\n  // Sets the start time.\r\n  void set_start_timestamp(TimeInMillis start) { start_timestamp_ = start; }\r\n\r\n  // Sets the elapsed time.\r\n  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }\r\n\r\n  // Adds a test property to the list. The property is validated and may add\r\n  // a non-fatal failure if invalid (e.g., if it conflicts with reserved\r\n  // key names). If a property is already recorded for the same key, the\r\n  // value will be updated, rather than storing multiple values for the same\r\n  // key.  xml_element specifies the element for which the property is being\r\n  // recorded and is used for validation.\r\n  void RecordProperty(const std::string& xml_element,\r\n                      const TestProperty& test_property);\r\n\r\n  // Adds a failure if the key is a reserved attribute of Google Test\r\n  // testsuite tags.  Returns true if the property is valid.\r\n  // FIXME: Validate attribute names are legal and human readable.\r\n  static bool ValidateTestProperty(const std::string& xml_element,\r\n                                   const TestProperty& test_property);\r\n\r\n  // Adds a test part result to the list.\r\n  void AddTestPartResult(const TestPartResult& test_part_result);\r\n\r\n  // Returns the death test count.\r\n  int death_test_count() const { return death_test_count_; }\r\n\r\n  // Increments the death test count, returning the new count.\r\n  int increment_death_test_count() { return ++death_test_count_; }\r\n\r\n  // Clears the test part results.\r\n  void ClearTestPartResults();\r\n\r\n  // Clears the object.\r\n  void Clear();\r\n\r\n  // Protects mutable state of the property vector and of owned\r\n  // properties, whose values may be updated.\r\n  internal::Mutex test_properites_mutex_;\r\n\r\n  // The vector of TestPartResults\r\n  std::vector<TestPartResult> test_part_results_;\r\n  // The vector of TestProperties\r\n  std::vector<TestProperty> test_properties_;\r\n  // Running count of death tests.\r\n  int death_test_count_;\r\n  // The start time, in milliseconds since UNIX Epoch.\r\n  TimeInMillis start_timestamp_;\r\n  // The elapsed time, in milliseconds.\r\n  TimeInMillis elapsed_time_;\r\n\r\n  // We disallow copying TestResult.\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestResult);\r\n};  // class TestResult\r\n\r\n// A TestInfo object stores the following information about a test:\r\n//\r\n//   Test suite name\r\n//   Test name\r\n//   Whether the test should be run\r\n//   A function pointer that creates the test object when invoked\r\n//   Test result\r\n//\r\n// The constructor of TestInfo registers itself with the UnitTest\r\n// singleton such that the RUN_ALL_TESTS() macro knows which tests to\r\n// run.\r\nclass GTEST_API_ TestInfo {\r\n public:\r\n  // Destructs a TestInfo object.  This function is not virtual, so\r\n  // don't inherit from TestInfo.\r\n  ~TestInfo();\r\n\r\n  // Returns the test suite name.\r\n  const char* test_suite_name() const { return test_suite_name_.c_str(); }\r\n\r\n// Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  const char* test_case_name() const { return test_suite_name(); }\r\n#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Returns the test name.\r\n  const char* name() const { return name_.c_str(); }\r\n\r\n  // Returns the name of the parameter type, or NULL if this is not a typed\r\n  // or a type-parameterized test.\r\n  const char* type_param() const {\r\n    if (type_param_.get() != nullptr) return type_param_->c_str();\r\n    return nullptr;\r\n  }\r\n\r\n  // Returns the text representation of the value parameter, or NULL if this\r\n  // is not a value-parameterized test.\r\n  const char* value_param() const {\r\n    if (value_param_.get() != nullptr) return value_param_->c_str();\r\n    return nullptr;\r\n  }\r\n\r\n  // Returns the file name where this test is defined.\r\n  const char* file() const { return location_.file.c_str(); }\r\n\r\n  // Returns the line where this test is defined.\r\n  int line() const { return location_.line; }\r\n\r\n  // Return true if this test should not be run because it's in another shard.\r\n  bool is_in_another_shard() const { return is_in_another_shard_; }\r\n\r\n  // Returns true if this test should run, that is if the test is not\r\n  // disabled (or it is disabled but the also_run_disabled_tests flag has\r\n  // been specified) and its full name matches the user-specified filter.\r\n  //\r\n  // Google Test allows the user to filter the tests by their full names.\r\n  // The full name of a test Bar in test suite Foo is defined as\r\n  // \"Foo.Bar\".  Only the tests that match the filter will run.\r\n  //\r\n  // A filter is a colon-separated list of glob (not regex) patterns,\r\n  // optionally followed by a '-' and a colon-separated list of\r\n  // negative patterns (tests to exclude).  A test is run if it\r\n  // matches one of the positive patterns and does not match any of\r\n  // the negative patterns.\r\n  //\r\n  // For example, *A*:Foo.* is a filter that matches any string that\r\n  // contains the character 'A' or starts with \"Foo.\".\r\n  bool should_run() const { return should_run_; }\r\n\r\n  // Returns true if and only if this test will appear in the XML report.\r\n  bool is_reportable() const {\r\n    // The XML report includes tests matching the filter, excluding those\r\n    // run in other shards.\r\n    return matches_filter_ && !is_in_another_shard_;\r\n  }\r\n\r\n  // Returns the result of the test.\r\n  const TestResult* result() const { return &result_; }\r\n\r\n private:\r\n#if GTEST_HAS_DEATH_TEST\r\n  friend class internal::DefaultDeathTestFactory;\r\n#endif  // GTEST_HAS_DEATH_TEST\r\n  friend class Test;\r\n  friend class TestSuite;\r\n  friend class internal::UnitTestImpl;\r\n  friend class internal::StreamingListenerTest;\r\n  friend TestInfo* internal::MakeAndRegisterTestInfo(\r\n      const char* test_suite_name, const char* name, const char* type_param,\r\n      const char* value_param, internal::CodeLocation code_location,\r\n      internal::TypeId fixture_class_id, internal::SetUpTestSuiteFunc set_up_tc,\r\n      internal::TearDownTestSuiteFunc tear_down_tc,\r\n      internal::TestFactoryBase* factory);\r\n\r\n  // Constructs a TestInfo object. The newly constructed instance assumes\r\n  // ownership of the factory object.\r\n  TestInfo(const std::string& test_suite_name, const std::string& name,\r\n           const char* a_type_param,   // NULL if not a type-parameterized test\r\n           const char* a_value_param,  // NULL if not a value-parameterized test\r\n           internal::CodeLocation a_code_location,\r\n           internal::TypeId fixture_class_id,\r\n           internal::TestFactoryBase* factory);\r\n\r\n  // Increments the number of death tests encountered in this test so\r\n  // far.\r\n  int increment_death_test_count() {\r\n    return result_.increment_death_test_count();\r\n  }\r\n\r\n  // Creates the test object, runs it, records its result, and then\r\n  // deletes it.\r\n  void Run();\r\n\r\n  static void ClearTestResult(TestInfo* test_info) {\r\n    test_info->result_.Clear();\r\n  }\r\n\r\n  // These fields are immutable properties of the test.\r\n  const std::string test_suite_name_;    // test suite name\r\n  const std::string name_;               // Test name\r\n  // Name of the parameter type, or NULL if this is not a typed or a\r\n  // type-parameterized test.\r\n  const std::unique_ptr<const ::std::string> type_param_;\r\n  // Text representation of the value parameter, or NULL if this is not a\r\n  // value-parameterized test.\r\n  const std::unique_ptr<const ::std::string> value_param_;\r\n  internal::CodeLocation location_;\r\n  const internal::TypeId fixture_class_id_;  // ID of the test fixture class\r\n  bool should_run_;           // True if and only if this test should run\r\n  bool is_disabled_;          // True if and only if this test is disabled\r\n  bool matches_filter_;       // True if this test matches the\r\n                              // user-specified filter.\r\n  bool is_in_another_shard_;  // Will be run in another shard.\r\n  internal::TestFactoryBase* const factory_;  // The factory that creates\r\n                                              // the test object\r\n\r\n  // This field is mutable and needs to be reset before running the\r\n  // test for the second time.\r\n  TestResult result_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestInfo);\r\n};\r\n\r\n// A test suite, which consists of a vector of TestInfos.\r\n//\r\n// TestSuite is not copyable.\r\nclass GTEST_API_ TestSuite {\r\n public:\r\n  // Creates a TestSuite with the given name.\r\n  //\r\n  // TestSuite does NOT have a default constructor.  Always use this\r\n  // constructor to create a TestSuite object.\r\n  //\r\n  // Arguments:\r\n  //\r\n  //   name:         name of the test suite\r\n  //   a_type_param: the name of the test's type parameter, or NULL if\r\n  //                 this is not a type-parameterized test.\r\n  //   set_up_tc:    pointer to the function that sets up the test suite\r\n  //   tear_down_tc: pointer to the function that tears down the test suite\r\n  TestSuite(const char* name, const char* a_type_param,\r\n            internal::SetUpTestSuiteFunc set_up_tc,\r\n            internal::TearDownTestSuiteFunc tear_down_tc);\r\n\r\n  // Destructor of TestSuite.\r\n  virtual ~TestSuite();\r\n\r\n  // Gets the name of the TestSuite.\r\n  const char* name() const { return name_.c_str(); }\r\n\r\n  // Returns the name of the parameter type, or NULL if this is not a\r\n  // type-parameterized test suite.\r\n  const char* type_param() const {\r\n    if (type_param_.get() != nullptr) return type_param_->c_str();\r\n    return nullptr;\r\n  }\r\n\r\n  // Returns true if any test in this test suite should run.\r\n  bool should_run() const { return should_run_; }\r\n\r\n  // Gets the number of successful tests in this test suite.\r\n  int successful_test_count() const;\r\n\r\n  // Gets the number of skipped tests in this test suite.\r\n  int skipped_test_count() const;\r\n\r\n  // Gets the number of failed tests in this test suite.\r\n  int failed_test_count() const;\r\n\r\n  // Gets the number of disabled tests that will be reported in the XML report.\r\n  int reportable_disabled_test_count() const;\r\n\r\n  // Gets the number of disabled tests in this test suite.\r\n  int disabled_test_count() const;\r\n\r\n  // Gets the number of tests to be printed in the XML report.\r\n  int reportable_test_count() const;\r\n\r\n  // Get the number of tests in this test suite that should run.\r\n  int test_to_run_count() const;\r\n\r\n  // Gets the number of all tests in this test suite.\r\n  int total_test_count() const;\r\n\r\n  // Returns true if and only if the test suite passed.\r\n  bool Passed() const { return !Failed(); }\r\n\r\n  // Returns true if and only if the test suite failed.\r\n  bool Failed() const { return failed_test_count() > 0; }\r\n\r\n  // Returns the elapsed time, in milliseconds.\r\n  TimeInMillis elapsed_time() const { return elapsed_time_; }\r\n\r\n  // Gets the time of the test suite start, in ms from the start of the\r\n  // UNIX epoch.\r\n  TimeInMillis start_timestamp() const { return start_timestamp_; }\r\n\r\n  // Returns the i-th test among all the tests. i can range from 0 to\r\n  // total_test_count() - 1. If i is not in that range, returns NULL.\r\n  const TestInfo* GetTestInfo(int i) const;\r\n\r\n  // Returns the TestResult that holds test properties recorded during\r\n  // execution of SetUpTestSuite and TearDownTestSuite.\r\n  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }\r\n\r\n private:\r\n  friend class Test;\r\n  friend class internal::UnitTestImpl;\r\n\r\n  // Gets the (mutable) vector of TestInfos in this TestSuite.\r\n  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }\r\n\r\n  // Gets the (immutable) vector of TestInfos in this TestSuite.\r\n  const std::vector<TestInfo*>& test_info_list() const {\r\n    return test_info_list_;\r\n  }\r\n\r\n  // Returns the i-th test among all the tests. i can range from 0 to\r\n  // total_test_count() - 1. If i is not in that range, returns NULL.\r\n  TestInfo* GetMutableTestInfo(int i);\r\n\r\n  // Sets the should_run member.\r\n  void set_should_run(bool should) { should_run_ = should; }\r\n\r\n  // Adds a TestInfo to this test suite.  Will delete the TestInfo upon\r\n  // destruction of the TestSuite object.\r\n  void AddTestInfo(TestInfo * test_info);\r\n\r\n  // Clears the results of all tests in this test suite.\r\n  void ClearResult();\r\n\r\n  // Clears the results of all tests in the given test suite.\r\n  static void ClearTestSuiteResult(TestSuite* test_suite) {\r\n    test_suite->ClearResult();\r\n  }\r\n\r\n  // Runs every test in this TestSuite.\r\n  void Run();\r\n\r\n  // Runs SetUpTestSuite() for this TestSuite.  This wrapper is needed\r\n  // for catching exceptions thrown from SetUpTestSuite().\r\n  void RunSetUpTestSuite() {\r\n    if (set_up_tc_ != nullptr) {\r\n      (*set_up_tc_)();\r\n    }\r\n  }\r\n\r\n  // Runs TearDownTestSuite() for this TestSuite.  This wrapper is\r\n  // needed for catching exceptions thrown from TearDownTestSuite().\r\n  void RunTearDownTestSuite() {\r\n    if (tear_down_tc_ != nullptr) {\r\n      (*tear_down_tc_)();\r\n    }\r\n  }\r\n\r\n  // Returns true if and only if test passed.\r\n  static bool TestPassed(const TestInfo* test_info) {\r\n    return test_info->should_run() && test_info->result()->Passed();\r\n  }\r\n\r\n  // Returns true if and only if test skipped.\r\n  static bool TestSkipped(const TestInfo* test_info) {\r\n    return test_info->should_run() && test_info->result()->Skipped();\r\n  }\r\n\r\n  // Returns true if and only if test failed.\r\n  static bool TestFailed(const TestInfo* test_info) {\r\n    return test_info->should_run() && test_info->result()->Failed();\r\n  }\r\n\r\n  // Returns true if and only if the test is disabled and will be reported in\r\n  // the XML report.\r\n  static bool TestReportableDisabled(const TestInfo* test_info) {\r\n    return test_info->is_reportable() && test_info->is_disabled_;\r\n  }\r\n\r\n  // Returns true if and only if test is disabled.\r\n  static bool TestDisabled(const TestInfo* test_info) {\r\n    return test_info->is_disabled_;\r\n  }\r\n\r\n  // Returns true if and only if this test will appear in the XML report.\r\n  static bool TestReportable(const TestInfo* test_info) {\r\n    return test_info->is_reportable();\r\n  }\r\n\r\n  // Returns true if the given test should run.\r\n  static bool ShouldRunTest(const TestInfo* test_info) {\r\n    return test_info->should_run();\r\n  }\r\n\r\n  // Shuffles the tests in this test suite.\r\n  void ShuffleTests(internal::Random* random);\r\n\r\n  // Restores the test order to before the first shuffle.\r\n  void UnshuffleTests();\r\n\r\n  // Name of the test suite.\r\n  std::string name_;\r\n  // Name of the parameter type, or NULL if this is not a typed or a\r\n  // type-parameterized test.\r\n  const std::unique_ptr<const ::std::string> type_param_;\r\n  // The vector of TestInfos in their original order.  It owns the\r\n  // elements in the vector.\r\n  std::vector<TestInfo*> test_info_list_;\r\n  // Provides a level of indirection for the test list to allow easy\r\n  // shuffling and restoring the test order.  The i-th element in this\r\n  // vector is the index of the i-th test in the shuffled test list.\r\n  std::vector<int> test_indices_;\r\n  // Pointer to the function that sets up the test suite.\r\n  internal::SetUpTestSuiteFunc set_up_tc_;\r\n  // Pointer to the function that tears down the test suite.\r\n  internal::TearDownTestSuiteFunc tear_down_tc_;\r\n  // True if and only if any test in this test suite should run.\r\n  bool should_run_;\r\n  // The start time, in milliseconds since UNIX Epoch.\r\n  TimeInMillis start_timestamp_;\r\n  // Elapsed time, in milliseconds.\r\n  TimeInMillis elapsed_time_;\r\n  // Holds test properties recorded during execution of SetUpTestSuite and\r\n  // TearDownTestSuite.\r\n  TestResult ad_hoc_test_result_;\r\n\r\n  // We disallow copying TestSuites.\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestSuite);\r\n};\r\n\r\n// An Environment object is capable of setting up and tearing down an\r\n// environment.  You should subclass this to define your own\r\n// environment(s).\r\n//\r\n// An Environment object does the set-up and tear-down in virtual\r\n// methods SetUp() and TearDown() instead of the constructor and the\r\n// destructor, as:\r\n//\r\n//   1. You cannot safely throw from a destructor.  This is a problem\r\n//      as in some cases Google Test is used where exceptions are enabled, and\r\n//      we may want to implement ASSERT_* using exceptions where they are\r\n//      available.\r\n//   2. You cannot use ASSERT_* directly in a constructor or\r\n//      destructor.\r\nclass Environment {\r\n public:\r\n  // The d'tor is virtual as we need to subclass Environment.\r\n  virtual ~Environment() {}\r\n\r\n  // Override this to define how to set up the environment.\r\n  virtual void SetUp() {}\r\n\r\n  // Override this to define how to tear down the environment.\r\n  virtual void TearDown() {}\r\n private:\r\n  // If you see an error about overriding the following function or\r\n  // about it being private, you have mis-spelled SetUp() as Setup().\r\n  struct Setup_should_be_spelled_SetUp {};\r\n  virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }\r\n};\r\n\r\n#if GTEST_HAS_EXCEPTIONS\r\n\r\n// Error which can be thrown from TestEventListener::OnTestPartResult.\r\nclass GTEST_API_ AssertionException\r\n    : public internal::GoogleTestFailureException {\r\n public:\r\n  explicit AssertionException(const TestPartResult& result)\r\n      : GoogleTestFailureException(result) {}\r\n};\r\n\r\n#endif  // GTEST_HAS_EXCEPTIONS\r\n\r\n// The interface for tracing execution of tests. The methods are organized in\r\n// the order the corresponding events are fired.\r\nclass TestEventListener {\r\n public:\r\n  virtual ~TestEventListener() {}\r\n\r\n  // Fired before any test activity starts.\r\n  virtual void OnTestProgramStart(const UnitTest& unit_test) = 0;\r\n\r\n  // Fired before each iteration of tests starts.  There may be more than\r\n  // one iteration if GTEST_FLAG(repeat) is set. iteration is the iteration\r\n  // index, starting from 0.\r\n  virtual void OnTestIterationStart(const UnitTest& unit_test,\r\n                                    int iteration) = 0;\r\n\r\n  // Fired before environment set-up for each iteration of tests starts.\r\n  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test) = 0;\r\n\r\n  // Fired after environment set-up for each iteration of tests ends.\r\n  virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) = 0;\r\n\r\n  // Fired before the test suite starts.\r\n  virtual void OnTestSuiteStart(const TestSuite& /*test_suite*/) {}\r\n\r\n  //  Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  virtual void OnTestCaseStart(const TestCase& /*test_case*/) {}\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Fired before the test starts.\r\n  virtual void OnTestStart(const TestInfo& test_info) = 0;\r\n\r\n  // Fired after a failed assertion or a SUCCEED() invocation.\r\n  // If you want to throw an exception from this function to skip to the next\r\n  // TEST, it must be AssertionException defined above, or inherited from it.\r\n  virtual void OnTestPartResult(const TestPartResult& test_part_result) = 0;\r\n\r\n  // Fired after the test ends.\r\n  virtual void OnTestEnd(const TestInfo& test_info) = 0;\r\n\r\n  // Fired after the test suite ends.\r\n  virtual void OnTestSuiteEnd(const TestSuite& /*test_suite*/) {}\r\n\r\n//  Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  virtual void OnTestCaseEnd(const TestCase& /*test_case*/) {}\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Fired before environment tear-down for each iteration of tests starts.\r\n  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test) = 0;\r\n\r\n  // Fired after environment tear-down for each iteration of tests ends.\r\n  virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) = 0;\r\n\r\n  // Fired after each iteration of tests finishes.\r\n  virtual void OnTestIterationEnd(const UnitTest& unit_test,\r\n                                  int iteration) = 0;\r\n\r\n  // Fired after all test activities have ended.\r\n  virtual void OnTestProgramEnd(const UnitTest& unit_test) = 0;\r\n};\r\n\r\n// The convenience class for users who need to override just one or two\r\n// methods and are not concerned that a possible change to a signature of\r\n// the methods they override will not be caught during the build.  For\r\n// comments about each method please see the definition of TestEventListener\r\n// above.\r\nclass EmptyTestEventListener : public TestEventListener {\r\n public:\r\n  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}\r\n  void OnTestIterationStart(const UnitTest& /*unit_test*/,\r\n                            int /*iteration*/) override {}\r\n  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}\r\n  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}\r\n  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}\r\n//  Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  void OnTestCaseStart(const TestCase& /*test_case*/) override {}\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  void OnTestStart(const TestInfo& /*test_info*/) override {}\r\n  void OnTestPartResult(const TestPartResult& /*test_part_result*/) override {}\r\n  void OnTestEnd(const TestInfo& /*test_info*/) override {}\r\n  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}\r\n  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}\r\n  void OnTestIterationEnd(const UnitTest& /*unit_test*/,\r\n                          int /*iteration*/) override {}\r\n  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}\r\n};\r\n\r\n// TestEventListeners lets users add listeners to track events in Google Test.\r\nclass GTEST_API_ TestEventListeners {\r\n public:\r\n  TestEventListeners();\r\n  ~TestEventListeners();\r\n\r\n  // Appends an event listener to the end of the list. Google Test assumes\r\n  // the ownership of the listener (i.e. it will delete the listener when\r\n  // the test program finishes).\r\n  void Append(TestEventListener* listener);\r\n\r\n  // Removes the given event listener from the list and returns it.  It then\r\n  // becomes the caller's responsibility to delete the listener. Returns\r\n  // NULL if the listener is not found in the list.\r\n  TestEventListener* Release(TestEventListener* listener);\r\n\r\n  // Returns the standard listener responsible for the default console\r\n  // output.  Can be removed from the listeners list to shut down default\r\n  // console output.  Note that removing this object from the listener list\r\n  // with Release transfers its ownership to the caller and makes this\r\n  // function return NULL the next time.\r\n  TestEventListener* default_result_printer() const {\r\n    return default_result_printer_;\r\n  }\r\n\r\n  // Returns the standard listener responsible for the default XML output\r\n  // controlled by the --gtest_output=xml flag.  Can be removed from the\r\n  // listeners list by users who want to shut down the default XML output\r\n  // controlled by this flag and substitute it with custom one.  Note that\r\n  // removing this object from the listener list with Release transfers its\r\n  // ownership to the caller and makes this function return NULL the next\r\n  // time.\r\n  TestEventListener* default_xml_generator() const {\r\n    return default_xml_generator_;\r\n  }\r\n\r\n private:\r\n  friend class TestSuite;\r\n  friend class TestInfo;\r\n  friend class internal::DefaultGlobalTestPartResultReporter;\r\n  friend class internal::NoExecDeathTest;\r\n  friend class internal::TestEventListenersAccessor;\r\n  friend class internal::UnitTestImpl;\r\n\r\n  // Returns repeater that broadcasts the TestEventListener events to all\r\n  // subscribers.\r\n  TestEventListener* repeater();\r\n\r\n  // Sets the default_result_printer attribute to the provided listener.\r\n  // The listener is also added to the listener list and previous\r\n  // default_result_printer is removed from it and deleted. The listener can\r\n  // also be NULL in which case it will not be added to the list. Does\r\n  // nothing if the previous and the current listener objects are the same.\r\n  void SetDefaultResultPrinter(TestEventListener* listener);\r\n\r\n  // Sets the default_xml_generator attribute to the provided listener.  The\r\n  // listener is also added to the listener list and previous\r\n  // default_xml_generator is removed from it and deleted. The listener can\r\n  // also be NULL in which case it will not be added to the list. Does\r\n  // nothing if the previous and the current listener objects are the same.\r\n  void SetDefaultXmlGenerator(TestEventListener* listener);\r\n\r\n  // Controls whether events will be forwarded by the repeater to the\r\n  // listeners in the list.\r\n  bool EventForwardingEnabled() const;\r\n  void SuppressEventForwarding();\r\n\r\n  // The actual list of listeners.\r\n  internal::TestEventRepeater* repeater_;\r\n  // Listener responsible for the standard result output.\r\n  TestEventListener* default_result_printer_;\r\n  // Listener responsible for the creation of the XML output file.\r\n  TestEventListener* default_xml_generator_;\r\n\r\n  // We disallow copying TestEventListeners.\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventListeners);\r\n};\r\n\r\n// A UnitTest consists of a vector of TestSuites.\r\n//\r\n// This is a singleton class.  The only instance of UnitTest is\r\n// created when UnitTest::GetInstance() is first called.  This\r\n// instance is never deleted.\r\n//\r\n// UnitTest is not copyable.\r\n//\r\n// This class is thread-safe as long as the methods are called\r\n// according to their specification.\r\nclass GTEST_API_ UnitTest {\r\n public:\r\n  // Gets the singleton UnitTest object.  The first time this method\r\n  // is called, a UnitTest object is constructed and returned.\r\n  // Consecutive calls will return the same object.\r\n  static UnitTest* GetInstance();\r\n\r\n  // Runs all tests in this UnitTest object and prints the result.\r\n  // Returns 0 if successful, or 1 otherwise.\r\n  //\r\n  // This method can only be called from the main thread.\r\n  //\r\n  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\n  int Run() GTEST_MUST_USE_RESULT_;\r\n\r\n  // Returns the working directory when the first TEST() or TEST_F()\r\n  // was executed.  The UnitTest object owns the string.\r\n  const char* original_working_dir() const;\r\n\r\n  // Returns the TestSuite object for the test that's currently running,\r\n  // or NULL if no test is running.\r\n  const TestSuite* current_test_suite() const GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n// Legacy API is still available but deprecated\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  const TestCase* current_test_case() const GTEST_LOCK_EXCLUDED_(mutex_);\r\n#endif\r\n\r\n  // Returns the TestInfo object for the test that's currently running,\r\n  // or NULL if no test is running.\r\n  const TestInfo* current_test_info() const\r\n      GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n  // Returns the random seed used at the start of the current test run.\r\n  int random_seed() const;\r\n\r\n  // Returns the ParameterizedTestSuiteRegistry object used to keep track of\r\n  // value-parameterized tests and instantiate and register them.\r\n  //\r\n  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\n  internal::ParameterizedTestSuiteRegistry& parameterized_test_registry()\r\n      GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n  // Gets the number of successful test suites.\r\n  int successful_test_suite_count() const;\r\n\r\n  // Gets the number of failed test suites.\r\n  int failed_test_suite_count() const;\r\n\r\n  // Gets the number of all test suites.\r\n  int total_test_suite_count() const;\r\n\r\n  // Gets the number of all test suites that contain at least one test\r\n  // that should run.\r\n  int test_suite_to_run_count() const;\r\n\r\n  //  Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  int successful_test_case_count() const;\r\n  int failed_test_case_count() const;\r\n  int total_test_case_count() const;\r\n  int test_case_to_run_count() const;\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Gets the number of successful tests.\r\n  int successful_test_count() const;\r\n\r\n  // Gets the number of skipped tests.\r\n  int skipped_test_count() const;\r\n\r\n  // Gets the number of failed tests.\r\n  int failed_test_count() const;\r\n\r\n  // Gets the number of disabled tests that will be reported in the XML report.\r\n  int reportable_disabled_test_count() const;\r\n\r\n  // Gets the number of disabled tests.\r\n  int disabled_test_count() const;\r\n\r\n  // Gets the number of tests to be printed in the XML report.\r\n  int reportable_test_count() const;\r\n\r\n  // Gets the number of all tests.\r\n  int total_test_count() const;\r\n\r\n  // Gets the number of tests that should run.\r\n  int test_to_run_count() const;\r\n\r\n  // Gets the time of the test program start, in ms from the start of the\r\n  // UNIX epoch.\r\n  TimeInMillis start_timestamp() const;\r\n\r\n  // Gets the elapsed time, in milliseconds.\r\n  TimeInMillis elapsed_time() const;\r\n\r\n  // Returns true if and only if the unit test passed (i.e. all test suites\r\n  // passed).\r\n  bool Passed() const;\r\n\r\n  // Returns true if and only if the unit test failed (i.e. some test suite\r\n  // failed or something outside of all tests failed).\r\n  bool Failed() const;\r\n\r\n  // Gets the i-th test suite among all the test suites. i can range from 0 to\r\n  // total_test_suite_count() - 1. If i is not in that range, returns NULL.\r\n  const TestSuite* GetTestSuite(int i) const;\r\n\r\n//  Legacy API is deprecated but still available\r\n#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n  const TestCase* GetTestCase(int i) const;\r\n#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_\r\n\r\n  // Returns the TestResult containing information on test failures and\r\n  // properties logged outside of individual test suites.\r\n  const TestResult& ad_hoc_test_result() const;\r\n\r\n  // Returns the list of event listeners that can be used to track events\r\n  // inside Google Test.\r\n  TestEventListeners& listeners();\r\n\r\n private:\r\n  // Registers and returns a global test environment.  When a test\r\n  // program is run, all global test environments will be set-up in\r\n  // the order they were registered.  After all tests in the program\r\n  // have finished, all global test environments will be torn-down in\r\n  // the *reverse* order they were registered.\r\n  //\r\n  // The UnitTest object takes ownership of the given environment.\r\n  //\r\n  // This method can only be called from the main thread.\r\n  Environment* AddEnvironment(Environment* env);\r\n\r\n  // Adds a TestPartResult to the current TestResult object.  All\r\n  // Google Test assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc)\r\n  // eventually call this to report their results.  The user code\r\n  // should use the assertion macros instead of calling this directly.\r\n  void AddTestPartResult(TestPartResult::Type result_type,\r\n                         const char* file_name,\r\n                         int line_number,\r\n                         const std::string& message,\r\n                         const std::string& os_stack_trace)\r\n      GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n  // Adds a TestProperty to the current TestResult object when invoked from\r\n  // inside a test, to current TestSuite's ad_hoc_test_result_ when invoked\r\n  // from SetUpTestSuite or TearDownTestSuite, or to the global property set\r\n  // when invoked elsewhere.  If the result already contains a property with\r\n  // the same key, the value will be updated.\r\n  void RecordProperty(const std::string& key, const std::string& value);\r\n\r\n  // Gets the i-th test suite among all the test suites. i can range from 0 to\r\n  // total_test_suite_count() - 1. If i is not in that range, returns NULL.\r\n  TestSuite* GetMutableTestSuite(int i);\r\n\r\n  // Accessors for the implementation object.\r\n  internal::UnitTestImpl* impl() { return impl_; }\r\n  const internal::UnitTestImpl* impl() const { return impl_; }\r\n\r\n  // These classes and functions are friends as they need to access private\r\n  // members of UnitTest.\r\n  friend class ScopedTrace;\r\n  friend class Test;\r\n  friend class internal::AssertHelper;\r\n  friend class internal::StreamingListenerTest;\r\n  friend class internal::UnitTestRecordPropertyTestHelper;\r\n  friend Environment* AddGlobalTestEnvironment(Environment* env);\r\n  friend internal::UnitTestImpl* internal::GetUnitTestImpl();\r\n  friend void internal::ReportFailureInUnknownLocation(\r\n      TestPartResult::Type result_type,\r\n      const std::string& message);\r\n\r\n  // Creates an empty UnitTest.\r\n  UnitTest();\r\n\r\n  // D'tor\r\n  virtual ~UnitTest();\r\n\r\n  // Pushes a trace defined by SCOPED_TRACE() on to the per-thread\r\n  // Google Test trace stack.\r\n  void PushGTestTrace(const internal::TraceInfo& trace)\r\n      GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n  // Pops a trace from the per-thread Google Test trace stack.\r\n  void PopGTestTrace()\r\n      GTEST_LOCK_EXCLUDED_(mutex_);\r\n\r\n  // Protects mutable state in *impl_.  This is mutable as some const\r\n  // methods need to lock it too.\r\n  mutable internal::Mutex mutex_;\r\n\r\n  // Opaque implementation object.  This field is never changed once\r\n  // the object is constructed.  We don't mark it as const here, as\r\n  // doing so will cause a warning in the constructor of UnitTest.\r\n  // Mutable state in *impl_ is protected by mutex_.\r\n  internal::UnitTestImpl* impl_;\r\n\r\n  // We disallow copying UnitTest.\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(UnitTest);\r\n};\r\n\r\n// A convenient wrapper for adding an environment for the test\r\n// program.\r\n//\r\n// You should call this before RUN_ALL_TESTS() is called, probably in\r\n// main().  If you use gtest_main, you need to call this before main()\r\n// starts for it to take effect.  For example, you can define a global\r\n// variable like this:\r\n//\r\n//   testing::Environment* const foo_env =\r\n//       testing::AddGlobalTestEnvironment(new FooEnvironment);\r\n//\r\n// However, we strongly recommend you to write your own main() and\r\n// call AddGlobalTestEnvironment() there, as relying on initialization\r\n// of global variables makes the code harder to read and may cause\r\n// problems when you register multiple environments from different\r\n// translation units and the environments have dependencies among them\r\n// (remember that the compiler doesn't guarantee the order in which\r\n// global variables from different translation units are initialized).\r\ninline Environment* AddGlobalTestEnvironment(Environment* env) {\r\n  return UnitTest::GetInstance()->AddEnvironment(env);\r\n}\r\n\r\n// Initializes Google Test.  This must be called before calling\r\n// RUN_ALL_TESTS().  In particular, it parses a command line for the\r\n// flags that Google Test recognizes.  Whenever a Google Test flag is\r\n// seen, it is removed from argv, and *argc is decremented.\r\n//\r\n// No value is returned.  Instead, the Google Test flag variables are\r\n// updated.\r\n//\r\n// Calling the function for the second time has no user-visible effect.\r\nGTEST_API_ void InitGoogleTest(int* argc, char** argv);\r\n\r\n// This overloaded version can be used in Windows programs compiled in\r\n// UNICODE mode.\r\nGTEST_API_ void InitGoogleTest(int* argc, wchar_t** argv);\r\n\r\n// This overloaded version can be used on Arduino/embedded platforms where\r\n// there is no argc/argv.\r\nGTEST_API_ void InitGoogleTest();\r\n\r\nnamespace internal {\r\n\r\n// Separate the error generating code from the code path to reduce the stack\r\n// frame size of CmpHelperEQ. This helps reduce the overhead of some sanitizers\r\n// when calling EXPECT_* in a tight loop.\r\ntemplate <typename T1, typename T2>\r\nAssertionResult CmpHelperEQFailure(const char* lhs_expression,\r\n                                   const char* rhs_expression,\r\n                                   const T1& lhs, const T2& rhs) {\r\n  return EqFailure(lhs_expression,\r\n                   rhs_expression,\r\n                   FormatForComparisonFailureMessage(lhs, rhs),\r\n                   FormatForComparisonFailureMessage(rhs, lhs),\r\n                   false);\r\n}\r\n\r\n// This block of code defines operator==/!=\r\n// to block lexical scope lookup.\r\n// It prevents using invalid operator==/!= defined at namespace scope.\r\nstruct faketype {};\r\ninline bool operator==(faketype, faketype) { return true; }\r\ninline bool operator!=(faketype, faketype) { return false; }\r\n\r\n// The helper function for {ASSERT|EXPECT}_EQ.\r\ntemplate <typename T1, typename T2>\r\nAssertionResult CmpHelperEQ(const char* lhs_expression,\r\n                            const char* rhs_expression,\r\n                            const T1& lhs,\r\n                            const T2& rhs) {\r\n  if (lhs == rhs) {\r\n    return AssertionSuccess();\r\n  }\r\n\r\n  return CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs);\r\n}\r\n\r\n// With this overloaded version, we allow anonymous enums to be used\r\n// in {ASSERT|EXPECT}_EQ when compiled with gcc 4, as anonymous enums\r\n// can be implicitly cast to BiggestInt.\r\nGTEST_API_ AssertionResult CmpHelperEQ(const char* lhs_expression,\r\n                                       const char* rhs_expression,\r\n                                       BiggestInt lhs,\r\n                                       BiggestInt rhs);\r\n\r\nclass EqHelper {\r\n public:\r\n  // This templatized version is for the general case.\r\n  template <\r\n      typename T1, typename T2,\r\n      // Disable this overload for cases where one argument is a pointer\r\n      // and the other is the null pointer constant.\r\n      typename std::enable_if<!std::is_integral<T1>::value ||\r\n                              !std::is_pointer<T2>::value>::type* = nullptr>\r\n  static AssertionResult Compare(const char* lhs_expression,\r\n                                 const char* rhs_expression, const T1& lhs,\r\n                                 const T2& rhs) {\r\n    return CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);\r\n  }\r\n\r\n  // With this overloaded version, we allow anonymous enums to be used\r\n  // in {ASSERT|EXPECT}_EQ when compiled with gcc 4, as anonymous\r\n  // enums can be implicitly cast to BiggestInt.\r\n  //\r\n  // Even though its body looks the same as the above version, we\r\n  // cannot merge the two, as it will make anonymous enums unhappy.\r\n  static AssertionResult Compare(const char* lhs_expression,\r\n                                 const char* rhs_expression,\r\n                                 BiggestInt lhs,\r\n                                 BiggestInt rhs) {\r\n    return CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);\r\n  }\r\n\r\n  template <typename T>\r\n  static AssertionResult Compare(\r\n      const char* lhs_expression, const char* rhs_expression,\r\n      // Handle cases where '0' is used as a null pointer literal.\r\n      std::nullptr_t /* lhs */, T* rhs) {\r\n    // We already know that 'lhs' is a null pointer.\r\n    return CmpHelperEQ(lhs_expression, rhs_expression, static_cast<T*>(nullptr),\r\n                       rhs);\r\n  }\r\n};\r\n\r\n// Separate the error generating code from the code path to reduce the stack\r\n// frame size of CmpHelperOP. This helps reduce the overhead of some sanitizers\r\n// when calling EXPECT_OP in a tight loop.\r\ntemplate <typename T1, typename T2>\r\nAssertionResult CmpHelperOpFailure(const char* expr1, const char* expr2,\r\n                                   const T1& val1, const T2& val2,\r\n                                   const char* op) {\r\n  return AssertionFailure()\r\n         << \"Expected: (\" << expr1 << \") \" << op << \" (\" << expr2\r\n         << \"), actual: \" << FormatForComparisonFailureMessage(val1, val2)\r\n         << \" vs \" << FormatForComparisonFailureMessage(val2, val1);\r\n}\r\n\r\n// A macro for implementing the helper functions needed to implement\r\n// ASSERT_?? and EXPECT_??.  It is here just to avoid copy-and-paste\r\n// of similar code.\r\n//\r\n// For each templatized helper function, we also define an overloaded\r\n// version for BiggestInt in order to reduce code bloat and allow\r\n// anonymous enums to be used with {ASSERT|EXPECT}_?? when compiled\r\n// with gcc 4.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\n\r\n#define GTEST_IMPL_CMP_HELPER_(op_name, op)\\\r\ntemplate <typename T1, typename T2>\\\r\nAssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \\\r\n                                   const T1& val1, const T2& val2) {\\\r\n  if (val1 op val2) {\\\r\n    return AssertionSuccess();\\\r\n  } else {\\\r\n    return CmpHelperOpFailure(expr1, expr2, val1, val2, #op);\\\r\n  }\\\r\n}\\\r\nGTEST_API_ AssertionResult CmpHelper##op_name(\\\r\n    const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2)\r\n\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\n\r\n// Implements the helper function for {ASSERT|EXPECT}_NE\r\nGTEST_IMPL_CMP_HELPER_(NE, !=);\r\n// Implements the helper function for {ASSERT|EXPECT}_LE\r\nGTEST_IMPL_CMP_HELPER_(LE, <=);\r\n// Implements the helper function for {ASSERT|EXPECT}_LT\r\nGTEST_IMPL_CMP_HELPER_(LT, <);\r\n// Implements the helper function for {ASSERT|EXPECT}_GE\r\nGTEST_IMPL_CMP_HELPER_(GE, >=);\r\n// Implements the helper function for {ASSERT|EXPECT}_GT\r\nGTEST_IMPL_CMP_HELPER_(GT, >);\r\n\r\n#undef GTEST_IMPL_CMP_HELPER_\r\n\r\n// The helper function for {ASSERT|EXPECT}_STREQ.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTREQ(const char* s1_expression,\r\n                                          const char* s2_expression,\r\n                                          const char* s1,\r\n                                          const char* s2);\r\n\r\n// The helper function for {ASSERT|EXPECT}_STRCASEEQ.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTRCASEEQ(const char* s1_expression,\r\n                                              const char* s2_expression,\r\n                                              const char* s1,\r\n                                              const char* s2);\r\n\r\n// The helper function for {ASSERT|EXPECT}_STRNE.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTRNE(const char* s1_expression,\r\n                                          const char* s2_expression,\r\n                                          const char* s1,\r\n                                          const char* s2);\r\n\r\n// The helper function for {ASSERT|EXPECT}_STRCASENE.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTRCASENE(const char* s1_expression,\r\n                                              const char* s2_expression,\r\n                                              const char* s1,\r\n                                              const char* s2);\r\n\r\n\r\n// Helper function for *_STREQ on wide strings.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTREQ(const char* s1_expression,\r\n                                          const char* s2_expression,\r\n                                          const wchar_t* s1,\r\n                                          const wchar_t* s2);\r\n\r\n// Helper function for *_STRNE on wide strings.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult CmpHelperSTRNE(const char* s1_expression,\r\n                                          const char* s2_expression,\r\n                                          const wchar_t* s1,\r\n                                          const wchar_t* s2);\r\n\r\n}  // namespace internal\r\n\r\n// IsSubstring() and IsNotSubstring() are intended to be used as the\r\n// first argument to {EXPECT,ASSERT}_PRED_FORMAT2(), not by\r\n// themselves.  They check whether needle is a substring of haystack\r\n// (NULL is considered a substring of itself only), and return an\r\n// appropriate error message when they fail.\r\n//\r\n// The {needle,haystack}_expr arguments are the stringified\r\n// expressions that generated the two real arguments.\r\nGTEST_API_ AssertionResult IsSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const char* needle, const char* haystack);\r\nGTEST_API_ AssertionResult IsSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const wchar_t* needle, const wchar_t* haystack);\r\nGTEST_API_ AssertionResult IsNotSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const char* needle, const char* haystack);\r\nGTEST_API_ AssertionResult IsNotSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const wchar_t* needle, const wchar_t* haystack);\r\nGTEST_API_ AssertionResult IsSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const ::std::string& needle, const ::std::string& haystack);\r\nGTEST_API_ AssertionResult IsNotSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const ::std::string& needle, const ::std::string& haystack);\r\n\r\n#if GTEST_HAS_STD_WSTRING\r\nGTEST_API_ AssertionResult IsSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const ::std::wstring& needle, const ::std::wstring& haystack);\r\nGTEST_API_ AssertionResult IsNotSubstring(\r\n    const char* needle_expr, const char* haystack_expr,\r\n    const ::std::wstring& needle, const ::std::wstring& haystack);\r\n#endif  // GTEST_HAS_STD_WSTRING\r\n\r\nnamespace internal {\r\n\r\n// Helper template function for comparing floating-points.\r\n//\r\n// Template parameter:\r\n//\r\n//   RawType: the raw floating-point type (either float or double)\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\ntemplate <typename RawType>\r\nAssertionResult CmpHelperFloatingPointEQ(const char* lhs_expression,\r\n                                         const char* rhs_expression,\r\n                                         RawType lhs_value,\r\n                                         RawType rhs_value) {\r\n  const FloatingPoint<RawType> lhs(lhs_value), rhs(rhs_value);\r\n\r\n  if (lhs.AlmostEquals(rhs)) {\r\n    return AssertionSuccess();\r\n  }\r\n\r\n  ::std::stringstream lhs_ss;\r\n  lhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\r\n         << lhs_value;\r\n\r\n  ::std::stringstream rhs_ss;\r\n  rhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\r\n         << rhs_value;\r\n\r\n  return EqFailure(lhs_expression,\r\n                   rhs_expression,\r\n                   StringStreamToString(&lhs_ss),\r\n                   StringStreamToString(&rhs_ss),\r\n                   false);\r\n}\r\n\r\n// Helper function for implementing ASSERT_NEAR.\r\n//\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\r\nGTEST_API_ AssertionResult DoubleNearPredFormat(const char* expr1,\r\n                                                const char* expr2,\r\n                                                const char* abs_error_expr,\r\n                                                double val1,\r\n                                                double val2,\r\n                                                double abs_error);\r\n\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.\r\n// A class that enables one to stream messages to assertion macros\r\nclass GTEST_API_ AssertHelper {\r\n public:\r\n  // Constructor.\r\n  AssertHelper(TestPartResult::Type type,\r\n               const char* file,\r\n               int line,\r\n               const char* message);\r\n  ~AssertHelper();\r\n\r\n  // Message assignment is a semantic trick to enable assertion\r\n  // streaming; see the GTEST_MESSAGE_ macro below.\r\n  void operator=(const Message& message) const;\r\n\r\n private:\r\n  // We put our data in a struct so that the size of the AssertHelper class can\r\n  // be as small as possible.  This is important because gcc is incapable of\r\n  // re-using stack space even for temporary variables, so every EXPECT_EQ\r\n  // reserves stack space for another AssertHelper.\r\n  struct AssertHelperData {\r\n    AssertHelperData(TestPartResult::Type t,\r\n                     const char* srcfile,\r\n                     int line_num,\r\n                     const char* msg)\r\n        : type(t), file(srcfile), line(line_num), message(msg) { }\r\n\r\n    TestPartResult::Type const type;\r\n    const char* const file;\r\n    int const line;\r\n    std::string const message;\r\n\r\n   private:\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(AssertHelperData);\r\n  };\r\n\r\n  AssertHelperData* const data_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(AssertHelper);\r\n};\r\n\r\nenum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };\r\n\r\nGTEST_API_ GTEST_ATTRIBUTE_PRINTF_(2, 3) void ColoredPrintf(GTestColor color,\r\n                                                            const char* fmt,\r\n                                                            ...);\r\n\r\n}  // namespace internal\r\n\r\n// The pure interface class that all value-parameterized tests inherit from.\r\n// A value-parameterized class must inherit from both ::testing::Test and\r\n// ::testing::WithParamInterface. In most cases that just means inheriting\r\n// from ::testing::TestWithParam, but more complicated test hierarchies\r\n// may need to inherit from Test and WithParamInterface at different levels.\r\n//\r\n// This interface has support for accessing the test parameter value via\r\n// the GetParam() method.\r\n//\r\n// Use it with one of the parameter generator defining functions, like Range(),\r\n// Values(), ValuesIn(), Bool(), and Combine().\r\n//\r\n// class FooTest : public ::testing::TestWithParam<int> {\r\n//  protected:\r\n//   FooTest() {\r\n//     // Can use GetParam() here.\r\n//   }\r\n//   ~FooTest() override {\r\n//     // Can use GetParam() here.\r\n//   }\r\n//   void SetUp() override {\r\n//     // Can use GetParam() here.\r\n//   }\r\n//   void TearDown override {\r\n//     // Can use GetParam() here.\r\n//   }\r\n// };\r\n// TEST_P(FooTest, DoesBar) {\r\n//   // Can use GetParam() method here.\r\n//   Foo foo;\r\n//   ASSERT_TRUE(foo.DoesBar(GetParam()));\r\n// }\r\n// INSTANTIATE_TEST_SUITE_P(OneToTenRange, FooTest, ::testing::Range(1, 10));\r\n\r\ntemplate <typename T>\r\nclass WithParamInterface {\r\n public:\r\n  typedef T ParamType;\r\n  virtual ~WithParamInterface() {}\r\n\r\n  // The current parameter value. Is also available in the test fixture's\r\n  // constructor.\r\n  static const ParamType& GetParam() {\r\n    GTEST_CHECK_(parameter_ != nullptr)\r\n        << \"GetParam() can only be called inside a value-parameterized test \"\r\n        << \"-- did you intend to write TEST_P instead of TEST_F?\";\r\n    return *parameter_;\r\n  }\r\n\r\n private:\r\n  // Sets parameter value. The caller is responsible for making sure the value\r\n  // remains alive and unchanged throughout the current test.\r\n  static void SetParam(const ParamType* parameter) {\r\n    parameter_ = parameter;\r\n  }\r\n\r\n  // Static value used for accessing parameter during a test lifetime.\r\n  static const ParamType* parameter_;\r\n\r\n  // TestClass must be a subclass of WithParamInterface<T> and Test.\r\n  template <class TestClass> friend class internal::ParameterizedTestFactory;\r\n};\r\n\r\ntemplate <typename T>\r\nconst T* WithParamInterface<T>::parameter_ = nullptr;\r\n\r\n// Most value-parameterized classes can ignore the existence of\r\n// WithParamInterface, and can just inherit from ::testing::TestWithParam.\r\n\r\ntemplate <typename T>\r\nclass TestWithParam : public Test, public WithParamInterface<T> {\r\n};\r\n\r\n// Macros for indicating success/failure in test code.\r\n\r\n// Skips test in runtime.\r\n// Skipping test aborts current function.\r\n// Skipped tests are neither successful nor failed.\r\n#define GTEST_SKIP() GTEST_SKIP_(\"\")\r\n\r\n// ADD_FAILURE unconditionally adds a failure to the current test.\r\n// SUCCEED generates a success - it doesn't automatically make the\r\n// current test successful, as a test is only successful when it has\r\n// no failure.\r\n//\r\n// EXPECT_* verifies that a certain condition is satisfied.  If not,\r\n// it behaves like ADD_FAILURE.  In particular:\r\n//\r\n//   EXPECT_TRUE  verifies that a Boolean condition is true.\r\n//   EXPECT_FALSE verifies that a Boolean condition is false.\r\n//\r\n// FAIL and ASSERT_* are similar to ADD_FAILURE and EXPECT_*, except\r\n// that they will also abort the current function on failure.  People\r\n// usually want the fail-fast behavior of FAIL and ASSERT_*, but those\r\n// writing data-driven tests often find themselves using ADD_FAILURE\r\n// and EXPECT_* more.\r\n\r\n// Generates a nonfatal failure with a generic message.\r\n#define ADD_FAILURE() GTEST_NONFATAL_FAILURE_(\"Failed\")\r\n\r\n// Generates a nonfatal failure at the given source file location with\r\n// a generic message.\r\n#define ADD_FAILURE_AT(file, line) \\\r\n  GTEST_MESSAGE_AT_(file, line, \"Failed\", \\\r\n                    ::testing::TestPartResult::kNonFatalFailure)\r\n\r\n// Generates a fatal failure with a generic message.\r\n#define GTEST_FAIL() GTEST_FATAL_FAILURE_(\"Failed\")\r\n\r\n// Like GTEST_FAIL(), but at the given source file location.\r\n#define GTEST_FAIL_AT(file, line)         \\\r\n  GTEST_MESSAGE_AT_(file, line, \"Failed\", \\\r\n                    ::testing::TestPartResult::kFatalFailure)\r\n\r\n// Define this macro to 1 to omit the definition of FAIL(), which is a\r\n// generic name and clashes with some other libraries.\r\n#if !GTEST_DONT_DEFINE_FAIL\r\n# define FAIL() GTEST_FAIL()\r\n#endif\r\n\r\n// Generates a success with a generic message.\r\n#define GTEST_SUCCEED() GTEST_SUCCESS_(\"Succeeded\")\r\n\r\n// Define this macro to 1 to omit the definition of SUCCEED(), which\r\n// is a generic name and clashes with some other libraries.\r\n#if !GTEST_DONT_DEFINE_SUCCEED\r\n# define SUCCEED() GTEST_SUCCEED()\r\n#endif\r\n\r\n// Macros for testing exceptions.\r\n//\r\n//    * {ASSERT|EXPECT}_THROW(statement, expected_exception):\r\n//         Tests that the statement throws the expected exception.\r\n//    * {ASSERT|EXPECT}_NO_THROW(statement):\r\n//         Tests that the statement doesn't throw any exception.\r\n//    * {ASSERT|EXPECT}_ANY_THROW(statement):\r\n//         Tests that the statement throws an exception.\r\n\r\n#define EXPECT_THROW(statement, expected_exception) \\\r\n  GTEST_TEST_THROW_(statement, expected_exception, GTEST_NONFATAL_FAILURE_)\r\n#define EXPECT_NO_THROW(statement) \\\r\n  GTEST_TEST_NO_THROW_(statement, GTEST_NONFATAL_FAILURE_)\r\n#define EXPECT_ANY_THROW(statement) \\\r\n  GTEST_TEST_ANY_THROW_(statement, GTEST_NONFATAL_FAILURE_)\r\n#define ASSERT_THROW(statement, expected_exception) \\\r\n  GTEST_TEST_THROW_(statement, expected_exception, GTEST_FATAL_FAILURE_)\r\n#define ASSERT_NO_THROW(statement) \\\r\n  GTEST_TEST_NO_THROW_(statement, GTEST_FATAL_FAILURE_)\r\n#define ASSERT_ANY_THROW(statement) \\\r\n  GTEST_TEST_ANY_THROW_(statement, GTEST_FATAL_FAILURE_)\r\n\r\n// Boolean assertions. Condition can be either a Boolean expression or an\r\n// AssertionResult. For more information on how to use AssertionResult with\r\n// these macros see comments on that class.\r\n#define EXPECT_TRUE(condition) \\\r\n  GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\\r\n                      GTEST_NONFATAL_FAILURE_)\r\n#define EXPECT_FALSE(condition) \\\r\n  GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\\r\n                      GTEST_NONFATAL_FAILURE_)\r\n#define ASSERT_TRUE(condition) \\\r\n  GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\\r\n                      GTEST_FATAL_FAILURE_)\r\n#define ASSERT_FALSE(condition) \\\r\n  GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\\r\n                      GTEST_FATAL_FAILURE_)\r\n\r\n// Macros for testing equalities and inequalities.\r\n//\r\n//    * {ASSERT|EXPECT}_EQ(v1, v2): Tests that v1 == v2\r\n//    * {ASSERT|EXPECT}_NE(v1, v2): Tests that v1 != v2\r\n//    * {ASSERT|EXPECT}_LT(v1, v2): Tests that v1 < v2\r\n//    * {ASSERT|EXPECT}_LE(v1, v2): Tests that v1 <= v2\r\n//    * {ASSERT|EXPECT}_GT(v1, v2): Tests that v1 > v2\r\n//    * {ASSERT|EXPECT}_GE(v1, v2): Tests that v1 >= v2\r\n//\r\n// When they are not, Google Test prints both the tested expressions and\r\n// their actual values.  The values must be compatible built-in types,\r\n// or you will get a compiler error.  By \"compatible\" we mean that the\r\n// values can be compared by the respective operator.\r\n//\r\n// Note:\r\n//\r\n//   1. It is possible to make a user-defined type work with\r\n//   {ASSERT|EXPECT}_??(), but that requires overloading the\r\n//   comparison operators and is thus discouraged by the Google C++\r\n//   Usage Guide.  Therefore, you are advised to use the\r\n//   {ASSERT|EXPECT}_TRUE() macro to assert that two objects are\r\n//   equal.\r\n//\r\n//   2. The {ASSERT|EXPECT}_??() macros do pointer comparisons on\r\n//   pointers (in particular, C strings).  Therefore, if you use it\r\n//   with two C strings, you are testing how their locations in memory\r\n//   are related, not how their content is related.  To compare two C\r\n//   strings by content, use {ASSERT|EXPECT}_STR*().\r\n//\r\n//   3. {ASSERT|EXPECT}_EQ(v1, v2) is preferred to\r\n//   {ASSERT|EXPECT}_TRUE(v1 == v2), as the former tells you\r\n//   what the actual value is when it fails, and similarly for the\r\n//   other comparisons.\r\n//\r\n//   4. Do not depend on the order in which {ASSERT|EXPECT}_??()\r\n//   evaluate their arguments, which is undefined.\r\n//\r\n//   5. These macros evaluate their arguments exactly once.\r\n//\r\n// Examples:\r\n//\r\n//   EXPECT_NE(Foo(), 5);\r\n//   EXPECT_EQ(a_pointer, NULL);\r\n//   ASSERT_LT(i, array_size);\r\n//   ASSERT_GT(records.size(), 0) << \"There is no record left.\";\r\n\r\n#define EXPECT_EQ(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2)\r\n#define EXPECT_NE(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)\r\n#define EXPECT_LE(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)\r\n#define EXPECT_LT(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)\r\n#define EXPECT_GE(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)\r\n#define EXPECT_GT(val1, val2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)\r\n\r\n#define GTEST_ASSERT_EQ(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2)\r\n#define GTEST_ASSERT_NE(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)\r\n#define GTEST_ASSERT_LE(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)\r\n#define GTEST_ASSERT_LT(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)\r\n#define GTEST_ASSERT_GE(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)\r\n#define GTEST_ASSERT_GT(val1, val2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)\r\n\r\n// Define macro GTEST_DONT_DEFINE_ASSERT_XY to 1 to omit the definition of\r\n// ASSERT_XY(), which clashes with some users' own code.\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_EQ\r\n# define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2)\r\n#endif\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_NE\r\n# define ASSERT_NE(val1, val2) GTEST_ASSERT_NE(val1, val2)\r\n#endif\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_LE\r\n# define ASSERT_LE(val1, val2) GTEST_ASSERT_LE(val1, val2)\r\n#endif\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_LT\r\n# define ASSERT_LT(val1, val2) GTEST_ASSERT_LT(val1, val2)\r\n#endif\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_GE\r\n# define ASSERT_GE(val1, val2) GTEST_ASSERT_GE(val1, val2)\r\n#endif\r\n\r\n#if !GTEST_DONT_DEFINE_ASSERT_GT\r\n# define ASSERT_GT(val1, val2) GTEST_ASSERT_GT(val1, val2)\r\n#endif\r\n\r\n// C-string Comparisons.  All tests treat NULL and any non-NULL string\r\n// as different.  Two NULLs are equal.\r\n//\r\n//    * {ASSERT|EXPECT}_STREQ(s1, s2):     Tests that s1 == s2\r\n//    * {ASSERT|EXPECT}_STRNE(s1, s2):     Tests that s1 != s2\r\n//    * {ASSERT|EXPECT}_STRCASEEQ(s1, s2): Tests that s1 == s2, ignoring case\r\n//    * {ASSERT|EXPECT}_STRCASENE(s1, s2): Tests that s1 != s2, ignoring case\r\n//\r\n// For wide or narrow string objects, you can use the\r\n// {ASSERT|EXPECT}_??() macros.\r\n//\r\n// Don't depend on the order in which the arguments are evaluated,\r\n// which is undefined.\r\n//\r\n// These macros evaluate their arguments exactly once.\r\n\r\n#define EXPECT_STREQ(s1, s2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)\r\n#define EXPECT_STRNE(s1, s2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)\r\n#define EXPECT_STRCASEEQ(s1, s2) \\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)\r\n#define EXPECT_STRCASENE(s1, s2)\\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)\r\n\r\n#define ASSERT_STREQ(s1, s2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)\r\n#define ASSERT_STRNE(s1, s2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)\r\n#define ASSERT_STRCASEEQ(s1, s2) \\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)\r\n#define ASSERT_STRCASENE(s1, s2)\\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)\r\n\r\n// Macros for comparing floating-point numbers.\r\n//\r\n//    * {ASSERT|EXPECT}_FLOAT_EQ(val1, val2):\r\n//         Tests that two float values are almost equal.\r\n//    * {ASSERT|EXPECT}_DOUBLE_EQ(val1, val2):\r\n//         Tests that two double values are almost equal.\r\n//    * {ASSERT|EXPECT}_NEAR(v1, v2, abs_error):\r\n//         Tests that v1 and v2 are within the given distance to each other.\r\n//\r\n// Google Test uses ULP-based comparison to automatically pick a default\r\n// error bound that is appropriate for the operands.  See the\r\n// FloatingPoint template class in gtest-internal.h if you are\r\n// interested in the implementation details.\r\n\r\n#define EXPECT_FLOAT_EQ(val1, val2)\\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\\r\n                      val1, val2)\r\n\r\n#define EXPECT_DOUBLE_EQ(val1, val2)\\\r\n  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\\r\n                      val1, val2)\r\n\r\n#define ASSERT_FLOAT_EQ(val1, val2)\\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\\r\n                      val1, val2)\r\n\r\n#define ASSERT_DOUBLE_EQ(val1, val2)\\\r\n  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\\r\n                      val1, val2)\r\n\r\n#define EXPECT_NEAR(val1, val2, abs_error)\\\r\n  EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \\\r\n                      val1, val2, abs_error)\r\n\r\n#define ASSERT_NEAR(val1, val2, abs_error)\\\r\n  ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \\\r\n                      val1, val2, abs_error)\r\n\r\n// These predicate format functions work on floating-point values, and\r\n// can be used in {ASSERT|EXPECT}_PRED_FORMAT2*(), e.g.\r\n//\r\n//   EXPECT_PRED_FORMAT2(testing::DoubleLE, Foo(), 5.0);\r\n\r\n// Asserts that val1 is less than, or almost equal to, val2.  Fails\r\n// otherwise.  In particular, it fails if either val1 or val2 is NaN.\r\nGTEST_API_ AssertionResult FloatLE(const char* expr1, const char* expr2,\r\n                                   float val1, float val2);\r\nGTEST_API_ AssertionResult DoubleLE(const char* expr1, const char* expr2,\r\n                                    double val1, double val2);\r\n\r\n\r\n#if GTEST_OS_WINDOWS\r\n\r\n// Macros that test for HRESULT failure and success, these are only useful\r\n// on Windows, and rely on Windows SDK macros and APIs to compile.\r\n//\r\n//    * {ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}(expr)\r\n//\r\n// When expr unexpectedly fails or succeeds, Google Test prints the\r\n// expected result and the actual result with both a human-readable\r\n// string representation of the error, if available, as well as the\r\n// hex result code.\r\n# define EXPECT_HRESULT_SUCCEEDED(expr) \\\r\n    EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))\r\n\r\n# define ASSERT_HRESULT_SUCCEEDED(expr) \\\r\n    ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))\r\n\r\n# define EXPECT_HRESULT_FAILED(expr) \\\r\n    EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))\r\n\r\n# define ASSERT_HRESULT_FAILED(expr) \\\r\n    ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))\r\n\r\n#endif  // GTEST_OS_WINDOWS\r\n\r\n// Macros that execute statement and check that it doesn't generate new fatal\r\n// failures in the current thread.\r\n//\r\n//   * {ASSERT|EXPECT}_NO_FATAL_FAILURE(statement);\r\n//\r\n// Examples:\r\n//\r\n//   EXPECT_NO_FATAL_FAILURE(Process());\r\n//   ASSERT_NO_FATAL_FAILURE(Process()) << \"Process() failed\";\r\n//\r\n#define ASSERT_NO_FATAL_FAILURE(statement) \\\r\n    GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_FATAL_FAILURE_)\r\n#define EXPECT_NO_FATAL_FAILURE(statement) \\\r\n    GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_NONFATAL_FAILURE_)\r\n\r\n// Causes a trace (including the given source file path and line number,\r\n// and the given message) to be included in every test failure message generated\r\n// by code in the scope of the lifetime of an instance of this class. The effect\r\n// is undone with the destruction of the instance.\r\n//\r\n// The message argument can be anything streamable to std::ostream.\r\n//\r\n// Example:\r\n//   testing::ScopedTrace trace(\"file.cc\", 123, \"message\");\r\n//\r\nclass GTEST_API_ ScopedTrace {\r\n public:\r\n  // The c'tor pushes the given source file location and message onto\r\n  // a trace stack maintained by Google Test.\r\n\r\n  // Template version. Uses Message() to convert the values into strings.\r\n  // Slow, but flexible.\r\n  template <typename T>\r\n  ScopedTrace(const char* file, int line, const T& message) {\r\n    PushTrace(file, line, (Message() << message).GetString());\r\n  }\r\n\r\n  // Optimize for some known types.\r\n  ScopedTrace(const char* file, int line, const char* message) {\r\n    PushTrace(file, line, message ? message : \"(null)\");\r\n  }\r\n\r\n  ScopedTrace(const char* file, int line, const std::string& message) {\r\n    PushTrace(file, line, message);\r\n  }\r\n\r\n  // The d'tor pops the info pushed by the c'tor.\r\n  //\r\n  // Note that the d'tor is not virtual in order to be efficient.\r\n  // Don't inherit from ScopedTrace!\r\n  ~ScopedTrace();\r\n\r\n private:\r\n  void PushTrace(const char* file, int line, std::string message);\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedTrace);\r\n} GTEST_ATTRIBUTE_UNUSED_;  // A ScopedTrace object does its job in its\r\n                            // c'tor and d'tor.  Therefore it doesn't\r\n                            // need to be used otherwise.\r\n\r\n// Causes a trace (including the source file path, the current line\r\n// number, and the given message) to be included in every test failure\r\n// message generated by code in the current scope.  The effect is\r\n// undone when the control leaves the current scope.\r\n//\r\n// The message argument can be anything streamable to std::ostream.\r\n//\r\n// In the implementation, we include the current line number as part\r\n// of the dummy variable name, thus allowing multiple SCOPED_TRACE()s\r\n// to appear in the same block - as long as they are on different\r\n// lines.\r\n//\r\n// Assuming that each thread maintains its own stack of traces.\r\n// Therefore, a SCOPED_TRACE() would (correctly) only affect the\r\n// assertions in its own thread.\r\n#define SCOPED_TRACE(message) \\\r\n  ::testing::ScopedTrace GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)(\\\r\n    __FILE__, __LINE__, (message))\r\n\r\n// Compile-time assertion for type equality.\r\n// StaticAssertTypeEq<type1, type2>() compiles if and only if type1 and type2\r\n// are the same type.  The value it returns is not interesting.\r\n//\r\n// Instead of making StaticAssertTypeEq a class template, we make it a\r\n// function template that invokes a helper class template.  This\r\n// prevents a user from misusing StaticAssertTypeEq<T1, T2> by\r\n// defining objects of that type.\r\n//\r\n// CAVEAT:\r\n//\r\n// When used inside a method of a class template,\r\n// StaticAssertTypeEq<T1, T2>() is effective ONLY IF the method is\r\n// instantiated.  For example, given:\r\n//\r\n//   template <typename T> class Foo {\r\n//    public:\r\n//     void Bar() { testing::StaticAssertTypeEq<int, T>(); }\r\n//   };\r\n//\r\n// the code:\r\n//\r\n//   void Test1() { Foo<bool> foo; }\r\n//\r\n// will NOT generate a compiler error, as Foo<bool>::Bar() is never\r\n// actually instantiated.  Instead, you need:\r\n//\r\n//   void Test2() { Foo<bool> foo; foo.Bar(); }\r\n//\r\n// to cause a compiler error.\r\ntemplate <typename T1, typename T2>\r\nconstexpr bool StaticAssertTypeEq() noexcept {\r\n  static_assert(std::is_same<T1, T2>::value, \"T1 and T2 are not the same type\");\r\n  return true;\r\n}\r\n\r\n// Defines a test.\r\n//\r\n// The first parameter is the name of the test suite, and the second\r\n// parameter is the name of the test within the test suite.\r\n//\r\n// The convention is to end the test suite name with \"Test\".  For\r\n// example, a test suite for the Foo class can be named FooTest.\r\n//\r\n// Test code should appear between braces after an invocation of\r\n// this macro.  Example:\r\n//\r\n//   TEST(FooTest, InitializesCorrectly) {\r\n//     Foo foo;\r\n//     EXPECT_TRUE(foo.StatusIsOK());\r\n//   }\r\n\r\n// Note that we call GetTestTypeId() instead of GetTypeId<\r\n// ::testing::Test>() here to get the type ID of testing::Test.  This\r\n// is to work around a suspected linker bug when using Google Test as\r\n// a framework on Mac OS X.  The bug causes GetTypeId<\r\n// ::testing::Test>() to return different values depending on whether\r\n// the call is from the Google Test framework itself or from user test\r\n// code.  GetTestTypeId() is guaranteed to always return the same\r\n// value, as it always calls GetTypeId<>() from the Google Test\r\n// framework.\r\n#define GTEST_TEST(test_suite_name, test_name)             \\\r\n  GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \\\r\n              ::testing::internal::GetTestTypeId())\r\n\r\n// Define this macro to 1 to omit the definition of TEST(), which\r\n// is a generic name and clashes with some other libraries.\r\n#if !GTEST_DONT_DEFINE_TEST\r\n#define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)\r\n#endif\r\n\r\n// Defines a test that uses a test fixture.\r\n//\r\n// The first parameter is the name of the test fixture class, which\r\n// also doubles as the test suite name.  The second parameter is the\r\n// name of the test within the test suite.\r\n//\r\n// A test fixture class must be declared earlier.  The user should put\r\n// the test code between braces after using this macro.  Example:\r\n//\r\n//   class FooTest : public testing::Test {\r\n//    protected:\r\n//     void SetUp() override { b_.AddElement(3); }\r\n//\r\n//     Foo a_;\r\n//     Foo b_;\r\n//   };\r\n//\r\n//   TEST_F(FooTest, InitializesCorrectly) {\r\n//     EXPECT_TRUE(a_.StatusIsOK());\r\n//   }\r\n//\r\n//   TEST_F(FooTest, ReturnsElementCountCorrectly) {\r\n//     EXPECT_EQ(a_.size(), 0);\r\n//     EXPECT_EQ(b_.size(), 1);\r\n//   }\r\n//\r\n// GOOGLETEST_CM0011 DO NOT DELETE\r\n#define TEST_F(test_fixture, test_name)\\\r\n  GTEST_TEST_(test_fixture, test_name, test_fixture, \\\r\n              ::testing::internal::GetTypeId<test_fixture>())\r\n\r\n// Returns a path to temporary directory.\r\n// Tries to determine an appropriate directory for the platform.\r\nGTEST_API_ std::string TempDir();\r\n\r\n#ifdef _MSC_VER\r\n#  pragma warning(pop)\r\n#endif\r\n\r\n// Dynamically registers a test with the framework.\r\n//\r\n// This is an advanced API only to be used when the `TEST` macros are\r\n// insufficient. The macros should be preferred when possible, as they avoid\r\n// most of the complexity of calling this function.\r\n//\r\n// The `factory` argument is a factory callable (move-constructible) object or\r\n// function pointer that creates a new instance of the Test object. It\r\n// handles ownership to the caller. The signature of the callable is\r\n// `Fixture*()`, where `Fixture` is the test fixture class for the test. All\r\n// tests registered with the same `test_suite_name` must return the same\r\n// fixture type. This is checked at runtime.\r\n//\r\n// The framework will infer the fixture class from the factory and will call\r\n// the `SetUpTestSuite` and `TearDownTestSuite` for it.\r\n//\r\n// Must be called before `RUN_ALL_TESTS()` is invoked, otherwise behavior is\r\n// undefined.\r\n//\r\n// Use case example:\r\n//\r\n// class MyFixture : public ::testing::Test {\r\n//  public:\r\n//   // All of these optional, just like in regular macro usage.\r\n//   static void SetUpTestSuite() { ... }\r\n//   static void TearDownTestSuite() { ... }\r\n//   void SetUp() override { ... }\r\n//   void TearDown() override { ... }\r\n// };\r\n//\r\n// class MyTest : public MyFixture {\r\n//  public:\r\n//   explicit MyTest(int data) : data_(data) {}\r\n//   void TestBody() override { ... }\r\n//\r\n//  private:\r\n//   int data_;\r\n// };\r\n//\r\n// void RegisterMyTests(const std::vector<int>& values) {\r\n//   for (int v : values) {\r\n//     ::testing::RegisterTest(\r\n//         \"MyFixture\", (\"Test\" + std::to_string(v)).c_str(), nullptr,\r\n//         std::to_string(v).c_str(),\r\n//         __FILE__, __LINE__,\r\n//         // Important to use the fixture type as the return type here.\r\n//         [=]() -> MyFixture* { return new MyTest(v); });\r\n//   }\r\n// }\r\n// ...\r\n// int main(int argc, char** argv) {\r\n//   std::vector<int> values_to_test = LoadValuesFromConfig();\r\n//   RegisterMyTests(values_to_test);\r\n//   ...\r\n//   return RUN_ALL_TESTS();\r\n// }\r\n//\r\ntemplate <int&... ExplicitParameterBarrier, typename Factory>\r\nTestInfo* RegisterTest(const char* test_suite_name, const char* test_name,\r\n                       const char* type_param, const char* value_param,\r\n                       const char* file, int line, Factory factory) {\r\n  using TestT = typename std::remove_pointer<decltype(factory())>::type;\r\n\r\n  class FactoryImpl : public internal::TestFactoryBase {\r\n   public:\r\n    explicit FactoryImpl(Factory f) : factory_(std::move(f)) {}\r\n    Test* CreateTest() override { return factory_(); }\r\n\r\n   private:\r\n    Factory factory_;\r\n  };\r\n\r\n  return internal::MakeAndRegisterTestInfo(\r\n      test_suite_name, test_name, type_param, value_param,\r\n      internal::CodeLocation(file, line), internal::GetTypeId<TestT>(),\r\n      internal::SuiteApiResolver<TestT>::GetSetUpCaseOrSuite(file, line),\r\n      internal::SuiteApiResolver<TestT>::GetTearDownCaseOrSuite(file, line),\r\n      new FactoryImpl{std::move(factory)});\r\n}\r\n\r\n}  // namespace testing\r\n\r\n// Use this function in main() to run all tests.  It returns 0 if all\r\n// tests are successful, or 1 otherwise.\r\n//\r\n// RUN_ALL_TESTS() should be invoked after the command line has been\r\n// parsed by InitGoogleTest().\r\n//\r\n// This function was formerly a macro; thus, it is in the global\r\n// namespace and has an all-caps name.\r\nint RUN_ALL_TESTS() GTEST_MUST_USE_RESULT_;\r\n\r\ninline int RUN_ALL_TESTS() {\r\n  return ::testing::UnitTest::GetInstance()->Run();\r\n}\r\n\r\nGTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251\r\n\r\n#endif  // GTEST_INCLUDE_GTEST_GTEST_H_\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/lib/googletest/include/gtest/gtest.h b/Test/lib/googletest/include/gtest/gtest.h
--- a/Test/lib/googletest/include/gtest/gtest.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/lib/googletest/include/gtest/gtest.h	(date 1606989168980)
@@ -1061,7 +1061,7 @@
 
 #if GTEST_HAS_EXCEPTIONS
 
-// Error which can be thrown from TestEventListener::OnTestPartResult.
+// AbstractError which can be thrown from TestEventListener::OnTestPartResult.
 class GTEST_API_ AssertionException
     : public internal::GoogleTestFailureException {
  public:
Index: cmake-build-debug/Project_Monte_carlo.cbp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CodeBlocks_project_file>\n\t<FileVersion major=\"1\" minor=\"6\"/>\n\t<Project>\n\t\t<Option title=\"Project_Monte_carlo\"/>\n\t\t<Option makefile_is_custom=\"1\"/>\n\t\t<Option compiler=\"gcc\"/>\n\t\t<Option virtualFolders=\"CMake Files\\;CMake Files\\Modules\\;CMake Files\\Test\\;CMake Files\\Test\\basic_tests\\;CMake Files\\Test\\lib\\;CMake Files\\Test\\lib\\googletest\\;CMake Files\\Test\\lib\\googletest\\cmake\\;\"/>\n\t\t<Build>\n\t\t\t<Target title=\"all\">\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\"/>\n\t\t\t\t<Option type=\"4\"/>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 all\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"rebuild_cache\">\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\"/>\n\t\t\t\t<Option type=\"4\"/>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"edit_cache\">\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\"/>\n\t\t\t\t<Option type=\"4\"/>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"monte_carlo_run\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/monte_carlo_run\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"1\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"monte_carlo_run/fast\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/monte_carlo_run\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"1\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run/fast\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"Input_test\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"1\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"Input_test/fast\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"1\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test/fast\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"gtest_main\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"gtest_main/fast\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main/fast\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"gtest\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"gtest/fast\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include\"/>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest/fast\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"Modules\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/libModules.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t\t<Target title=\"Modules/fast\">\n\t\t\t\t<Option output=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/libModules.a\" prefix_auto=\"0\" extension_auto=\"0\"/>\n\t\t\t\t<Option working_dir=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules\"/>\n\t\t\t\t<Option object_output=\"./\"/>\n\t\t\t\t<Option type=\"2\"/>\n\t\t\t\t<Option compiler=\"gcc\"/>\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add directory=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include\"/>\n\t\t\t\t\t<Add directory=\"/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed\"/>\n\t\t\t\t\t<Add directory=\"/usr/include/x86_64-linux-gnu\"/>\n\t\t\t\t\t<Add directory=\"/usr/include\"/>\n\t\t\t\t</Compiler>\n\t\t\t\t<MakeCommands>\n\t\t\t\t\t<Build command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules/fast\"/>\n\t\t\t\t\t<CompileFile command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;\"/>\n\t\t\t\t\t<Clean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t\t<DistClean command=\"/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean\"/>\n\t\t\t\t</MakeCommands>\n\t\t\t</Target>\n\t\t</Build>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractExpectation.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractExpectation.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractFunc.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractFunc.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractReader.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractReader.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractVariable.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/Error.hpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/ExpFunc.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/ExpFunc.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/FunctReader.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/FunctReader.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/MonteCarloExpectation.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/MonteCarloExpectation.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalDist.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalDist.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalReader.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalReader.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/PolynomlFunc.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/PolynomlFunc.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/StatisticalMoment.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/StatisticalMoment.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/TrigoFunc.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/TrigoFunc.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformDist.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformDist.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformReader.cpp\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformReader.h\">\n\t\t\t<Option target=\"Modules\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/basic_tests/Input_test.cpp\">\n\t\t\t<Option target=\"Input_test\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/src/gtest-all.cc\">\n\t\t\t<Option target=\"gtest\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/src/gtest_main.cc\">\n\t\t\t<Option target=\"gtest_main\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/main.cpp\">\n\t\t\t<Option target=\"monte_carlo_run\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/CMakeLists.txt\">\n\t\t\t<Option virtualFolder=\"CMake Files\\\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/CMakeLists.txt\">\n\t\t\t<Option virtualFolder=\"CMake Files\\Modules\\\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/CMakeLists.txt\">\n\t\t\t<Option virtualFolder=\"CMake Files\\Test\\\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/basic_tests/CMakeLists.txt\">\n\t\t\t<Option virtualFolder=\"CMake Files\\Test\\basic_tests\\\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/CMakeLists.txt\">\n\t\t\t<Option virtualFolder=\"CMake Files\\Test\\lib\\googletest\\\"/>\n\t\t</Unit>\n\t\t<Unit filename=\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/cmake/internal_utils.cmake\">\n\t\t\t<Option virtualFolder=\"CMake Files\\Test\\lib\\googletest\\cmake\\\"/>\n\t\t</Unit>\n\t</Project>\n</CodeBlocks_project_file>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Project_Monte_carlo.cbp b/cmake-build-debug/Project_Monte_carlo.cbp
--- a/cmake-build-debug/Project_Monte_carlo.cbp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/Project_Monte_carlo.cbp	(date 1607025467183)
@@ -8,390 +8,390 @@
 		<Option virtualFolders="CMake Files\;CMake Files\Modules\;CMake Files\Test\;CMake Files\Test\basic_tests\;CMake Files\Test\lib\;CMake Files\Test\lib\googletest\;CMake Files\Test\lib\googletest\cmake\;"/>
 		<Build>
 			<Target title="all">
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug"/>
 				<Option type="4"/>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 all"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 all"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="rebuild_cache">
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug"/>
 				<Option type="4"/>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="edit_cache">
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug"/>
 				<Option type="4"/>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="monte_carlo_run">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/monte_carlo_run" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/monte_carlo_run" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug"/>
 				<Option object_output="./"/>
 				<Option type="1"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="monte_carlo_run/fast">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/monte_carlo_run" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/monte_carlo_run" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug"/>
 				<Option object_output="./"/>
 				<Option type="1"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run/fast"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 monte_carlo_run/fast"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="Input_test">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests"/>
 				<Option object_output="./"/>
 				<Option type="1"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="Input_test/fast">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Input_test" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests"/>
 				<Option object_output="./"/>
 				<Option type="1"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test/fast"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 Input_test/fast"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/basic_tests/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="gtest_main">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="gtest_main/fast">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/lib/libgtest_maind.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main/fast"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest_main/fast"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="gtest">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="gtest/fast">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/lib/libgtestd.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/include"/>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/include"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest/fast"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 gtest/fast"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/lib/googletest/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="Modules">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/libModules.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/libModules.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 			<Target title="Modules/fast">
-				<Option output="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/libModules.a" prefix_auto="0" extension_auto="0"/>
-				<Option working_dir="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules"/>
+				<Option output="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/libModules.a" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules"/>
 				<Option object_output="./"/>
 				<Option type="2"/>
 				<Option compiler="gcc"/>
 				<Compiler>
-					<Add directory="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/x86_64-unknown-linux-gnu"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/../../../../include/c++/10.2.0/backward"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include"/>
-					<Add directory="/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2.0/include-fixed"/>
+					<Add directory="/home/hugo/MA3/Project_monte_carlo/Modules"/>
+					<Add directory="/usr/include/c++/9"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/9"/>
+					<Add directory="/usr/include/c++/9/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/9/include"/>
+					<Add directory="/usr/local/include"/>
 					<Add directory="/usr/include/x86_64-linux-gnu"/>
 					<Add directory="/usr/include"/>
 				</Compiler>
 				<MakeCommands>
-					<Build command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules/fast"/>
-					<CompileFile command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
-					<Clean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
-					<DistClean command="/usr/bin/make -j4 -f &quot;/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
+					<Build command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 Modules/fast"/>
+					<CompileFile command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j8 -f &quot;/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/Makefile&quot;  VERBOSE=1 clean"/>
 				</MakeCommands>
 			</Target>
 		</Build>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractExpectation.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractError.hpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractExpectation.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractExpectation.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractFunc.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractExpectation.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractFunc.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractFunc.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractReader.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractFunc.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractReader.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractReader.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/AbstractVariable.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractReader.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/Error.hpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/AbstractVariable.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/ExpFunc.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/ExpFunc.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/ExpFunc.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/ExpFunc.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/FunctReader.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/FunctReader.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/FunctReader.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/FunctReader.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/MonteCarloExpectation.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/MonteCarloExpectation.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/MonteCarloExpectation.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/MonteCarloExpectation.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalDist.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/NormalDist.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalDist.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/NormalDist.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalReader.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/NormalReader.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/NormalReader.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/NormalReader.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/PolynomlFunc.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/PolynomlFunc.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/PolynomlFunc.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/PolynomlFunc.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/StatisticalMoment.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/StatisticalMoment.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/StatisticalMoment.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/StatisticalMoment.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/TrigoFunc.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/TrigoFunc.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/TrigoFunc.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/TrigoFunc.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformDist.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/UniformDist.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformDist.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/UniformDist.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformReader.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/UniformReader.cpp">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/UniformReader.h">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/UniformReader.h">
 			<Option target="Modules"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/basic_tests/Input_test.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/basic_tests/Input_test.cpp">
 			<Option target="Input_test"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/src/gtest-all.cc">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/src/gtest-all.cc">
 			<Option target="gtest"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/src/gtest_main.cc">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/src/gtest_main.cc">
 			<Option target="gtest_main"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/main.cpp">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/main.cpp">
 			<Option target="monte_carlo_run"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/CMakeLists.txt">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/CMakeLists.txt">
 			<Option virtualFolder="CMake Files\"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Modules/CMakeLists.txt">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Modules/CMakeLists.txt">
 			<Option virtualFolder="CMake Files\Modules\"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/CMakeLists.txt">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/CMakeLists.txt">
 			<Option virtualFolder="CMake Files\Test\"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/basic_tests/CMakeLists.txt">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/basic_tests/CMakeLists.txt">
 			<Option virtualFolder="CMake Files\Test\basic_tests\"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/CMakeLists.txt">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/CMakeLists.txt">
 			<Option virtualFolder="CMake Files\Test\lib\googletest\"/>
 		</Unit>
-		<Unit filename="/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/Test/lib/googletest/cmake/internal_utils.cmake">
+		<Unit filename="/home/hugo/MA3/Project_monte_carlo/Test/lib/googletest/cmake/internal_utils.cmake">
 			<Option virtualFolder="CMake Files\Test\lib\googletest\cmake\"/>
 		</Unit>
 	</Project>
Index: Test/lib/googletest/include/gtest/internal/gtest-port.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright 2005, Google Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// Low-level types and utilities for porting Google Test to various\r\n// platforms.  All macros ending with _ and symbols defined in an\r\n// internal namespace are subject to change without notice.  Code\r\n// outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't\r\n// end with _ are part of Google Test's public API and can be used by\r\n// code outside Google Test.\r\n//\r\n// This file is fundamental to Google Test.  All other Google Test source\r\n// files are expected to #include this.  Therefore, it cannot #include\r\n// any other Google Test header.\r\n\r\n// GOOGLETEST_CM0001 DO NOT DELETE\r\n\r\n#ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_\r\n#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_\r\n\r\n// Environment-describing macros\r\n// -----------------------------\r\n//\r\n// Google Test can be used in many different environments.  Macros in\r\n// this section tell Google Test what kind of environment it is being\r\n// used in, such that Google Test can provide environment-specific\r\n// features and implementations.\r\n//\r\n// Google Test tries to automatically detect the properties of its\r\n// environment, so users usually don't need to worry about these\r\n// macros.  However, the automatic detection is not perfect.\r\n// Sometimes it's necessary for a user to define some of the following\r\n// macros in the build script to override Google Test's decisions.\r\n//\r\n// If the user doesn't define a macro in the list, Google Test will\r\n// provide a default definition.  After this header is #included, all\r\n// macros in this list will be defined to either 1 or 0.\r\n//\r\n// Notes to maintainers:\r\n//   - Each macro here is a user-tweakable knob; do not grow the list\r\n//     lightly.\r\n//   - Use #if to key off these macros.  Don't use #ifdef or \"#if\r\n//     defined(...)\", which will not work as these macros are ALWAYS\r\n//     defined.\r\n//\r\n//   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)\r\n//                              is/isn't available.\r\n//   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions\r\n//                              are enabled.\r\n//   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular\r\n//                              expressions are/aren't available.\r\n//   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>\r\n//                              is/isn't available.\r\n//   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't\r\n//                              enabled.\r\n//   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that\r\n//                              std::wstring does/doesn't work (Google Test can\r\n//                              be used where std::wstring is unavailable).\r\n//   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the\r\n//                              compiler supports Microsoft's \"Structured\r\n//                              Error Handling\".\r\n//   GTEST_HAS_STREAM_REDIRECTION\r\n//                            - Define it to 1/0 to indicate whether the\r\n//                              platform supports I/O stream redirection using\r\n//                              dup() and dup2().\r\n//   GTEST_LINKED_AS_SHARED_LIBRARY\r\n//                            - Define to 1 when compiling tests that use\r\n//                              Google Test as a shared library (known as\r\n//                              DLL on Windows).\r\n//   GTEST_CREATE_SHARED_LIBRARY\r\n//                            - Define to 1 when compiling Google Test itself\r\n//                              as a shared library.\r\n//   GTEST_DEFAULT_DEATH_TEST_STYLE\r\n//                            - The default value of --gtest_death_test_style.\r\n//                              The legacy default has been \"fast\" in the open\r\n//                              source version since 2008. The recommended value\r\n//                              is \"threadsafe\", and can be set in\r\n//                              custom/gtest-port.h.\r\n\r\n// Platform-indicating macros\r\n// --------------------------\r\n//\r\n// Macros indicating the platform on which Google Test is being used\r\n// (a macro is defined to 1 if compiled on the given platform;\r\n// otherwise UNDEFINED -- it's never defined to 0.).  Google Test\r\n// defines these macros automatically.  Code outside Google Test MUST\r\n// NOT define them.\r\n//\r\n//   GTEST_OS_AIX      - IBM AIX\r\n//   GTEST_OS_CYGWIN   - Cygwin\r\n//   GTEST_OS_DRAGONFLY - DragonFlyBSD\r\n//   GTEST_OS_FREEBSD  - FreeBSD\r\n//   GTEST_OS_FUCHSIA  - Fuchsia\r\n//   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD\r\n//   GTEST_OS_HAIKU    - Haiku\r\n//   GTEST_OS_HPUX     - HP-UX\r\n//   GTEST_OS_LINUX    - Linux\r\n//     GTEST_OS_LINUX_ANDROID - Google Android\r\n//   GTEST_OS_MAC      - Mac OS X\r\n//     GTEST_OS_IOS    - iOS\r\n//   GTEST_OS_NACL     - Google Native Client (NaCl)\r\n//   GTEST_OS_NETBSD   - NetBSD\r\n//   GTEST_OS_OPENBSD  - OpenBSD\r\n//   GTEST_OS_OS2      - OS/2\r\n//   GTEST_OS_QNX      - QNX\r\n//   GTEST_OS_SOLARIS  - Sun Solaris\r\n//   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)\r\n//     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop\r\n//     GTEST_OS_WINDOWS_MINGW    - MinGW\r\n//     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile\r\n//     GTEST_OS_WINDOWS_PHONE    - Windows Phone\r\n//     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT\r\n//   GTEST_OS_ZOS      - z/OS\r\n//\r\n// Among the platforms, Cygwin, Linux, Mac OS X, and Windows have the\r\n// most stable support.  Since core members of the Google Test project\r\n// don't have access to other platforms, support for them may be less\r\n// stable.  If you notice any problems on your platform, please notify\r\n// googletestframework@googlegroups.com (patches for fixing them are\r\n// even more welcome!).\r\n//\r\n// It is possible that none of the GTEST_OS_* macros are defined.\r\n\r\n// Feature-indicating macros\r\n// -------------------------\r\n//\r\n// Macros indicating which Google Test features are available (a macro\r\n// is defined to 1 if the corresponding feature is supported;\r\n// otherwise UNDEFINED -- it's never defined to 0.).  Google Test\r\n// defines these macros automatically.  Code outside Google Test MUST\r\n// NOT define them.\r\n//\r\n// These macros are public so that portable tests can be written.\r\n// Such tests typically surround code using a feature with an #if\r\n// which controls that code.  For example:\r\n//\r\n// #if GTEST_HAS_DEATH_TEST\r\n//   EXPECT_DEATH(DoSomethingDeadly());\r\n// #endif\r\n//\r\n//   GTEST_HAS_DEATH_TEST   - death tests\r\n//   GTEST_HAS_TYPED_TEST   - typed tests\r\n//   GTEST_HAS_TYPED_TEST_P - type-parameterized tests\r\n//   GTEST_IS_THREADSAFE    - Google Test is thread-safe.\r\n//   GOOGLETEST_CM0007 DO NOT DELETE\r\n//   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with\r\n//                            GTEST_HAS_POSIX_RE (see above) which users can\r\n//                            define themselves.\r\n//   GTEST_USES_SIMPLE_RE   - our own simple regex is used;\r\n//                            the above RE\\b(s) are mutually exclusive.\r\n\r\n// Misc public macros\r\n// ------------------\r\n//\r\n//   GTEST_FLAG(flag_name)  - references the variable corresponding to\r\n//                            the given Google Test flag.\r\n\r\n// Internal utilities\r\n// ------------------\r\n//\r\n// The following macros and utilities are for Google Test's INTERNAL\r\n// use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.\r\n//\r\n// Macros for basic C++ coding:\r\n//   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.\r\n//   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a\r\n//                              variable don't have to be used.\r\n//   GTEST_DISALLOW_ASSIGN_   - disables operator=.\r\n//   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.\r\n//   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.\r\n//   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is\r\n//                                        suppressed (constant conditional).\r\n//   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127\r\n//                                        is suppressed.\r\n//\r\n// Synchronization:\r\n//   Mutex, MutexLock, ThreadLocal, GetThreadCount()\r\n//                            - synchronization primitives.\r\n//\r\n// Regular expressions:\r\n//   RE             - a simple regular expression class using the POSIX\r\n//                    Extended Regular Expression syntax on UNIX-like platforms\r\n//                    GOOGLETEST_CM0008 DO NOT DELETE\r\n//                    or a reduced regular exception syntax on other\r\n//                    platforms, including Windows.\r\n// Logging:\r\n//   GTEST_LOG_()   - logs messages at the specified severity level.\r\n//   LogToStderr()  - directs all log messages to stderr.\r\n//   FlushInfoLog() - flushes informational log messages.\r\n//\r\n// Stdout and stderr capturing:\r\n//   CaptureStdout()     - starts capturing stdout.\r\n//   GetCapturedStdout() - stops capturing stdout and returns the captured\r\n//                         string.\r\n//   CaptureStderr()     - starts capturing stderr.\r\n//   GetCapturedStderr() - stops capturing stderr and returns the captured\r\n//                         string.\r\n//\r\n// Integer types:\r\n//   TypeWithSize   - maps an integer to a int type.\r\n//   TimeInMillis   - integers of known sizes.\r\n//   BiggestInt     - the biggest signed integer type.\r\n//\r\n// Command-line utilities:\r\n//   GTEST_DECLARE_*()  - declares a flag.\r\n//   GTEST_DEFINE_*()   - defines a flag.\r\n//   GetInjectableArgvs() - returns the command line as a vector of strings.\r\n//\r\n// Environment variable utilities:\r\n//   GetEnv()             - gets the value of an environment variable.\r\n//   BoolFromGTestEnv()   - parses a bool environment variable.\r\n//   Int32FromGTestEnv()  - parses an int32_t environment variable.\r\n//   StringFromGTestEnv() - parses a string environment variable.\r\n//\r\n// Deprecation warnings:\r\n//   GTEST_INTERNAL_DEPRECATED(message) - attribute marking a function as\r\n//                                        deprecated; calling a marked function\r\n//                                        should generate a compiler warning\r\n\r\n#include <ctype.h>   // for isspace, etc\r\n#include <stddef.h>  // for ptrdiff_t\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <cstdint>\r\n#include <limits>\r\n#include <type_traits>\r\n\r\n#ifndef _WIN32_WCE\r\n# include <sys/types.h>\r\n# include <sys/stat.h>\r\n#endif  // !_WIN32_WCE\r\n\r\n#if defined __APPLE__\r\n# include <AvailabilityMacros.h>\r\n# include <TargetConditionals.h>\r\n#endif\r\n\r\n#include <iostream>  // NOLINT\r\n#include <memory>\r\n#include <string>  // NOLINT\r\n#include <tuple>\r\n#include <vector>  // NOLINT\r\n\r\n#include \"gtest/internal/custom/gtest-port.h\"\r\n#include \"gtest/internal/gtest-port-arch.h\"\r\n\r\n#if !defined(GTEST_DEV_EMAIL_)\r\n# define GTEST_DEV_EMAIL_ \"googletestframework@@googlegroups.com\"\r\n# define GTEST_FLAG_PREFIX_ \"gtest_\"\r\n# define GTEST_FLAG_PREFIX_DASH_ \"gtest-\"\r\n# define GTEST_FLAG_PREFIX_UPPER_ \"GTEST_\"\r\n# define GTEST_NAME_ \"Google Test\"\r\n# define GTEST_PROJECT_URL_ \"https://github.com/google/googletest/\"\r\n#endif  // !defined(GTEST_DEV_EMAIL_)\r\n\r\n#if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)\r\n# define GTEST_INIT_GOOGLE_TEST_NAME_ \"testing::InitGoogleTest\"\r\n#endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)\r\n\r\n// Determines the version of gcc that is used to compile this.\r\n#ifdef __GNUC__\r\n// 40302 means version 4.3.2.\r\n# define GTEST_GCC_VER_ \\\r\n    (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)\r\n#endif  // __GNUC__\r\n\r\n// Macros for disabling Microsoft Visual C++ warnings.\r\n//\r\n//   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)\r\n//   /* code that triggers warnings C4800 and C4385 */\r\n//   GTEST_DISABLE_MSC_WARNINGS_POP_()\r\n#if defined(_MSC_VER)\r\n# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \\\r\n    __pragma(warning(push))                        \\\r\n    __pragma(warning(disable: warnings))\r\n# define GTEST_DISABLE_MSC_WARNINGS_POP_()          \\\r\n    __pragma(warning(pop))\r\n#else\r\n// Not all compilers are MSVC\r\n# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)\r\n# define GTEST_DISABLE_MSC_WARNINGS_POP_()\r\n#endif\r\n\r\n// Clang on Windows does not understand MSVC's pragma warning.\r\n// We need clang-specific way to disable function deprecation warning.\r\n#ifdef __clang__\r\n# define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                         \\\r\n    _Pragma(\"clang diagnostic push\")                                  \\\r\n    _Pragma(\"clang diagnostic ignored \\\"-Wdeprecated-declarations\\\"\") \\\r\n    _Pragma(\"clang diagnostic ignored \\\"-Wdeprecated-implementations\\\"\")\r\n#define GTEST_DISABLE_MSC_DEPRECATED_POP_() \\\r\n    _Pragma(\"clang diagnostic pop\")\r\n#else\r\n# define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \\\r\n    GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)\r\n# define GTEST_DISABLE_MSC_DEPRECATED_POP_() \\\r\n    GTEST_DISABLE_MSC_WARNINGS_POP_()\r\n#endif\r\n\r\n// Brings in definitions for functions used in the testing::internal::posix\r\n// namespace (read, write, close, chdir, isatty, stat). We do not currently\r\n// use them on Windows Mobile.\r\n#if GTEST_OS_WINDOWS\r\n# if !GTEST_OS_WINDOWS_MOBILE\r\n#  include <direct.h>\r\n#  include <io.h>\r\n# endif\r\n// In order to avoid having to include <windows.h>, use forward declaration\r\n#if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)\r\n// MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two\r\n// separate (equivalent) structs, instead of using typedef\r\ntypedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;\r\n#else\r\n// Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.\r\n// This assumption is verified by\r\n// WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.\r\ntypedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;\r\n#endif\r\n#else\r\n// This assumes that non-Windows OSes provide unistd.h. For OSes where this\r\n// is not the case, we need to include headers that provide the functions\r\n// mentioned above.\r\n# include <unistd.h>\r\n# include <strings.h>\r\n#endif  // GTEST_OS_WINDOWS\r\n\r\n#if GTEST_OS_LINUX_ANDROID\r\n// Used to define __ANDROID_API__ matching the target NDK API level.\r\n#  include <android/api-level.h>  // NOLINT\r\n#endif\r\n\r\n// Defines this to true if and only if Google Test can use POSIX regular\r\n// expressions.\r\n#ifndef GTEST_HAS_POSIX_RE\r\n# if GTEST_OS_LINUX_ANDROID\r\n// On Android, <regex.h> is only available starting with Gingerbread.\r\n#  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)\r\n# else\r\n#  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)\r\n# endif\r\n#endif\r\n\r\n#if GTEST_USES_PCRE\r\n// The appropriate headers have already been included.\r\n\r\n#elif GTEST_HAS_POSIX_RE\r\n\r\n// On some platforms, <regex.h> needs someone to define size_t, and\r\n// won't compile otherwise.  We can #include it here as we already\r\n// included <stdlib.h>, which is guaranteed to define size_t through\r\n// <stddef.h>.\r\n# include <regex.h>  // NOLINT\r\n\r\n# define GTEST_USES_POSIX_RE 1\r\n\r\n#elif GTEST_OS_WINDOWS\r\n\r\n// <regex.h> is not available on Windows.  Use our own simple regex\r\n// implementation instead.\r\n# define GTEST_USES_SIMPLE_RE 1\r\n\r\n#else\r\n\r\n// <regex.h> may not be available on this platform.  Use our own\r\n// simple regex implementation instead.\r\n# define GTEST_USES_SIMPLE_RE 1\r\n\r\n#endif  // GTEST_USES_PCRE\r\n\r\n#ifndef GTEST_HAS_EXCEPTIONS\r\n// The user didn't tell us whether exceptions are enabled, so we need\r\n// to figure it out.\r\n# if defined(_MSC_VER) && defined(_CPPUNWIND)\r\n// MSVC defines _CPPUNWIND to 1 if and only if exceptions are enabled.\r\n#  define GTEST_HAS_EXCEPTIONS 1\r\n# elif defined(__BORLANDC__)\r\n// C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS\r\n// macro to enable exceptions, so we'll do the same.\r\n// Assumes that exceptions are enabled by default.\r\n#  ifndef _HAS_EXCEPTIONS\r\n#   define _HAS_EXCEPTIONS 1\r\n#  endif  // _HAS_EXCEPTIONS\r\n#  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS\r\n# elif defined(__clang__)\r\n// clang defines __EXCEPTIONS if and only if exceptions are enabled before clang\r\n// 220714, but if and only if cleanups are enabled after that. In Obj-C++ files,\r\n// there can be cleanups for ObjC exceptions which also need cleanups, even if\r\n// C++ exceptions are disabled. clang has __has_feature(cxx_exceptions) which\r\n// checks for C++ exceptions starting at clang r206352, but which checked for\r\n// cleanups prior to that. To reliably check for C++ exception availability with\r\n// clang, check for\r\n// __EXCEPTIONS && __has_feature(cxx_exceptions).\r\n#  define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))\r\n# elif defined(__GNUC__) && __EXCEPTIONS\r\n// gcc defines __EXCEPTIONS to 1 if and only if exceptions are enabled.\r\n#  define GTEST_HAS_EXCEPTIONS 1\r\n# elif defined(__SUNPRO_CC)\r\n// Sun Pro CC supports exceptions.  However, there is no compile-time way of\r\n// detecting whether they are enabled or not.  Therefore, we assume that\r\n// they are enabled unless the user tells us otherwise.\r\n#  define GTEST_HAS_EXCEPTIONS 1\r\n# elif defined(__IBMCPP__) && __EXCEPTIONS\r\n// xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.\r\n#  define GTEST_HAS_EXCEPTIONS 1\r\n# elif defined(__HP_aCC)\r\n// Error handling is in effect by default in HP aCC compiler. It has to\r\n// be turned of by +noeh compiler option if desired.\r\n#  define GTEST_HAS_EXCEPTIONS 1\r\n# else\r\n// For other compilers, we assume exceptions are disabled to be\r\n// conservative.\r\n#  define GTEST_HAS_EXCEPTIONS 0\r\n# endif  // defined(_MSC_VER) || defined(__BORLANDC__)\r\n#endif  // GTEST_HAS_EXCEPTIONS\r\n\r\n#ifndef GTEST_HAS_STD_WSTRING\r\n// The user didn't tell us whether ::std::wstring is available, so we need\r\n// to figure it out.\r\n// Cygwin 1.7 and below doesn't support ::std::wstring.\r\n// Solaris' libc++ doesn't support it either.  Android has\r\n// no support for it at least as recent as Froyo (2.2).\r\n#define GTEST_HAS_STD_WSTRING                                         \\\r\n  (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \\\r\n     GTEST_OS_HAIKU || GTEST_OS_ESP32 || GTEST_OS_ESP8266))\r\n\r\n#endif  // GTEST_HAS_STD_WSTRING\r\n\r\n// Determines whether RTTI is available.\r\n#ifndef GTEST_HAS_RTTI\r\n// The user didn't tell us whether RTTI is enabled, so we need to\r\n// figure it out.\r\n\r\n# ifdef _MSC_VER\r\n\r\n#ifdef _CPPRTTI  // MSVC defines this macro if and only if RTTI is enabled.\r\n#   define GTEST_HAS_RTTI 1\r\n#  else\r\n#   define GTEST_HAS_RTTI 0\r\n#  endif\r\n\r\n// Starting with version 4.3.2, gcc defines __GXX_RTTI if and only if RTTI is\r\n// enabled.\r\n# elif defined(__GNUC__)\r\n\r\n#  ifdef __GXX_RTTI\r\n// When building against STLport with the Android NDK and with\r\n// -frtti -fno-exceptions, the build fails at link time with undefined\r\n// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,\r\n// so disable RTTI when detected.\r\n#   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \\\r\n       !defined(__EXCEPTIONS)\r\n#    define GTEST_HAS_RTTI 0\r\n#   else\r\n#    define GTEST_HAS_RTTI 1\r\n#   endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS\r\n#  else\r\n#   define GTEST_HAS_RTTI 0\r\n#  endif  // __GXX_RTTI\r\n\r\n// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends\r\n// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the\r\n// first version with C++ support.\r\n# elif defined(__clang__)\r\n\r\n#  define GTEST_HAS_RTTI __has_feature(cxx_rtti)\r\n\r\n// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if\r\n// both the typeid and dynamic_cast features are present.\r\n# elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)\r\n\r\n#  ifdef __RTTI_ALL__\r\n#   define GTEST_HAS_RTTI 1\r\n#  else\r\n#   define GTEST_HAS_RTTI 0\r\n#  endif\r\n\r\n# else\r\n\r\n// For all other compilers, we assume RTTI is enabled.\r\n#  define GTEST_HAS_RTTI 1\r\n\r\n# endif  // _MSC_VER\r\n\r\n#endif  // GTEST_HAS_RTTI\r\n\r\n// It's this header's responsibility to #include <typeinfo> when RTTI\r\n// is enabled.\r\n#if GTEST_HAS_RTTI\r\n# include <typeinfo>\r\n#endif\r\n\r\n// Determines whether Google Test can use the pthreads library.\r\n#ifndef GTEST_HAS_PTHREAD\r\n// The user didn't tell us explicitly, so we make reasonable assumptions about\r\n// which platforms have pthreads support.\r\n//\r\n// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0\r\n// to your compiler flags.\r\n#define GTEST_HAS_PTHREAD                                                      \\\r\n  (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX ||          \\\r\n   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || \\\r\n   GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_OPENBSD ||          \\\r\n   GTEST_OS_HAIKU)\r\n#endif  // GTEST_HAS_PTHREAD\r\n\r\n#if GTEST_HAS_PTHREAD\r\n// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is\r\n// true.\r\n# include <pthread.h>  // NOLINT\r\n\r\n// For timespec and nanosleep, used below.\r\n# include <time.h>  // NOLINT\r\n#endif\r\n\r\n// Determines whether clone(2) is supported.\r\n// Usually it will only be available on Linux, excluding\r\n// Linux on the Itanium architecture.\r\n// Also see http://linux.die.net/man/2/clone.\r\n#ifndef GTEST_HAS_CLONE\r\n// The user didn't tell us, so we need to figure it out.\r\n\r\n# if GTEST_OS_LINUX && !defined(__ia64__)\r\n#  if GTEST_OS_LINUX_ANDROID\r\n// On Android, clone() became available at different API levels for each 32-bit\r\n// architecture.\r\n#    if defined(__LP64__) || \\\r\n        (defined(__arm__) && __ANDROID_API__ >= 9) || \\\r\n        (defined(__mips__) && __ANDROID_API__ >= 12) || \\\r\n        (defined(__i386__) && __ANDROID_API__ >= 17)\r\n#     define GTEST_HAS_CLONE 1\r\n#    else\r\n#     define GTEST_HAS_CLONE 0\r\n#    endif\r\n#  else\r\n#   define GTEST_HAS_CLONE 1\r\n#  endif\r\n# else\r\n#  define GTEST_HAS_CLONE 0\r\n# endif  // GTEST_OS_LINUX && !defined(__ia64__)\r\n\r\n#endif  // GTEST_HAS_CLONE\r\n\r\n// Determines whether to support stream redirection. This is used to test\r\n// output correctness and to implement death tests.\r\n#ifndef GTEST_HAS_STREAM_REDIRECTION\r\n// By default, we assume that stream redirection is supported on all\r\n// platforms except known mobile ones.\r\n#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \\\r\n    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266\r\n#  define GTEST_HAS_STREAM_REDIRECTION 0\r\n# else\r\n#  define GTEST_HAS_STREAM_REDIRECTION 1\r\n# endif  // !GTEST_OS_WINDOWS_MOBILE\r\n#endif  // GTEST_HAS_STREAM_REDIRECTION\r\n\r\n// Determines whether to support death tests.\r\n// pops up a dialog window that cannot be suppressed programmatically.\r\n#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||             \\\r\n     (GTEST_OS_MAC && !GTEST_OS_IOS) ||                                   \\\r\n     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER) || GTEST_OS_WINDOWS_MINGW ||  \\\r\n     GTEST_OS_AIX || GTEST_OS_HPUX || GTEST_OS_OPENBSD || GTEST_OS_QNX || \\\r\n     GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA ||           \\\r\n     GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_HAIKU)\r\n# define GTEST_HAS_DEATH_TEST 1\r\n#endif\r\n\r\n// Determines whether to support type-driven tests.\r\n\r\n// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,\r\n// Sun Pro CC, IBM Visual Age, and HP aCC support.\r\n#if defined(__GNUC__) || defined(_MSC_VER) || defined(__SUNPRO_CC) || \\\r\n    defined(__IBMCPP__) || defined(__HP_aCC)\r\n# define GTEST_HAS_TYPED_TEST 1\r\n# define GTEST_HAS_TYPED_TEST_P 1\r\n#endif\r\n\r\n// Determines whether the system compiler uses UTF-16 for encoding wide strings.\r\n#define GTEST_WIDE_STRING_USES_UTF16_ \\\r\n  (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_AIX || GTEST_OS_OS2)\r\n\r\n// Determines whether test results can be streamed to a socket.\r\n#if GTEST_OS_LINUX || GTEST_OS_GNU_KFREEBSD || GTEST_OS_DRAGONFLY || \\\r\n    GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_OPENBSD\r\n# define GTEST_CAN_STREAM_RESULTS_ 1\r\n#endif\r\n\r\n// Defines some utility macros.\r\n\r\n// The GNU compiler emits a warning if nested \"if\" statements are followed by\r\n// an \"else\" statement and braces are not used to explicitly disambiguate the\r\n// \"else\" binding.  This leads to problems with code like:\r\n//\r\n//   if (gate)\r\n//     ASSERT_*(condition) << \"Some message\";\r\n//\r\n// The \"switch (0) case 0:\" idiom is used to suppress this.\r\n#ifdef __INTEL_COMPILER\r\n# define GTEST_AMBIGUOUS_ELSE_BLOCKER_\r\n#else\r\n# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  // NOLINT\r\n#endif\r\n\r\n// Use this annotation at the end of a struct/class definition to\r\n// prevent the compiler from optimizing away instances that are never\r\n// used.  This is useful when all interesting logic happens inside the\r\n// c'tor and / or d'tor.  Example:\r\n//\r\n//   struct Foo {\r\n//     Foo() { ... }\r\n//   } GTEST_ATTRIBUTE_UNUSED_;\r\n//\r\n// Also use it after a variable or parameter declaration to tell the\r\n// compiler the variable/parameter does not have to be used.\r\n#if defined(__GNUC__) && !defined(COMPILER_ICC)\r\n# define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))\r\n#elif defined(__clang__)\r\n# if __has_attribute(unused)\r\n#  define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))\r\n# endif\r\n#endif\r\n#ifndef GTEST_ATTRIBUTE_UNUSED_\r\n# define GTEST_ATTRIBUTE_UNUSED_\r\n#endif\r\n\r\n// Use this annotation before a function that takes a printf format string.\r\n#if (defined(__GNUC__) || defined(__clang__)) && !defined(COMPILER_ICC)\r\n# if defined(__MINGW_PRINTF_FORMAT)\r\n// MinGW has two different printf implementations. Ensure the format macro\r\n// matches the selected implementation. See\r\n// https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.\r\n#  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\\r\n       __attribute__((__format__(__MINGW_PRINTF_FORMAT, string_index, \\\r\n                                 first_to_check)))\r\n# else\r\n#  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\\r\n       __attribute__((__format__(__printf__, string_index, first_to_check)))\r\n# endif\r\n#else\r\n# define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)\r\n#endif\r\n\r\n\r\n// A macro to disallow operator=\r\n// This should be used in the private: declarations for a class.\r\n#define GTEST_DISALLOW_ASSIGN_(type) \\\r\n  void operator=(type const &) = delete\r\n\r\n// A macro to disallow copy constructor and operator=\r\n// This should be used in the private: declarations for a class.\r\n#define GTEST_DISALLOW_COPY_AND_ASSIGN_(type) \\\r\n  type(type const &) = delete; \\\r\n  GTEST_DISALLOW_ASSIGN_(type)\r\n\r\n// Tell the compiler to warn about unused return values for functions declared\r\n// with this macro.  The macro should be used on function declarations\r\n// following the argument list:\r\n//\r\n//   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;\r\n#if defined(__GNUC__) && !defined(COMPILER_ICC)\r\n# define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))\r\n#else\r\n# define GTEST_MUST_USE_RESULT_\r\n#endif  // __GNUC__ && !COMPILER_ICC\r\n\r\n// MS C++ compiler emits warning when a conditional expression is compile time\r\n// constant. In some contexts this warning is false positive and needs to be\r\n// suppressed. Use the following two macros in such cases:\r\n//\r\n// GTEST_INTENTIONAL_CONST_COND_PUSH_()\r\n// while (true) {\r\n// GTEST_INTENTIONAL_CONST_COND_POP_()\r\n// }\r\n# define GTEST_INTENTIONAL_CONST_COND_PUSH_() \\\r\n    GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)\r\n# define GTEST_INTENTIONAL_CONST_COND_POP_() \\\r\n    GTEST_DISABLE_MSC_WARNINGS_POP_()\r\n\r\n// Determine whether the compiler supports Microsoft's Structured Error\r\n// Handling.  This is supported by several Windows compilers but generally\r\n// does not exist on any other system.\r\n#ifndef GTEST_HAS_SEH\r\n// The user didn't tell us, so we need to figure it out.\r\n\r\n# if defined(_MSC_VER) || defined(__BORLANDC__)\r\n// These two compilers are known to support SEH.\r\n#  define GTEST_HAS_SEH 1\r\n# else\r\n// Assume no SEH.\r\n#  define GTEST_HAS_SEH 0\r\n# endif\r\n\r\n#endif  // GTEST_HAS_SEH\r\n\r\n#ifndef GTEST_IS_THREADSAFE\r\n\r\n#define GTEST_IS_THREADSAFE                                                 \\\r\n  (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ ||                                     \\\r\n   (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) || \\\r\n   GTEST_HAS_PTHREAD)\r\n\r\n#endif  // GTEST_IS_THREADSAFE\r\n\r\n// GTEST_API_ qualifies all symbols that must be exported. The definitions below\r\n// are guarded by #ifndef to give embedders a chance to define GTEST_API_ in\r\n// gtest/internal/custom/gtest-port.h\r\n#ifndef GTEST_API_\r\n\r\n#ifdef _MSC_VER\r\n# if GTEST_LINKED_AS_SHARED_LIBRARY\r\n#  define GTEST_API_ __declspec(dllimport)\r\n# elif GTEST_CREATE_SHARED_LIBRARY\r\n#  define GTEST_API_ __declspec(dllexport)\r\n# endif\r\n#elif __GNUC__ >= 4 || defined(__clang__)\r\n# define GTEST_API_ __attribute__((visibility (\"default\")))\r\n#endif  // _MSC_VER\r\n\r\n#endif  // GTEST_API_\r\n\r\n#ifndef GTEST_API_\r\n# define GTEST_API_\r\n#endif  // GTEST_API_\r\n\r\n#ifndef GTEST_DEFAULT_DEATH_TEST_STYLE\r\n# define GTEST_DEFAULT_DEATH_TEST_STYLE  \"fast\"\r\n#endif  // GTEST_DEFAULT_DEATH_TEST_STYLE\r\n\r\n#ifdef __GNUC__\r\n// Ask the compiler to never inline a given function.\r\n# define GTEST_NO_INLINE_ __attribute__((noinline))\r\n#else\r\n# define GTEST_NO_INLINE_\r\n#endif\r\n\r\n// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.\r\n#if !defined(GTEST_HAS_CXXABI_H_)\r\n# if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))\r\n#  define GTEST_HAS_CXXABI_H_ 1\r\n# else\r\n#  define GTEST_HAS_CXXABI_H_ 0\r\n# endif\r\n#endif\r\n\r\n// A function level attribute to disable checking for use of uninitialized\r\n// memory when built with MemorySanitizer.\r\n#if defined(__clang__)\r\n# if __has_feature(memory_sanitizer)\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ \\\r\n       __attribute__((no_sanitize_memory))\r\n# else\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\r\n# endif  // __has_feature(memory_sanitizer)\r\n#else\r\n# define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_\r\n#endif  // __clang__\r\n\r\n// A function level attribute to disable AddressSanitizer instrumentation.\r\n#if defined(__clang__)\r\n# if __has_feature(address_sanitizer)\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \\\r\n       __attribute__((no_sanitize_address))\r\n# else\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\r\n# endif  // __has_feature(address_sanitizer)\r\n#else\r\n# define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\r\n#endif  // __clang__\r\n\r\n// A function level attribute to disable HWAddressSanitizer instrumentation.\r\n#if defined(__clang__)\r\n# if __has_feature(hwaddress_sanitizer)\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ \\\r\n       __attribute__((no_sanitize(\"hwaddress\")))\r\n# else\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_\r\n# endif  // __has_feature(hwaddress_sanitizer)\r\n#else\r\n# define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_\r\n#endif  // __clang__\r\n\r\n// A function level attribute to disable ThreadSanitizer instrumentation.\r\n#if defined(__clang__)\r\n# if __has_feature(thread_sanitizer)\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ \\\r\n       __attribute__((no_sanitize_thread))\r\n# else\r\n#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_\r\n# endif  // __has_feature(thread_sanitizer)\r\n#else\r\n# define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_\r\n#endif  // __clang__\r\n\r\nnamespace testing {\r\n\r\nclass Message;\r\n\r\n// Legacy imports for backwards compatibility.\r\n// New code should use std:: names directly.\r\nusing std::get;\r\nusing std::make_tuple;\r\nusing std::tuple;\r\nusing std::tuple_element;\r\nusing std::tuple_size;\r\n\r\nnamespace internal {\r\n\r\n// A secret type that Google Test users don't know about.  It has no\r\n// definition on purpose.  Therefore it's impossible to create a\r\n// Secret object, which is what we want.\r\nclass Secret;\r\n\r\n// The GTEST_COMPILE_ASSERT_ is a legacy macro used to verify that a compile\r\n// time expression is true (in new code, use static_assert instead). For\r\n// example, you could use it to verify the size of a static array:\r\n//\r\n//   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,\r\n//                         names_incorrect_size);\r\n//\r\n// The second argument to the macro must be a valid C++ identifier. If the\r\n// expression is false, compiler will issue an error containing this identifier.\r\n#define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)\r\n\r\n// A helper for suppressing warnings on constant condition.  It just\r\n// returns 'condition'.\r\nGTEST_API_ bool IsTrue(bool condition);\r\n\r\n// Defines RE.\r\n\r\n#if GTEST_USES_PCRE\r\n// if used, PCRE is injected by custom/gtest-port.h\r\n#elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE\r\n\r\n// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended\r\n// Regular Expression syntax.\r\nclass GTEST_API_ RE {\r\n public:\r\n  // A copy constructor is required by the Standard to initialize object\r\n  // references from r-values.\r\n  RE(const RE& other) { Init(other.pattern()); }\r\n\r\n  // Constructs an RE from a string.\r\n  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT\r\n\r\n  RE(const char* regex) { Init(regex); }  // NOLINT\r\n  ~RE();\r\n\r\n  // Returns the string representation of the regex.\r\n  const char* pattern() const { return pattern_; }\r\n\r\n  // FullMatch(str, re) returns true if and only if regular expression re\r\n  // matches the entire str.\r\n  // PartialMatch(str, re) returns true if and only if regular expression re\r\n  // matches a substring of str (including str itself).\r\n  static bool FullMatch(const ::std::string& str, const RE& re) {\r\n    return FullMatch(str.c_str(), re);\r\n  }\r\n  static bool PartialMatch(const ::std::string& str, const RE& re) {\r\n    return PartialMatch(str.c_str(), re);\r\n  }\r\n\r\n  static bool FullMatch(const char* str, const RE& re);\r\n  static bool PartialMatch(const char* str, const RE& re);\r\n\r\n private:\r\n  void Init(const char* regex);\r\n  const char* pattern_;\r\n  bool is_valid_;\r\n\r\n# if GTEST_USES_POSIX_RE\r\n\r\n  regex_t full_regex_;     // For FullMatch().\r\n  regex_t partial_regex_;  // For PartialMatch().\r\n\r\n# else  // GTEST_USES_SIMPLE_RE\r\n\r\n  const char* full_pattern_;  // For FullMatch();\r\n\r\n# endif\r\n\r\n  GTEST_DISALLOW_ASSIGN_(RE);\r\n};\r\n\r\n#endif  // GTEST_USES_PCRE\r\n\r\n// Formats a source file path and a line number as they would appear\r\n// in an error message from the compiler used to compile this code.\r\nGTEST_API_ ::std::string FormatFileLocation(const char* file, int line);\r\n\r\n// Formats a file location for compiler-independent XML output.\r\n// Although this function is not platform dependent, we put it next to\r\n// FormatFileLocation in order to contrast the two functions.\r\nGTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,\r\n                                                               int line);\r\n\r\n// Defines logging utilities:\r\n//   GTEST_LOG_(severity) - logs messages at the specified severity level. The\r\n//                          message itself is streamed into the macro.\r\n//   LogToStderr()  - directs all log messages to stderr.\r\n//   FlushInfoLog() - flushes informational log messages.\r\n\r\nenum GTestLogSeverity {\r\n  GTEST_INFO,\r\n  GTEST_WARNING,\r\n  GTEST_ERROR,\r\n  GTEST_FATAL\r\n};\r\n\r\n// Formats log entry severity, provides a stream object for streaming the\r\n// log message, and terminates the message with a newline when going out of\r\n// scope.\r\nclass GTEST_API_ GTestLog {\r\n public:\r\n  GTestLog(GTestLogSeverity severity, const char* file, int line);\r\n\r\n  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.\r\n  ~GTestLog();\r\n\r\n  ::std::ostream& GetStream() { return ::std::cerr; }\r\n\r\n private:\r\n  const GTestLogSeverity severity_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestLog);\r\n};\r\n\r\n#if !defined(GTEST_LOG_)\r\n\r\n# define GTEST_LOG_(severity) \\\r\n    ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \\\r\n                                  __FILE__, __LINE__).GetStream()\r\n\r\ninline void LogToStderr() {}\r\ninline void FlushInfoLog() { fflush(nullptr); }\r\n\r\n#endif  // !defined(GTEST_LOG_)\r\n\r\n#if !defined(GTEST_CHECK_)\r\n// INTERNAL IMPLEMENTATION - DO NOT USE.\r\n//\r\n// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition\r\n// is not satisfied.\r\n//  Synopsys:\r\n//    GTEST_CHECK_(boolean_condition);\r\n//     or\r\n//    GTEST_CHECK_(boolean_condition) << \"Additional message\";\r\n//\r\n//    This checks the condition and if the condition is not satisfied\r\n//    it prints message about the condition violation, including the\r\n//    condition itself, plus additional message streamed into it, if any,\r\n//    and then it aborts the program. It aborts the program irrespective of\r\n//    whether it is built in the debug mode or not.\r\n# define GTEST_CHECK_(condition) \\\r\n    GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\\r\n    if (::testing::internal::IsTrue(condition)) \\\r\n      ; \\\r\n    else \\\r\n      GTEST_LOG_(FATAL) << \"Condition \" #condition \" failed. \"\r\n#endif  // !defined(GTEST_CHECK_)\r\n\r\n// An all-mode assert to verify that the given POSIX-style function\r\n// call returns 0 (indicating success).  Known limitation: this\r\n// doesn't expand to a balanced 'if' statement, so enclose the macro\r\n// in {} if you need to use it as the only statement in an 'if'\r\n// branch.\r\n#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \\\r\n  if (const int gtest_error = (posix_call)) \\\r\n    GTEST_LOG_(FATAL) << #posix_call << \"failed with error \" \\\r\n                      << gtest_error\r\n\r\n// Transforms \"T\" into \"const T&\" according to standard reference collapsing\r\n// rules (this is only needed as a backport for C++98 compilers that do not\r\n// support reference collapsing). Specifically, it transforms:\r\n//\r\n//   char         ==> const char&\r\n//   const char   ==> const char&\r\n//   char&        ==> char&\r\n//   const char&  ==> const char&\r\n//\r\n// Note that the non-const reference will not have \"const\" added. This is\r\n// standard, and necessary so that \"T\" can always bind to \"const T&\".\r\ntemplate <typename T>\r\nstruct ConstRef { typedef const T& type; };\r\ntemplate <typename T>\r\nstruct ConstRef<T&> { typedef T& type; };\r\n\r\n// The argument T must depend on some template parameters.\r\n#define GTEST_REFERENCE_TO_CONST_(T) \\\r\n  typename ::testing::internal::ConstRef<T>::type\r\n\r\n// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.\r\n//\r\n// Use ImplicitCast_ as a safe version of static_cast for upcasting in\r\n// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a\r\n// const Foo*).  When you use ImplicitCast_, the compiler checks that\r\n// the cast is safe.  Such explicit ImplicitCast_s are necessary in\r\n// surprisingly many situations where C++ demands an exact type match\r\n// instead of an argument type convertable to a target type.\r\n//\r\n// The syntax for using ImplicitCast_ is the same as for static_cast:\r\n//\r\n//   ImplicitCast_<ToType>(expr)\r\n//\r\n// ImplicitCast_ would have been part of the C++ standard library,\r\n// but the proposal was submitted too late.  It will probably make\r\n// its way into the language in the future.\r\n//\r\n// This relatively ugly name is intentional. It prevents clashes with\r\n// similar functions users may have (e.g., implicit_cast). The internal\r\n// namespace alone is not enough because the function can be found by ADL.\r\ntemplate<typename To>\r\ninline To ImplicitCast_(To x) { return x; }\r\n\r\n// When you upcast (that is, cast a pointer from type Foo to type\r\n// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts\r\n// always succeed.  When you downcast (that is, cast a pointer from\r\n// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because\r\n// how do you know the pointer is really of type SubclassOfFoo?  It\r\n// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,\r\n// when you downcast, you should use this macro.  In debug mode, we\r\n// use dynamic_cast<> to double-check the downcast is legal (we die\r\n// if it's not).  In normal mode, we do the efficient static_cast<>\r\n// instead.  Thus, it's important to test in debug mode to make sure\r\n// the cast is legal!\r\n//    This is the only place in the code we should use dynamic_cast<>.\r\n// In particular, you SHOULDN'T be using dynamic_cast<> in order to\r\n// do RTTI (eg code like this:\r\n//    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);\r\n//    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);\r\n// You should design the code some other way not to need this.\r\n//\r\n// This relatively ugly name is intentional. It prevents clashes with\r\n// similar functions users may have (e.g., down_cast). The internal\r\n// namespace alone is not enough because the function can be found by ADL.\r\ntemplate<typename To, typename From>  // use like this: DownCast_<T*>(foo);\r\ninline To DownCast_(From* f) {  // so we only accept pointers\r\n  // Ensures that To is a sub-type of From *.  This test is here only\r\n  // for compile-time type checking, and has no overhead in an\r\n  // optimized build at run-time, as it will be optimized away\r\n  // completely.\r\n  GTEST_INTENTIONAL_CONST_COND_PUSH_()\r\n  if (false) {\r\n  GTEST_INTENTIONAL_CONST_COND_POP_()\r\n  const To to = nullptr;\r\n  ::testing::internal::ImplicitCast_<From*>(to);\r\n  }\r\n\r\n#if GTEST_HAS_RTTI\r\n  // RTTI: debug mode only!\r\n  GTEST_CHECK_(f == nullptr || dynamic_cast<To>(f) != nullptr);\r\n#endif\r\n  return static_cast<To>(f);\r\n}\r\n\r\n// Downcasts the pointer of type Base to Derived.\r\n// Derived must be a subclass of Base. The parameter MUST\r\n// point to a class of type Derived, not any subclass of it.\r\n// When RTTI is available, the function performs a runtime\r\n// check to enforce this.\r\ntemplate <class Derived, class Base>\r\nDerived* CheckedDowncastToActualType(Base* base) {\r\n#if GTEST_HAS_RTTI\r\n  GTEST_CHECK_(typeid(*base) == typeid(Derived));\r\n#endif\r\n\r\n#if GTEST_HAS_DOWNCAST_\r\n  return ::down_cast<Derived*>(base);\r\n#elif GTEST_HAS_RTTI\r\n  return dynamic_cast<Derived*>(base);  // NOLINT\r\n#else\r\n  return static_cast<Derived*>(base);  // Poor man's downcast.\r\n#endif\r\n}\r\n\r\n#if GTEST_HAS_STREAM_REDIRECTION\r\n\r\n// Defines the stderr capturer:\r\n//   CaptureStdout     - starts capturing stdout.\r\n//   GetCapturedStdout - stops capturing stdout and returns the captured string.\r\n//   CaptureStderr     - starts capturing stderr.\r\n//   GetCapturedStderr - stops capturing stderr and returns the captured string.\r\n//\r\nGTEST_API_ void CaptureStdout();\r\nGTEST_API_ std::string GetCapturedStdout();\r\nGTEST_API_ void CaptureStderr();\r\nGTEST_API_ std::string GetCapturedStderr();\r\n\r\n#endif  // GTEST_HAS_STREAM_REDIRECTION\r\n// Returns the size (in bytes) of a file.\r\nGTEST_API_ size_t GetFileSize(FILE* file);\r\n\r\n// Reads the entire content of a file as a string.\r\nGTEST_API_ std::string ReadEntireFile(FILE* file);\r\n\r\n// All command line arguments.\r\nGTEST_API_ std::vector<std::string> GetArgvs();\r\n\r\n#if GTEST_HAS_DEATH_TEST\r\n\r\nstd::vector<std::string> GetInjectableArgvs();\r\n// Deprecated: pass the args vector by value instead.\r\nvoid SetInjectableArgvs(const std::vector<std::string>* new_argvs);\r\nvoid SetInjectableArgvs(const std::vector<std::string>& new_argvs);\r\nvoid ClearInjectableArgvs();\r\n\r\n#endif  // GTEST_HAS_DEATH_TEST\r\n\r\n// Defines synchronization primitives.\r\n#if GTEST_IS_THREADSAFE\r\n# if GTEST_HAS_PTHREAD\r\n// Sleeps for (roughly) n milliseconds.  This function is only for testing\r\n// Google Test's own constructs.  Don't use it in user tests, either\r\n// directly or indirectly.\r\ninline void SleepMilliseconds(int n) {\r\n  const timespec time = {\r\n    0,                  // 0 seconds.\r\n    n * 1000L * 1000L,  // And n ms.\r\n  };\r\n  nanosleep(&time, nullptr);\r\n}\r\n# endif  // GTEST_HAS_PTHREAD\r\n\r\n# if GTEST_HAS_NOTIFICATION_\r\n// Notification has already been imported into the namespace.\r\n// Nothing to do here.\r\n\r\n# elif GTEST_HAS_PTHREAD\r\n// Allows a controller thread to pause execution of newly created\r\n// threads until notified.  Instances of this class must be created\r\n// and destroyed in the controller thread.\r\n//\r\n// This class is only for testing Google Test's own constructs. Do not\r\n// use it in user tests, either directly or indirectly.\r\nclass Notification {\r\n public:\r\n  Notification() : notified_(false) {\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));\r\n  }\r\n  ~Notification() {\r\n    pthread_mutex_destroy(&mutex_);\r\n  }\r\n\r\n  // Notifies all threads created with this notification to start. Must\r\n  // be called from the controller thread.\r\n  void Notify() {\r\n    pthread_mutex_lock(&mutex_);\r\n    notified_ = true;\r\n    pthread_mutex_unlock(&mutex_);\r\n  }\r\n\r\n  // Blocks until the controller thread notifies. Must be called from a test\r\n  // thread.\r\n  void WaitForNotification() {\r\n    for (;;) {\r\n      pthread_mutex_lock(&mutex_);\r\n      const bool notified = notified_;\r\n      pthread_mutex_unlock(&mutex_);\r\n      if (notified)\r\n        break;\r\n      SleepMilliseconds(10);\r\n    }\r\n  }\r\n\r\n private:\r\n  pthread_mutex_t mutex_;\r\n  bool notified_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);\r\n};\r\n\r\n# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT\r\n\r\nGTEST_API_ void SleepMilliseconds(int n);\r\n\r\n// Provides leak-safe Windows kernel handle ownership.\r\n// Used in death tests and in threading support.\r\nclass GTEST_API_ AutoHandle {\r\n public:\r\n  // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to\r\n  // avoid including <windows.h> in this header file. Including <windows.h> is\r\n  // undesirable because it defines a lot of symbols and macros that tend to\r\n  // conflict with client code. This assumption is verified by\r\n  // WindowsTypesTest.HANDLEIsVoidStar.\r\n  typedef void* Handle;\r\n  AutoHandle();\r\n  explicit AutoHandle(Handle handle);\r\n\r\n  ~AutoHandle();\r\n\r\n  Handle Get() const;\r\n  void Reset();\r\n  void Reset(Handle handle);\r\n\r\n private:\r\n  // Returns true if and only if the handle is a valid handle object that can be\r\n  // closed.\r\n  bool IsCloseable() const;\r\n\r\n  Handle handle_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(AutoHandle);\r\n};\r\n\r\n// Allows a controller thread to pause execution of newly created\r\n// threads until notified.  Instances of this class must be created\r\n// and destroyed in the controller thread.\r\n//\r\n// This class is only for testing Google Test's own constructs. Do not\r\n// use it in user tests, either directly or indirectly.\r\nclass GTEST_API_ Notification {\r\n public:\r\n  Notification();\r\n  void Notify();\r\n  void WaitForNotification();\r\n\r\n private:\r\n  AutoHandle event_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);\r\n};\r\n# endif  // GTEST_HAS_NOTIFICATION_\r\n\r\n// On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD\r\n// defined, but we don't want to use MinGW's pthreads implementation, which\r\n// has conformance problems with some versions of the POSIX standard.\r\n# if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW\r\n\r\n// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.\r\n// Consequently, it cannot select a correct instantiation of ThreadWithParam\r\n// in order to call its Run(). Introducing ThreadWithParamBase as a\r\n// non-templated base class for ThreadWithParam allows us to bypass this\r\n// problem.\r\nclass ThreadWithParamBase {\r\n public:\r\n  virtual ~ThreadWithParamBase() {}\r\n  virtual void Run() = 0;\r\n};\r\n\r\n// pthread_create() accepts a pointer to a function type with the C linkage.\r\n// According to the Standard (7.5/1), function types with different linkages\r\n// are different even if they are otherwise identical.  Some compilers (for\r\n// example, SunStudio) treat them as different types.  Since class methods\r\n// cannot be defined with C-linkage we need to define a free C-function to\r\n// pass into pthread_create().\r\nextern \"C\" inline void* ThreadFuncWithCLinkage(void* thread) {\r\n  static_cast<ThreadWithParamBase*>(thread)->Run();\r\n  return nullptr;\r\n}\r\n\r\n// Helper class for testing Google Test's multi-threading constructs.\r\n// To use it, write:\r\n//\r\n//   void ThreadFunc(int param) { /* Do things with param */ }\r\n//   Notification thread_can_start;\r\n//   ...\r\n//   // The thread_can_start parameter is optional; you can supply NULL.\r\n//   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);\r\n//   thread_can_start.Notify();\r\n//\r\n// These classes are only for testing Google Test's own constructs. Do\r\n// not use them in user tests, either directly or indirectly.\r\ntemplate <typename T>\r\nclass ThreadWithParam : public ThreadWithParamBase {\r\n public:\r\n  typedef void UserThreadFunc(T);\r\n\r\n  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\r\n      : func_(func),\r\n        param_(param),\r\n        thread_can_start_(thread_can_start),\r\n        finished_(false) {\r\n    ThreadWithParamBase* const base = this;\r\n    // The thread can be created only after all fields except thread_\r\n    // have been initialized.\r\n    GTEST_CHECK_POSIX_SUCCESS_(\r\n        pthread_create(&thread_, nullptr, &ThreadFuncWithCLinkage, base));\r\n  }\r\n  ~ThreadWithParam() override { Join(); }\r\n\r\n  void Join() {\r\n    if (!finished_) {\r\n      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, nullptr));\r\n      finished_ = true;\r\n    }\r\n  }\r\n\r\n  void Run() override {\r\n    if (thread_can_start_ != nullptr) thread_can_start_->WaitForNotification();\r\n    func_(param_);\r\n  }\r\n\r\n private:\r\n  UserThreadFunc* const func_;  // User-supplied thread function.\r\n  const T param_;  // User-supplied parameter to the thread function.\r\n  // When non-NULL, used to block execution until the controller thread\r\n  // notifies.\r\n  Notification* const thread_can_start_;\r\n  bool finished_;  // true if and only if we know that the thread function has\r\n                   // finished.\r\n  pthread_t thread_;  // The native thread object.\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);\r\n};\r\n# endif  // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||\r\n         // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_\r\n\r\n# if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_\r\n// Mutex and ThreadLocal have already been imported into the namespace.\r\n// Nothing to do here.\r\n\r\n# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT\r\n\r\n// Mutex implements mutex on Windows platforms.  It is used in conjunction\r\n// with class MutexLock:\r\n//\r\n//   Mutex mutex;\r\n//   ...\r\n//   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the\r\n//                            // end of the current scope.\r\n//\r\n// A static Mutex *must* be defined or declared using one of the following\r\n// macros:\r\n//   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);\r\n//   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);\r\n//\r\n// (A non-static Mutex is defined/declared in the usual way).\r\nclass GTEST_API_ Mutex {\r\n public:\r\n  enum MutexType { kStatic = 0, kDynamic = 1 };\r\n  // We rely on kStaticMutex being 0 as it is to what the linker initializes\r\n  // type_ in static mutexes.  critical_section_ will be initialized lazily\r\n  // in ThreadSafeLazyInit().\r\n  enum StaticConstructorSelector { kStaticMutex = 0 };\r\n\r\n  // This constructor intentionally does nothing.  It relies on type_ being\r\n  // statically initialized to 0 (effectively setting it to kStatic) and on\r\n  // ThreadSafeLazyInit() to lazily initialize the rest of the members.\r\n  explicit Mutex(StaticConstructorSelector /*dummy*/) {}\r\n\r\n  Mutex();\r\n  ~Mutex();\r\n\r\n  void Lock();\r\n\r\n  void Unlock();\r\n\r\n  // Does nothing if the current thread holds the mutex. Otherwise, crashes\r\n  // with high probability.\r\n  void AssertHeld();\r\n\r\n private:\r\n  // Initializes owner_thread_id_ and critical_section_ in static mutexes.\r\n  void ThreadSafeLazyInit();\r\n\r\n  // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,\r\n  // we assume that 0 is an invalid value for thread IDs.\r\n  unsigned int owner_thread_id_;\r\n\r\n  // For static mutexes, we rely on these members being initialized to zeros\r\n  // by the linker.\r\n  MutexType type_;\r\n  long critical_section_init_phase_;  // NOLINT\r\n  GTEST_CRITICAL_SECTION* critical_section_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);\r\n};\r\n\r\n# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\\r\n    extern ::testing::internal::Mutex mutex\r\n\r\n# define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\\r\n    ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)\r\n\r\n// We cannot name this class MutexLock because the ctor declaration would\r\n// conflict with a macro named MutexLock, which is defined on some\r\n// platforms. That macro is used as a defensive measure to prevent against\r\n// inadvertent misuses of MutexLock like \"MutexLock(&mu)\" rather than\r\n// \"MutexLock l(&mu)\".  Hence the typedef trick below.\r\nclass GTestMutexLock {\r\n public:\r\n  explicit GTestMutexLock(Mutex* mutex)\r\n      : mutex_(mutex) { mutex_->Lock(); }\r\n\r\n  ~GTestMutexLock() { mutex_->Unlock(); }\r\n\r\n private:\r\n  Mutex* const mutex_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);\r\n};\r\n\r\ntypedef GTestMutexLock MutexLock;\r\n\r\n// Base class for ValueHolder<T>.  Allows a caller to hold and delete a value\r\n// without knowing its type.\r\nclass ThreadLocalValueHolderBase {\r\n public:\r\n  virtual ~ThreadLocalValueHolderBase() {}\r\n};\r\n\r\n// Provides a way for a thread to send notifications to a ThreadLocal\r\n// regardless of its parameter type.\r\nclass ThreadLocalBase {\r\n public:\r\n  // Creates a new ValueHolder<T> object holding a default value passed to\r\n  // this ThreadLocal<T>'s constructor and returns it.  It is the caller's\r\n  // responsibility not to call this when the ThreadLocal<T> instance already\r\n  // has a value on the current thread.\r\n  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;\r\n\r\n protected:\r\n  ThreadLocalBase() {}\r\n  virtual ~ThreadLocalBase() {}\r\n\r\n private:\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocalBase);\r\n};\r\n\r\n// Maps a thread to a set of ThreadLocals that have values instantiated on that\r\n// thread and notifies them when the thread exits.  A ThreadLocal instance is\r\n// expected to persist until all threads it has values on have terminated.\r\nclass GTEST_API_ ThreadLocalRegistry {\r\n public:\r\n  // Registers thread_local_instance as having value on the current thread.\r\n  // Returns a value that can be used to identify the thread from other threads.\r\n  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(\r\n      const ThreadLocalBase* thread_local_instance);\r\n\r\n  // Invoked when a ThreadLocal instance is destroyed.\r\n  static void OnThreadLocalDestroyed(\r\n      const ThreadLocalBase* thread_local_instance);\r\n};\r\n\r\nclass GTEST_API_ ThreadWithParamBase {\r\n public:\r\n  void Join();\r\n\r\n protected:\r\n  class Runnable {\r\n   public:\r\n    virtual ~Runnable() {}\r\n    virtual void Run() = 0;\r\n  };\r\n\r\n  ThreadWithParamBase(Runnable *runnable, Notification* thread_can_start);\r\n  virtual ~ThreadWithParamBase();\r\n\r\n private:\r\n  AutoHandle thread_;\r\n};\r\n\r\n// Helper class for testing Google Test's multi-threading constructs.\r\ntemplate <typename T>\r\nclass ThreadWithParam : public ThreadWithParamBase {\r\n public:\r\n  typedef void UserThreadFunc(T);\r\n\r\n  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\r\n      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {\r\n  }\r\n  virtual ~ThreadWithParam() {}\r\n\r\n private:\r\n  class RunnableImpl : public Runnable {\r\n   public:\r\n    RunnableImpl(UserThreadFunc* func, T param)\r\n        : func_(func),\r\n          param_(param) {\r\n    }\r\n    virtual ~RunnableImpl() {}\r\n    virtual void Run() {\r\n      func_(param_);\r\n    }\r\n\r\n   private:\r\n    UserThreadFunc* const func_;\r\n    const T param_;\r\n\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(RunnableImpl);\r\n  };\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);\r\n};\r\n\r\n// Implements thread-local storage on Windows systems.\r\n//\r\n//   // Thread 1\r\n//   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.\r\n//\r\n//   // Thread 2\r\n//   tl.set(150);  // Changes the value for thread 2 only.\r\n//   EXPECT_EQ(150, tl.get());\r\n//\r\n//   // Thread 1\r\n//   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.\r\n//   tl.set(200);\r\n//   EXPECT_EQ(200, tl.get());\r\n//\r\n// The template type argument T must have a public copy constructor.\r\n// In addition, the default ThreadLocal constructor requires T to have\r\n// a public default constructor.\r\n//\r\n// The users of a TheadLocal instance have to make sure that all but one\r\n// threads (including the main one) using that instance have exited before\r\n// destroying it. Otherwise, the per-thread objects managed for them by the\r\n// ThreadLocal instance are not guaranteed to be destroyed on all platforms.\r\n//\r\n// Google Test only uses global ThreadLocal objects.  That means they\r\n// will die after main() has returned.  Therefore, no per-thread\r\n// object managed by Google Test will be leaked as long as all threads\r\n// using Google Test have exited when main() returns.\r\ntemplate <typename T>\r\nclass ThreadLocal : public ThreadLocalBase {\r\n public:\r\n  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}\r\n  explicit ThreadLocal(const T& value)\r\n      : default_factory_(new InstanceValueHolderFactory(value)) {}\r\n\r\n  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }\r\n\r\n  T* pointer() { return GetOrCreateValue(); }\r\n  const T* pointer() const { return GetOrCreateValue(); }\r\n  const T& get() const { return *pointer(); }\r\n  void set(const T& value) { *pointer() = value; }\r\n\r\n private:\r\n  // Holds a value of T.  Can be deleted via its base class without the caller\r\n  // knowing the type of T.\r\n  class ValueHolder : public ThreadLocalValueHolderBase {\r\n   public:\r\n    ValueHolder() : value_() {}\r\n    explicit ValueHolder(const T& value) : value_(value) {}\r\n\r\n    T* pointer() { return &value_; }\r\n\r\n   private:\r\n    T value_;\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);\r\n  };\r\n\r\n\r\n  T* GetOrCreateValue() const {\r\n    return static_cast<ValueHolder*>(\r\n        ThreadLocalRegistry::GetValueOnCurrentThread(this))->pointer();\r\n  }\r\n\r\n  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {\r\n    return default_factory_->MakeNewHolder();\r\n  }\r\n\r\n  class ValueHolderFactory {\r\n   public:\r\n    ValueHolderFactory() {}\r\n    virtual ~ValueHolderFactory() {}\r\n    virtual ValueHolder* MakeNewHolder() const = 0;\r\n\r\n   private:\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);\r\n  };\r\n\r\n  class DefaultValueHolderFactory : public ValueHolderFactory {\r\n   public:\r\n    DefaultValueHolderFactory() {}\r\n    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }\r\n\r\n   private:\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);\r\n  };\r\n\r\n  class InstanceValueHolderFactory : public ValueHolderFactory {\r\n   public:\r\n    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}\r\n    ValueHolder* MakeNewHolder() const override {\r\n      return new ValueHolder(value_);\r\n    }\r\n\r\n   private:\r\n    const T value_;  // The value for each thread.\r\n\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);\r\n  };\r\n\r\n  std::unique_ptr<ValueHolderFactory> default_factory_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);\r\n};\r\n\r\n# elif GTEST_HAS_PTHREAD\r\n\r\n// MutexBase and Mutex implement mutex on pthreads-based platforms.\r\nclass MutexBase {\r\n public:\r\n  // Acquires this mutex.\r\n  void Lock() {\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));\r\n    owner_ = pthread_self();\r\n    has_owner_ = true;\r\n  }\r\n\r\n  // Releases this mutex.\r\n  void Unlock() {\r\n    // Since the lock is being released the owner_ field should no longer be\r\n    // considered valid. We don't protect writing to has_owner_ here, as it's\r\n    // the caller's responsibility to ensure that the current thread holds the\r\n    // mutex when this is called.\r\n    has_owner_ = false;\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));\r\n  }\r\n\r\n  // Does nothing if the current thread holds the mutex. Otherwise, crashes\r\n  // with high probability.\r\n  void AssertHeld() const {\r\n    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))\r\n        << \"The current thread is not holding the mutex @\" << this;\r\n  }\r\n\r\n  // A static mutex may be used before main() is entered.  It may even\r\n  // be used before the dynamic initialization stage.  Therefore we\r\n  // must be able to initialize a static mutex object at link time.\r\n  // This means MutexBase has to be a POD and its member variables\r\n  // have to be public.\r\n public:\r\n  pthread_mutex_t mutex_;  // The underlying pthread mutex.\r\n  // has_owner_ indicates whether the owner_ field below contains a valid thread\r\n  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All\r\n  // accesses to the owner_ field should be protected by a check of this field.\r\n  // An alternative might be to memset() owner_ to all zeros, but there's no\r\n  // guarantee that a zero'd pthread_t is necessarily invalid or even different\r\n  // from pthread_self().\r\n  bool has_owner_;\r\n  pthread_t owner_;  // The thread holding the mutex.\r\n};\r\n\r\n// Forward-declares a static mutex.\r\n#  define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\\r\n     extern ::testing::internal::MutexBase mutex\r\n\r\n// Defines and statically (i.e. at link time) initializes a static mutex.\r\n// The initialization list here does not explicitly initialize each field,\r\n// instead relying on default initialization for the unspecified fields. In\r\n// particular, the owner_ field (a pthread_t) is not explicitly initialized.\r\n// This allows initialization to work whether pthread_t is a scalar or struct.\r\n// The flag -Wmissing-field-initializers must not be specified for this to work.\r\n#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\\r\n  ::testing::internal::MutexBase mutex = {PTHREAD_MUTEX_INITIALIZER, false, 0}\r\n\r\n// The Mutex class can only be used for mutexes created at runtime. It\r\n// shares its API with MutexBase otherwise.\r\nclass Mutex : public MutexBase {\r\n public:\r\n  Mutex() {\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));\r\n    has_owner_ = false;\r\n  }\r\n  ~Mutex() {\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_));\r\n  }\r\n\r\n private:\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);\r\n};\r\n\r\n// We cannot name this class MutexLock because the ctor declaration would\r\n// conflict with a macro named MutexLock, which is defined on some\r\n// platforms. That macro is used as a defensive measure to prevent against\r\n// inadvertent misuses of MutexLock like \"MutexLock(&mu)\" rather than\r\n// \"MutexLock l(&mu)\".  Hence the typedef trick below.\r\nclass GTestMutexLock {\r\n public:\r\n  explicit GTestMutexLock(MutexBase* mutex)\r\n      : mutex_(mutex) { mutex_->Lock(); }\r\n\r\n  ~GTestMutexLock() { mutex_->Unlock(); }\r\n\r\n private:\r\n  MutexBase* const mutex_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);\r\n};\r\n\r\ntypedef GTestMutexLock MutexLock;\r\n\r\n// Helpers for ThreadLocal.\r\n\r\n// pthread_key_create() requires DeleteThreadLocalValue() to have\r\n// C-linkage.  Therefore it cannot be templatized to access\r\n// ThreadLocal<T>.  Hence the need for class\r\n// ThreadLocalValueHolderBase.\r\nclass ThreadLocalValueHolderBase {\r\n public:\r\n  virtual ~ThreadLocalValueHolderBase() {}\r\n};\r\n\r\n// Called by pthread to delete thread-local data stored by\r\n// pthread_setspecific().\r\nextern \"C\" inline void DeleteThreadLocalValue(void* value_holder) {\r\n  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);\r\n}\r\n\r\n// Implements thread-local storage on pthreads-based systems.\r\ntemplate <typename T>\r\nclass GTEST_API_ ThreadLocal {\r\n public:\r\n  ThreadLocal()\r\n      : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) {}\r\n  explicit ThreadLocal(const T& value)\r\n      : key_(CreateKey()),\r\n        default_factory_(new InstanceValueHolderFactory(value)) {}\r\n\r\n  ~ThreadLocal() {\r\n    // Destroys the managed object for the current thread, if any.\r\n    DeleteThreadLocalValue(pthread_getspecific(key_));\r\n\r\n    // Releases resources associated with the key.  This will *not*\r\n    // delete managed objects for other threads.\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));\r\n  }\r\n\r\n  T* pointer() { return GetOrCreateValue(); }\r\n  const T* pointer() const { return GetOrCreateValue(); }\r\n  const T& get() const { return *pointer(); }\r\n  void set(const T& value) { *pointer() = value; }\r\n\r\n private:\r\n  // Holds a value of type T.\r\n  class ValueHolder : public ThreadLocalValueHolderBase {\r\n   public:\r\n    ValueHolder() : value_() {}\r\n    explicit ValueHolder(const T& value) : value_(value) {}\r\n\r\n    T* pointer() { return &value_; }\r\n\r\n   private:\r\n    T value_;\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);\r\n  };\r\n\r\n  static pthread_key_t CreateKey() {\r\n    pthread_key_t key;\r\n    // When a thread exits, DeleteThreadLocalValue() will be called on\r\n    // the object managed for that thread.\r\n    GTEST_CHECK_POSIX_SUCCESS_(\r\n        pthread_key_create(&key, &DeleteThreadLocalValue));\r\n    return key;\r\n  }\r\n\r\n  T* GetOrCreateValue() const {\r\n    ThreadLocalValueHolderBase* const holder =\r\n        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));\r\n    if (holder != nullptr) {\r\n      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();\r\n    }\r\n\r\n    ValueHolder* const new_holder = default_factory_->MakeNewHolder();\r\n    ThreadLocalValueHolderBase* const holder_base = new_holder;\r\n    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));\r\n    return new_holder->pointer();\r\n  }\r\n\r\n  class ValueHolderFactory {\r\n   public:\r\n    ValueHolderFactory() {}\r\n    virtual ~ValueHolderFactory() {}\r\n    virtual ValueHolder* MakeNewHolder() const = 0;\r\n\r\n   private:\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);\r\n  };\r\n\r\n  class DefaultValueHolderFactory : public ValueHolderFactory {\r\n   public:\r\n    DefaultValueHolderFactory() {}\r\n    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }\r\n\r\n   private:\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);\r\n  };\r\n\r\n  class InstanceValueHolderFactory : public ValueHolderFactory {\r\n   public:\r\n    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}\r\n    ValueHolder* MakeNewHolder() const override {\r\n      return new ValueHolder(value_);\r\n    }\r\n\r\n   private:\r\n    const T value_;  // The value for each thread.\r\n\r\n    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);\r\n  };\r\n\r\n  // A key pthreads uses for looking up per-thread values.\r\n  const pthread_key_t key_;\r\n  std::unique_ptr<ValueHolderFactory> default_factory_;\r\n\r\n  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);\r\n};\r\n\r\n# endif  // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_\r\n\r\n#else  // GTEST_IS_THREADSAFE\r\n\r\n// A dummy implementation of synchronization primitives (mutex, lock,\r\n// and thread-local variable).  Necessary for compiling Google Test where\r\n// mutex is not supported - using Google Test in multiple threads is not\r\n// supported on such platforms.\r\n\r\nclass Mutex {\r\n public:\r\n  Mutex() {}\r\n  void Lock() {}\r\n  void Unlock() {}\r\n  void AssertHeld() const {}\r\n};\r\n\r\n# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\\r\n  extern ::testing::internal::Mutex mutex\r\n\r\n# define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex\r\n\r\n// We cannot name this class MutexLock because the ctor declaration would\r\n// conflict with a macro named MutexLock, which is defined on some\r\n// platforms. That macro is used as a defensive measure to prevent against\r\n// inadvertent misuses of MutexLock like \"MutexLock(&mu)\" rather than\r\n// \"MutexLock l(&mu)\".  Hence the typedef trick below.\r\nclass GTestMutexLock {\r\n public:\r\n  explicit GTestMutexLock(Mutex*) {}  // NOLINT\r\n};\r\n\r\ntypedef GTestMutexLock MutexLock;\r\n\r\ntemplate <typename T>\r\nclass GTEST_API_ ThreadLocal {\r\n public:\r\n  ThreadLocal() : value_() {}\r\n  explicit ThreadLocal(const T& value) : value_(value) {}\r\n  T* pointer() { return &value_; }\r\n  const T* pointer() const { return &value_; }\r\n  const T& get() const { return value_; }\r\n  void set(const T& value) { value_ = value; }\r\n private:\r\n  T value_;\r\n};\r\n\r\n#endif  // GTEST_IS_THREADSAFE\r\n\r\n// Returns the number of threads running in the process, or 0 to indicate that\r\n// we cannot detect it.\r\nGTEST_API_ size_t GetThreadCount();\r\n\r\n#if GTEST_OS_WINDOWS\r\n# define GTEST_PATH_SEP_ \"\\\\\"\r\n# define GTEST_HAS_ALT_PATH_SEP_ 1\r\n#else\r\n# define GTEST_PATH_SEP_ \"/\"\r\n# define GTEST_HAS_ALT_PATH_SEP_ 0\r\n#endif  // GTEST_OS_WINDOWS\r\n\r\n// Utilities for char.\r\n\r\n// isspace(int ch) and friends accept an unsigned char or EOF.  char\r\n// may be signed, depending on the compiler (or compiler flags).\r\n// Therefore we need to cast a char to unsigned char before calling\r\n// isspace(), etc.\r\n\r\ninline bool IsAlpha(char ch) {\r\n  return isalpha(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsAlNum(char ch) {\r\n  return isalnum(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsDigit(char ch) {\r\n  return isdigit(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsLower(char ch) {\r\n  return islower(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsSpace(char ch) {\r\n  return isspace(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsUpper(char ch) {\r\n  return isupper(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsXDigit(char ch) {\r\n  return isxdigit(static_cast<unsigned char>(ch)) != 0;\r\n}\r\ninline bool IsXDigit(wchar_t ch) {\r\n  const unsigned char low_byte = static_cast<unsigned char>(ch);\r\n  return ch == low_byte && isxdigit(low_byte) != 0;\r\n}\r\n\r\ninline char ToLower(char ch) {\r\n  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));\r\n}\r\ninline char ToUpper(char ch) {\r\n  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));\r\n}\r\n\r\ninline std::string StripTrailingSpaces(std::string str) {\r\n  std::string::iterator it = str.end();\r\n  while (it != str.begin() && IsSpace(*--it))\r\n    it = str.erase(it);\r\n  return str;\r\n}\r\n\r\n// The testing::internal::posix namespace holds wrappers for common\r\n// POSIX functions.  These wrappers hide the differences between\r\n// Windows/MSVC and POSIX systems.  Since some compilers define these\r\n// standard functions as macros, the wrapper cannot have the same name\r\n// as the wrapped function.\r\n\r\nnamespace posix {\r\n\r\n// Functions with a different name on Windows.\r\n\r\n#if GTEST_OS_WINDOWS\r\n\r\ntypedef struct _stat StatStruct;\r\n\r\n# ifdef __BORLANDC__\r\ninline int IsATTY(int fd) { return isatty(fd); }\r\ninline int StrCaseCmp(const char* s1, const char* s2) {\r\n  return stricmp(s1, s2);\r\n}\r\ninline char* StrDup(const char* src) { return strdup(src); }\r\n# else  // !__BORLANDC__\r\n#  if GTEST_OS_WINDOWS_MOBILE\r\ninline int IsATTY(int /* fd */) { return 0; }\r\n#  else\r\ninline int IsATTY(int fd) { return _isatty(fd); }\r\n#  endif  // GTEST_OS_WINDOWS_MOBILE\r\ninline int StrCaseCmp(const char* s1, const char* s2) {\r\n  return _stricmp(s1, s2);\r\n}\r\ninline char* StrDup(const char* src) { return _strdup(src); }\r\n# endif  // __BORLANDC__\r\n\r\n# if GTEST_OS_WINDOWS_MOBILE\r\ninline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }\r\n// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this\r\n// time and thus not defined there.\r\n# else\r\ninline int FileNo(FILE* file) { return _fileno(file); }\r\ninline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }\r\ninline int RmDir(const char* dir) { return _rmdir(dir); }\r\ninline bool IsDir(const StatStruct& st) {\r\n  return (_S_IFDIR & st.st_mode) != 0;\r\n}\r\n# endif  // GTEST_OS_WINDOWS_MOBILE\r\n\r\n#elif GTEST_OS_ESP8266\r\ntypedef struct stat StatStruct;\r\n\r\ninline int FileNo(FILE* file) { return fileno(file); }\r\ninline int IsATTY(int fd) { return isatty(fd); }\r\ninline int Stat(const char* path, StatStruct* buf) {\r\n  // stat function not implemented on ESP8266\r\n  return 0;\r\n}\r\ninline int StrCaseCmp(const char* s1, const char* s2) {\r\n  return strcasecmp(s1, s2);\r\n}\r\ninline char* StrDup(const char* src) { return strdup(src); }\r\ninline int RmDir(const char* dir) { return rmdir(dir); }\r\ninline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }\r\n\r\n#else\r\n\r\ntypedef struct stat StatStruct;\r\n\r\ninline int FileNo(FILE* file) { return fileno(file); }\r\ninline int IsATTY(int fd) { return isatty(fd); }\r\ninline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }\r\ninline int StrCaseCmp(const char* s1, const char* s2) {\r\n  return strcasecmp(s1, s2);\r\n}\r\ninline char* StrDup(const char* src) { return strdup(src); }\r\ninline int RmDir(const char* dir) { return rmdir(dir); }\r\ninline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }\r\n\r\n#endif  // GTEST_OS_WINDOWS\r\n\r\n// Functions deprecated by MSVC 8.0.\r\n\r\nGTEST_DISABLE_MSC_DEPRECATED_PUSH_()\r\n\r\n// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and\r\n// StrError() aren't needed on Windows CE at this time and thus not\r\n// defined there.\r\n\r\n#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT\r\ninline int ChDir(const char* dir) { return chdir(dir); }\r\n#endif\r\ninline FILE* FOpen(const char* path, const char* mode) {\r\n  return fopen(path, mode);\r\n}\r\n#if !GTEST_OS_WINDOWS_MOBILE\r\ninline FILE *FReopen(const char* path, const char* mode, FILE* stream) {\r\n  return freopen(path, mode, stream);\r\n}\r\ninline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }\r\n#endif\r\ninline int FClose(FILE* fp) { return fclose(fp); }\r\n#if !GTEST_OS_WINDOWS_MOBILE\r\ninline int Read(int fd, void* buf, unsigned int count) {\r\n  return static_cast<int>(read(fd, buf, count));\r\n}\r\ninline int Write(int fd, const void* buf, unsigned int count) {\r\n  return static_cast<int>(write(fd, buf, count));\r\n}\r\ninline int Close(int fd) { return close(fd); }\r\ninline const char* StrError(int errnum) { return strerror(errnum); }\r\n#endif\r\ninline const char* GetEnv(const char* name) {\r\n#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \\\r\n    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266\r\n  // We are on an embedded platform, which has no environment variables.\r\n  static_cast<void>(name);  // To prevent 'unused argument' warning.\r\n  return nullptr;\r\n#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\r\n  // Environment variables which we programmatically clear will be set to the\r\n  // empty string rather than unset (NULL).  Handle that case.\r\n  const char* const env = getenv(name);\r\n  return (env != nullptr && env[0] != '\\0') ? env : nullptr;\r\n#else\r\n  return getenv(name);\r\n#endif\r\n}\r\n\r\nGTEST_DISABLE_MSC_DEPRECATED_POP_()\r\n\r\n#if GTEST_OS_WINDOWS_MOBILE\r\n// Windows CE has no C library. The abort() function is used in\r\n// several places in Google Test. This implementation provides a reasonable\r\n// imitation of standard behaviour.\r\n[[noreturn]] void Abort();\r\n#else\r\n[[noreturn]] inline void Abort() { abort(); }\r\n#endif  // GTEST_OS_WINDOWS_MOBILE\r\n\r\n}  // namespace posix\r\n\r\n// MSVC \"deprecates\" snprintf and issues warnings wherever it is used.  In\r\n// order to avoid these warnings, we need to use _snprintf or _snprintf_s on\r\n// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate\r\n// function in order to achieve that.  We use macro definition here because\r\n// snprintf is a variadic function.\r\n#if _MSC_VER && !GTEST_OS_WINDOWS_MOBILE\r\n// MSVC 2005 and above support variadic macros.\r\n# define GTEST_SNPRINTF_(buffer, size, format, ...) \\\r\n     _snprintf_s(buffer, size, size, format, __VA_ARGS__)\r\n#elif defined(_MSC_VER)\r\n// Windows CE does not define _snprintf_s\r\n# define GTEST_SNPRINTF_ _snprintf\r\n#else\r\n# define GTEST_SNPRINTF_ snprintf\r\n#endif\r\n\r\n// The biggest signed integer type the compiler supports.\r\n//\r\n// long long is guaranteed to be at least 64-bits in C++11.\r\nusing BiggestInt = long long;  // NOLINT\r\n\r\n// The maximum number a BiggestInt can represent.\r\nconstexpr BiggestInt kMaxBiggestInt = (std::numeric_limits<BiggestInt>::max)();\r\n\r\n// This template class serves as a compile-time function from size to\r\n// type.  It maps a size in bytes to a primitive type with that\r\n// size. e.g.\r\n//\r\n//   TypeWithSize<4>::UInt\r\n//\r\n// is typedef-ed to be unsigned int (unsigned integer made up of 4\r\n// bytes).\r\n//\r\n// Such functionality should belong to STL, but I cannot find it\r\n// there.\r\n//\r\n// Google Test uses this class in the implementation of floating-point\r\n// comparison.\r\n//\r\n// For now it only handles UInt (unsigned int) as that's all Google Test\r\n// needs.  Other types can be easily added in the future if need\r\n// arises.\r\ntemplate <size_t size>\r\nclass TypeWithSize {\r\n public:\r\n  // This prevents the user from using TypeWithSize<N> with incorrect\r\n  // values of N.\r\n  using UInt = void;\r\n};\r\n\r\n// The specialization for size 4.\r\ntemplate <>\r\nclass TypeWithSize<4> {\r\n public:\r\n  using Int = std::int32_t;\r\n  using UInt = std::uint32_t;\r\n};\r\n\r\n// The specialization for size 8.\r\ntemplate <>\r\nclass TypeWithSize<8> {\r\n public:\r\n  using Int = std::int64_t;\r\n  using UInt = std::uint64_t;\r\n};\r\n\r\n// Integer types of known sizes.\r\nusing TimeInMillis = int64_t;  // Represents time in milliseconds.\r\n\r\n// Utilities for command line flags and environment variables.\r\n\r\n// Macro for referencing flags.\r\n#if !defined(GTEST_FLAG)\r\n# define GTEST_FLAG(name) FLAGS_gtest_##name\r\n#endif  // !defined(GTEST_FLAG)\r\n\r\n#if !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)\r\n# define GTEST_USE_OWN_FLAGFILE_FLAG_ 1\r\n#endif  // !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)\r\n\r\n#if !defined(GTEST_DECLARE_bool_)\r\n# define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver\r\n\r\n// Macros for declaring flags.\r\n# define GTEST_DECLARE_bool_(name) GTEST_API_ extern bool GTEST_FLAG(name)\r\n# define GTEST_DECLARE_int32_(name) \\\r\n    GTEST_API_ extern std::int32_t GTEST_FLAG(name)\r\n# define GTEST_DECLARE_string_(name) \\\r\n    GTEST_API_ extern ::std::string GTEST_FLAG(name)\r\n\r\n// Macros for defining flags.\r\n# define GTEST_DEFINE_bool_(name, default_val, doc) \\\r\n    GTEST_API_ bool GTEST_FLAG(name) = (default_val)\r\n# define GTEST_DEFINE_int32_(name, default_val, doc) \\\r\n    GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val)\r\n# define GTEST_DEFINE_string_(name, default_val, doc) \\\r\n    GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)\r\n\r\n#endif  // !defined(GTEST_DECLARE_bool_)\r\n\r\n// Thread annotations\r\n#if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)\r\n# define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)\r\n# define GTEST_LOCK_EXCLUDED_(locks)\r\n#endif  // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)\r\n\r\n// Parses 'str' for a 32-bit signed integer.  If successful, writes the result\r\n// to *value and returns true; otherwise leaves *value unchanged and returns\r\n// false.\r\nbool ParseInt32(const Message& src_text, const char* str, int32_t* value);\r\n\r\n// Parses a bool/int32_t/string from the environment variable\r\n// corresponding to the given Google Test flag.\r\nbool BoolFromGTestEnv(const char* flag, bool default_val);\r\nGTEST_API_ int32_t Int32FromGTestEnv(const char* flag, int32_t default_val);\r\nstd::string OutputFlagAlsoCheckEnvVar();\r\nconst char* StringFromGTestEnv(const char* flag, const char* default_val);\r\n\r\n}  // namespace internal\r\n}  // namespace testing\r\n\r\n#if !defined(GTEST_INTERNAL_DEPRECATED)\r\n\r\n// Internal Macro to mark an API deprecated, for googletest usage only\r\n// Usage: class GTEST_INTERNAL_DEPRECATED(message) MyClass or\r\n// GTEST_INTERNAL_DEPRECATED(message) <return_type> myFunction(); Every usage of\r\n// a deprecated entity will trigger a warning when compiled with\r\n// `-Wdeprecated-declarations` option (clang, gcc, any __GNUC__ compiler).\r\n// For msvc /W3 option will need to be used\r\n// Note that for 'other' compilers this macro evaluates to nothing to prevent\r\n// compilations errors.\r\n#if defined(_MSC_VER)\r\n#define GTEST_INTERNAL_DEPRECATED(message) __declspec(deprecated(message))\r\n#elif defined(__GNUC__)\r\n#define GTEST_INTERNAL_DEPRECATED(message) __attribute__((deprecated(message)))\r\n#else\r\n#define GTEST_INTERNAL_DEPRECATED(message)\r\n#endif\r\n\r\n#endif  // !defined(GTEST_INTERNAL_DEPRECATED)\r\n\r\n#endif  // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/lib/googletest/include/gtest/internal/gtest-port.h b/Test/lib/googletest/include/gtest/internal/gtest-port.h
--- a/Test/lib/googletest/include/gtest/internal/gtest-port.h	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/lib/googletest/include/gtest/internal/gtest-port.h	(date 1606989169096)
@@ -83,7 +83,7 @@
 //                              be used where std::wstring is unavailable).
 //   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
 //                              compiler supports Microsoft's "Structured
-//                              Error Handling".
+//                              AbstractError Handling".
 //   GTEST_HAS_STREAM_REDIRECTION
 //                            - Define it to 1/0 to indicate whether the
 //                              platform supports I/O stream redirection using
@@ -429,7 +429,7 @@
 // xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
 #  define GTEST_HAS_EXCEPTIONS 1
 # elif defined(__HP_aCC)
-// Error handling is in effect by default in HP aCC compiler. It has to
+// AbstractError handling is in effect by default in HP aCC compiler. It has to
 // be turned of by +noeh compiler option if desired.
 #  define GTEST_HAS_EXCEPTIONS 1
 # else
@@ -701,7 +701,7 @@
 # define GTEST_INTENTIONAL_CONST_COND_POP_() \
     GTEST_DISABLE_MSC_WARNINGS_POP_()
 
-// Determine whether the compiler supports Microsoft's Structured Error
+// Determine whether the compiler supports Microsoft's Structured AbstractError
 // Handling.  This is supported by several Windows compilers but generally
 // does not exist on any other system.
 #ifndef GTEST_HAS_SEH
Index: cmake-build-debug/cmake_install.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Install script for directory: /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo\n\n# Set the install prefix\nif(NOT DEFINED CMAKE_INSTALL_PREFIX)\n  set(CMAKE_INSTALL_PREFIX \"/usr/local\")\nendif()\nstring(REGEX REPLACE \"/$\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n\n# Set the install configuration name.\nif(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)\n  if(BUILD_TYPE)\n    string(REGEX REPLACE \"^[^A-Za-z0-9_]+\" \"\"\n           CMAKE_INSTALL_CONFIG_NAME \"${BUILD_TYPE}\")\n  else()\n    set(CMAKE_INSTALL_CONFIG_NAME \"Debug\")\n  endif()\n  message(STATUS \"Install configuration: \\\"${CMAKE_INSTALL_CONFIG_NAME}\\\"\")\nendif()\n\n# Set the component getting installed.\nif(NOT CMAKE_INSTALL_COMPONENT)\n  if(COMPONENT)\n    message(STATUS \"Install component: \\\"${COMPONENT}\\\"\")\n    set(CMAKE_INSTALL_COMPONENT \"${COMPONENT}\")\n  else()\n    set(CMAKE_INSTALL_COMPONENT)\n  endif()\nendif()\n\n# Install shared libraries without execute permission?\nif(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)\n  set(CMAKE_INSTALL_SO_NO_EXE \"0\")\nendif()\n\n# Is this installation the result of a crosscompile?\nif(NOT DEFINED CMAKE_CROSSCOMPILING)\n  set(CMAKE_CROSSCOMPILING \"FALSE\")\nendif()\n\nif(NOT CMAKE_INSTALL_LOCAL_ONLY)\n  # Include the install script for the subdirectory.\n  include(\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/cmake_install.cmake\")\nendif()\n\nif(NOT CMAKE_INSTALL_LOCAL_ONLY)\n  # Include the install script for the subdirectory.\n  include(\"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/cmake_install.cmake\")\nendif()\n\nif(CMAKE_INSTALL_COMPONENT)\n  set(CMAKE_INSTALL_MANIFEST \"install_manifest_${CMAKE_INSTALL_COMPONENT}.txt\")\nelse()\n  set(CMAKE_INSTALL_MANIFEST \"install_manifest.txt\")\nendif()\n\nstring(REPLACE \";\" \"\\n\" CMAKE_INSTALL_MANIFEST_CONTENT\n       \"${CMAKE_INSTALL_MANIFEST_FILES}\")\nfile(WRITE \"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/${CMAKE_INSTALL_MANIFEST}\"\n     \"${CMAKE_INSTALL_MANIFEST_CONTENT}\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/cmake_install.cmake b/cmake-build-debug/cmake_install.cmake
--- a/cmake-build-debug/cmake_install.cmake	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/cmake_install.cmake	(date 1606989169116)
@@ -1,4 +1,4 @@
-# Install script for directory: /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo
+# Install script for directory: /home/hugo/MA3/Project_monte_carlo
 
 # Set the install prefix
 if(NOT DEFINED CMAKE_INSTALL_PREFIX)
@@ -29,7 +29,7 @@
 
 # Install shared libraries without execute permission?
 if(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)
-  set(CMAKE_INSTALL_SO_NO_EXE "0")
+  set(CMAKE_INSTALL_SO_NO_EXE "1")
 endif()
 
 # Is this installation the result of a crosscompile?
@@ -39,12 +39,12 @@
 
 if(NOT CMAKE_INSTALL_LOCAL_ONLY)
   # Include the install script for the subdirectory.
-  include("/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Test/cmake_install.cmake")
+  include("/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Test/cmake_install.cmake")
 endif()
 
 if(NOT CMAKE_INSTALL_LOCAL_ONLY)
   # Include the install script for the subdirectory.
-  include("/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/Modules/cmake_install.cmake")
+  include("/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/Modules/cmake_install.cmake")
 endif()
 
 if(CMAKE_INSTALL_COMPONENT)
@@ -55,5 +55,5 @@
 
 string(REPLACE ";" "\n" CMAKE_INSTALL_MANIFEST_CONTENT
        "${CMAKE_INSTALL_MANIFEST_FILES}")
-file(WRITE "/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/${CMAKE_INSTALL_MANIFEST}"
+file(WRITE "/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/${CMAKE_INSTALL_MANIFEST}"
      "${CMAKE_INSTALL_MANIFEST_CONTENT}")
Index: Test/lib/googletest/src/gtest-death-test.cc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright 2005, Google Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n//\r\n// This file implements death tests.\r\n\r\n#include \"gtest/gtest-death-test.h\"\r\n\r\n#include <utility>\r\n\r\n#include \"gtest/internal/gtest-port.h\"\r\n#include \"gtest/internal/custom/gtest.h\"\r\n\r\n#if GTEST_HAS_DEATH_TEST\r\n\r\n# if GTEST_OS_MAC\r\n#  include <crt_externs.h>\r\n# endif  // GTEST_OS_MAC\r\n\r\n# include <errno.h>\r\n# include <fcntl.h>\r\n# include <limits.h>\r\n\r\n# if GTEST_OS_LINUX\r\n#  include <signal.h>\r\n# endif  // GTEST_OS_LINUX\r\n\r\n# include <stdarg.h>\r\n\r\n# if GTEST_OS_WINDOWS\r\n#  include <windows.h>\r\n# else\r\n#  include <sys/mman.h>\r\n#  include <sys/wait.h>\r\n# endif  // GTEST_OS_WINDOWS\r\n\r\n# if GTEST_OS_QNX\r\n#  include <spawn.h>\r\n# endif  // GTEST_OS_QNX\r\n\r\n# if GTEST_OS_FUCHSIA\r\n#  include <lib/fdio/fd.h>\r\n#  include <lib/fdio/io.h>\r\n#  include <lib/fdio/spawn.h>\r\n#  include <lib/zx/channel.h>\r\n#  include <lib/zx/port.h>\r\n#  include <lib/zx/process.h>\r\n#  include <lib/zx/socket.h>\r\n#  include <zircon/processargs.h>\r\n#  include <zircon/syscalls.h>\r\n#  include <zircon/syscalls/policy.h>\r\n#  include <zircon/syscalls/port.h>\r\n# endif  // GTEST_OS_FUCHSIA\r\n\r\n#endif  // GTEST_HAS_DEATH_TEST\r\n\r\n#include \"gtest/gtest-message.h\"\r\n#include \"gtest/internal/gtest-string.h\"\r\n#include \"src/gtest-internal-inl.h\"\r\n\r\nnamespace testing {\r\n\r\n// Constants.\r\n\r\n// The default death test style.\r\n//\r\n// This is defined in internal/gtest-port.h as \"fast\", but can be overridden by\r\n// a definition in internal/custom/gtest-port.h. The recommended value, which is\r\n// used internally at Google, is \"threadsafe\".\r\nstatic const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;\r\n\r\nGTEST_DEFINE_string_(\r\n    death_test_style,\r\n    internal::StringFromGTestEnv(\"death_test_style\", kDefaultDeathTestStyle),\r\n    \"Indicates how to run a death test in a forked child process: \"\r\n    \"\\\"threadsafe\\\" (child process re-executes the test binary \"\r\n    \"from the beginning, running only the specific death test) or \"\r\n    \"\\\"fast\\\" (child process runs the death test immediately \"\r\n    \"after forking).\");\r\n\r\nGTEST_DEFINE_bool_(\r\n    death_test_use_fork,\r\n    internal::BoolFromGTestEnv(\"death_test_use_fork\", false),\r\n    \"Instructs to use fork()/_exit() instead of clone() in death tests. \"\r\n    \"Ignored and always uses fork() on POSIX systems where clone() is not \"\r\n    \"implemented. Useful when running under valgrind or similar tools if \"\r\n    \"those do not support clone(). Valgrind 3.3.1 will just fail if \"\r\n    \"it sees an unsupported combination of clone() flags. \"\r\n    \"It is not recommended to use this flag w/o valgrind though it will \"\r\n    \"work in 99% of the cases. Once valgrind is fixed, this flag will \"\r\n    \"most likely be removed.\");\r\n\r\nnamespace internal {\r\nGTEST_DEFINE_string_(\r\n    internal_run_death_test, \"\",\r\n    \"Indicates the file, line number, temporal index of \"\r\n    \"the single death test to run, and a file descriptor to \"\r\n    \"which a success code may be sent, all separated by \"\r\n    \"the '|' characters.  This flag is specified if and only if the \"\r\n    \"current process is a sub-process launched for running a thread-safe \"\r\n    \"death test.  FOR INTERNAL USE ONLY.\");\r\n}  // namespace internal\r\n\r\n#if GTEST_HAS_DEATH_TEST\r\n\r\nnamespace internal {\r\n\r\n// Valid only for fast death tests. Indicates the code is running in the\r\n// child process of a fast style death test.\r\n# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA\r\nstatic bool g_in_fast_death_test_child = false;\r\n# endif\r\n\r\n// Returns a Boolean value indicating whether the caller is currently\r\n// executing in the context of the death test child process.  Tools such as\r\n// Valgrind heap checkers may need this to modify their behavior in death\r\n// tests.  IMPORTANT: This is an internal utility.  Using it may break the\r\n// implementation of death tests.  User code MUST NOT use it.\r\nbool InDeathTestChild() {\r\n# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA\r\n\r\n  // On Windows and Fuchsia, death tests are thread-safe regardless of the value\r\n  // of the death_test_style flag.\r\n  return !GTEST_FLAG(internal_run_death_test).empty();\r\n\r\n# else\r\n\r\n  if (GTEST_FLAG(death_test_style) == \"threadsafe\")\r\n    return !GTEST_FLAG(internal_run_death_test).empty();\r\n  else\r\n    return g_in_fast_death_test_child;\r\n#endif\r\n}\r\n\r\n}  // namespace internal\r\n\r\n// ExitedWithCode constructor.\r\nExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {\r\n}\r\n\r\n// ExitedWithCode function-call operator.\r\nbool ExitedWithCode::operator()(int exit_status) const {\r\n# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA\r\n\r\n  return exit_status == exit_code_;\r\n\r\n# else\r\n\r\n  return WIFEXITED(exit_status) && WEXITSTATUS(exit_status) == exit_code_;\r\n\r\n# endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA\r\n}\r\n\r\n# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA\r\n// KilledBySignal constructor.\r\nKilledBySignal::KilledBySignal(int signum) : signum_(signum) {\r\n}\r\n\r\n// KilledBySignal function-call operator.\r\nbool KilledBySignal::operator()(int exit_status) const {\r\n#  if defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)\r\n  {\r\n    bool result;\r\n    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {\r\n      return result;\r\n    }\r\n  }\r\n#  endif  // defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)\r\n  return WIFSIGNALED(exit_status) && WTERMSIG(exit_status) == signum_;\r\n}\r\n# endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA\r\n\r\nnamespace internal {\r\n\r\n// Utilities needed for death tests.\r\n\r\n// Generates a textual description of a given exit code, in the format\r\n// specified by wait(2).\r\nstatic std::string ExitSummary(int exit_code) {\r\n  Message m;\r\n\r\n# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA\r\n\r\n  m << \"Exited with exit status \" << exit_code;\r\n\r\n# else\r\n\r\n  if (WIFEXITED(exit_code)) {\r\n    m << \"Exited with exit status \" << WEXITSTATUS(exit_code);\r\n  } else if (WIFSIGNALED(exit_code)) {\r\n    m << \"Terminated by signal \" << WTERMSIG(exit_code);\r\n  }\r\n#  ifdef WCOREDUMP\r\n  if (WCOREDUMP(exit_code)) {\r\n    m << \" (core dumped)\";\r\n  }\r\n#  endif\r\n# endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA\r\n\r\n  return m.GetString();\r\n}\r\n\r\n// Returns true if exit_status describes a process that was terminated\r\n// by a signal, or exited normally with a nonzero exit code.\r\nbool ExitedUnsuccessfully(int exit_status) {\r\n  return !ExitedWithCode(0)(exit_status);\r\n}\r\n\r\n# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA\r\n// Generates a textual failure message when a death test finds more than\r\n// one thread running, or cannot determine the number of threads, prior\r\n// to executing the given statement.  It is the responsibility of the\r\n// caller not to pass a thread_count of 1.\r\nstatic std::string DeathTestThreadWarning(size_t thread_count) {\r\n  Message msg;\r\n  msg << \"Death tests use fork(), which is unsafe particularly\"\r\n      << \" in a threaded context. For this test, \" << GTEST_NAME_ << \" \";\r\n  if (thread_count == 0) {\r\n    msg << \"couldn't detect the number of threads.\";\r\n  } else {\r\n    msg << \"detected \" << thread_count << \" threads.\";\r\n  }\r\n  msg << \" See \"\r\n         \"https://github.com/google/googletest/blob/master/googletest/docs/\"\r\n         \"advanced.md#death-tests-and-threads\"\r\n      << \" for more explanation and suggested solutions, especially if\"\r\n      << \" this is the last message you see before your test times out.\";\r\n  return msg.GetString();\r\n}\r\n# endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA\r\n\r\n// Flag characters for reporting a death test that did not die.\r\nstatic const char kDeathTestLived = 'L';\r\nstatic const char kDeathTestReturned = 'R';\r\nstatic const char kDeathTestThrew = 'T';\r\nstatic const char kDeathTestInternalError = 'I';\r\n\r\n#if GTEST_OS_FUCHSIA\r\n\r\n// File descriptor used for the pipe in the child process.\r\nstatic const int kFuchsiaReadPipeFd = 3;\r\n\r\n#endif\r\n\r\n// An enumeration describing all of the possible ways that a death test can\r\n// conclude.  DIED means that the process died while executing the test\r\n// code; LIVED means that process lived beyond the end of the test code;\r\n// RETURNED means that the test statement attempted to execute a return\r\n// statement, which is not allowed; THREW means that the test statement\r\n// returned control by throwing an exception.  IN_PROGRESS means the test\r\n// has not yet concluded.\r\nenum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\r\n\r\n// Routine for aborting the program which is safe to call from an\r\n// exec-style death test child process, in which case the error\r\n// message is propagated back to the parent process.  Otherwise, the\r\n// message is simply printed to stderr.  In either case, the program\r\n// then exits with status 1.\r\nstatic void DeathTestAbort(const std::string& message) {\r\n  // On a POSIX system, this function may be called from a threadsafe-style\r\n  // death test child process, which operates on a very small stack.  Use\r\n  // the heap for any additional non-minuscule memory requirements.\r\n  const InternalRunDeathTestFlag* const flag =\r\n      GetUnitTestImpl()->internal_run_death_test_flag();\r\n  if (flag != nullptr) {\r\n    FILE* parent = posix::FDOpen(flag->write_fd(), \"w\");\r\n    fputc(kDeathTestInternalError, parent);\r\n    fprintf(parent, \"%s\", message.c_str());\r\n    fflush(parent);\r\n    _exit(1);\r\n  } else {\r\n    fprintf(stderr, \"%s\", message.c_str());\r\n    fflush(stderr);\r\n    posix::Abort();\r\n  }\r\n}\r\n\r\n// A replacement for CHECK that calls DeathTestAbort if the assertion\r\n// fails.\r\n# define GTEST_DEATH_TEST_CHECK_(expression) \\\r\n  do { \\\r\n    if (!::testing::internal::IsTrue(expression)) { \\\r\n      DeathTestAbort( \\\r\n          ::std::string(\"CHECK failed: File \") + __FILE__ +  \", line \" \\\r\n          + ::testing::internal::StreamableToString(__LINE__) + \": \" \\\r\n          + #expression); \\\r\n    } \\\r\n  } while (::testing::internal::AlwaysFalse())\r\n\r\n// This macro is similar to GTEST_DEATH_TEST_CHECK_, but it is meant for\r\n// evaluating any system call that fulfills two conditions: it must return\r\n// -1 on failure, and set errno to EINTR when it is interrupted and\r\n// should be tried again.  The macro expands to a loop that repeatedly\r\n// evaluates the expression as long as it evaluates to -1 and sets\r\n// errno to EINTR.  If the expression evaluates to -1 but errno is\r\n// something other than EINTR, DeathTestAbort is called.\r\n# define GTEST_DEATH_TEST_CHECK_SYSCALL_(expression) \\\r\n  do { \\\r\n    int gtest_retval; \\\r\n    do { \\\r\n      gtest_retval = (expression); \\\r\n    } while (gtest_retval == -1 && errno == EINTR); \\\r\n    if (gtest_retval == -1) { \\\r\n      DeathTestAbort( \\\r\n          ::std::string(\"CHECK failed: File \") + __FILE__ + \", line \" \\\r\n          + ::testing::internal::StreamableToString(__LINE__) + \": \" \\\r\n          + #expression + \" != -1\"); \\\r\n    } \\\r\n  } while (::testing::internal::AlwaysFalse())\r\n\r\n// Returns the message describing the last system error in errno.\r\nstd::string GetLastErrnoDescription() {\r\n    return errno == 0 ? \"\" : posix::StrError(errno);\r\n}\r\n\r\n// This is called from a death test parent process to read a failure\r\n// message from the death test child process and log it with the FATAL\r\n// severity. On Windows, the message is read from a pipe handle. On other\r\n// platforms, it is read from a file descriptor.\r\nstatic void FailFromInternalError(int fd) {\r\n  Message error;\r\n  char buffer[256];\r\n  int num_read;\r\n\r\n  do {\r\n    while ((num_read = posix::Read(fd, buffer, 255)) > 0) {\r\n      buffer[num_read] = '\\0';\r\n      error << buffer;\r\n    }\r\n  } while (num_read == -1 && errno == EINTR);\r\n\r\n  if (num_read == 0) {\r\n    GTEST_LOG_(FATAL) << error.GetString();\r\n  } else {\r\n    const int last_error = errno;\r\n    GTEST_LOG_(FATAL) << \"Error while reading death test internal: \"\r\n                      << GetLastErrnoDescription() << \" [\" << last_error << \"]\";\r\n  }\r\n}\r\n\r\n// Death test constructor.  Increments the running death test count\r\n// for the current test.\r\nDeathTest::DeathTest() {\r\n  TestInfo* const info = GetUnitTestImpl()->current_test_info();\r\n  if (info == nullptr) {\r\n    DeathTestAbort(\"Cannot run a death test outside of a TEST or \"\r\n                   \"TEST_F construct\");\r\n  }\r\n}\r\n\r\n// Creates and returns a death test by dispatching to the current\r\n// death test factory.\r\nbool DeathTest::Create(const char* statement,\r\n                       Matcher<const std::string&> matcher, const char* file,\r\n                       int line, DeathTest** test) {\r\n  return GetUnitTestImpl()->death_test_factory()->Create(\r\n      statement, std::move(matcher), file, line, test);\r\n}\r\n\r\nconst char* DeathTest::LastMessage() {\r\n  return last_death_test_message_.c_str();\r\n}\r\n\r\nvoid DeathTest::set_last_death_test_message(const std::string& message) {\r\n  last_death_test_message_ = message;\r\n}\r\n\r\nstd::string DeathTest::last_death_test_message_;\r\n\r\n// Provides cross platform implementation for some death functionality.\r\nclass DeathTestImpl : public DeathTest {\r\n protected:\r\n  DeathTestImpl(const char* a_statement, Matcher<const std::string&> matcher)\r\n      : statement_(a_statement),\r\n        matcher_(std::move(matcher)),\r\n        spawned_(false),\r\n        status_(-1),\r\n        outcome_(IN_PROGRESS),\r\n        read_fd_(-1),\r\n        write_fd_(-1) {}\r\n\r\n  // read_fd_ is expected to be closed and cleared by a derived class.\r\n  ~DeathTestImpl() override { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }\r\n\r\n  void Abort(AbortReason reason) override;\r\n  bool Passed(bool status_ok) override;\r\n\r\n  const char* statement() const { return statement_; }\r\n  bool spawned() const { return spawned_; }\r\n  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }\r\n  int status() const { return status_; }\r\n  void set_status(int a_status) { status_ = a_status; }\r\n  DeathTestOutcome outcome() const { return outcome_; }\r\n  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }\r\n  int read_fd() const { return read_fd_; }\r\n  void set_read_fd(int fd) { read_fd_ = fd; }\r\n  int write_fd() const { return write_fd_; }\r\n  void set_write_fd(int fd) { write_fd_ = fd; }\r\n\r\n  // Called in the parent process only. Reads the result code of the death\r\n  // test child process via a pipe, interprets it to set the outcome_\r\n  // member, and closes read_fd_.  Outputs diagnostics and terminates in\r\n  // case of unexpected codes.\r\n  void ReadAndInterpretStatusByte();\r\n\r\n  // Returns stderr output from the child process.\r\n  virtual std::string GetErrorLogs();\r\n\r\n private:\r\n  // The textual content of the code this object is testing.  This class\r\n  // doesn't own this string and should not attempt to delete it.\r\n  const char* const statement_;\r\n  // A matcher that's expected to match the stderr output by the child process.\r\n  Matcher<const std::string&> matcher_;\r\n  // True if the death test child process has been successfully spawned.\r\n  bool spawned_;\r\n  // The exit status of the child process.\r\n  int status_;\r\n  // How the death test concluded.\r\n  DeathTestOutcome outcome_;\r\n  // Descriptor to the read end of the pipe to the child process.  It is\r\n  // always -1 in the child process.  The child keeps its write end of the\r\n  // pipe in write_fd_.\r\n  int read_fd_;\r\n  // Descriptor to the child's write end of the pipe to the parent process.\r\n  // It is always -1 in the parent process.  The parent keeps its end of the\r\n  // pipe in read_fd_.\r\n  int write_fd_;\r\n};\r\n\r\n// Called in the parent process only. Reads the result code of the death\r\n// test child process via a pipe, interprets it to set the outcome_\r\n// member, and closes read_fd_.  Outputs diagnostics and terminates in\r\n// case of unexpected codes.\r\nvoid DeathTestImpl::ReadAndInterpretStatusByte() {\r\n  char flag;\r\n  int bytes_read;\r\n\r\n  // The read() here blocks until data is available (signifying the\r\n  // failure of the death test) or until the pipe is closed (signifying\r\n  // its success), so it's okay to call this in the parent before\r\n  // the child process has exited.\r\n  do {\r\n    bytes_read = posix::Read(read_fd(), &flag, 1);\r\n  } while (bytes_read == -1 && errno == EINTR);\r\n\r\n  if (bytes_read == 0) {\r\n    set_outcome(DIED);\r\n  } else if (bytes_read == 1) {\r\n    switch (flag) {\r\n      case kDeathTestReturned:\r\n        set_outcome(RETURNED);\r\n        break;\r\n      case kDeathTestThrew:\r\n        set_outcome(THREW);\r\n        break;\r\n      case kDeathTestLived:\r\n        set_outcome(LIVED);\r\n        break;\r\n      case kDeathTestInternalError:\r\n        FailFromInternalError(read_fd());  // Does not return.\r\n        break;\r\n      default:\r\n        GTEST_LOG_(FATAL) << \"Death test child process reported \"\r\n                          << \"unexpected status byte (\"\r\n                          << static_cast<unsigned int>(flag) << \")\";\r\n    }\r\n  } else {\r\n    GTEST_LOG_(FATAL) << \"Read from death test child process failed: \"\r\n                      << GetLastErrnoDescription();\r\n  }\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Close(read_fd()));\r\n  set_read_fd(-1);\r\n}\r\n\r\nstd::string DeathTestImpl::GetErrorLogs() {\r\n  return GetCapturedStderr();\r\n}\r\n\r\n// Signals that the death test code which should have exited, didn't.\r\n// Should be called only in a death test child process.\r\n// Writes a status byte to the child's status file descriptor, then\r\n// calls _exit(1).\r\nvoid DeathTestImpl::Abort(AbortReason reason) {\r\n  // The parent process considers the death test to be a failure if\r\n  // it finds any data in our pipe.  So, here we write a single flag byte\r\n  // to the pipe, then exit.\r\n  const char status_ch =\r\n      reason == TEST_DID_NOT_DIE ? kDeathTestLived :\r\n      reason == TEST_THREW_EXCEPTION ? kDeathTestThrew : kDeathTestReturned;\r\n\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Write(write_fd(), &status_ch, 1));\r\n  // We are leaking the descriptor here because on some platforms (i.e.,\r\n  // when built as Windows DLL), destructors of global objects will still\r\n  // run after calling _exit(). On such systems, write_fd_ will be\r\n  // indirectly closed from the destructor of UnitTestImpl, causing double\r\n  // close if it is also closed here. On debug configurations, double close\r\n  // may assert. As there are no in-process buffers to flush here, we are\r\n  // relying on the OS to close the descriptor after the process terminates\r\n  // when the destructors are not run.\r\n  _exit(1);  // Exits w/o any normal exit hooks (we were supposed to crash)\r\n}\r\n\r\n// Returns an indented copy of stderr output for a death test.\r\n// This makes distinguishing death test output lines from regular log lines\r\n// much easier.\r\nstatic ::std::string FormatDeathTestOutput(const ::std::string& output) {\r\n  ::std::string ret;\r\n  for (size_t at = 0; ; ) {\r\n    const size_t line_end = output.find('\\n', at);\r\n    ret += \"[  DEATH   ] \";\r\n    if (line_end == ::std::string::npos) {\r\n      ret += output.substr(at);\r\n      break;\r\n    }\r\n    ret += output.substr(at, line_end + 1 - at);\r\n    at = line_end + 1;\r\n  }\r\n  return ret;\r\n}\r\n\r\n// Assesses the success or failure of a death test, using both private\r\n// members which have previously been set, and one argument:\r\n//\r\n// Private data members:\r\n//   outcome:  An enumeration describing how the death test\r\n//             concluded: DIED, LIVED, THREW, or RETURNED.  The death test\r\n//             fails in the latter three cases.\r\n//   status:   The exit status of the child process. On *nix, it is in the\r\n//             in the format specified by wait(2). On Windows, this is the\r\n//             value supplied to the ExitProcess() API or a numeric code\r\n//             of the exception that terminated the program.\r\n//   matcher_: A matcher that's expected to match the stderr output by the child\r\n//             process.\r\n//\r\n// Argument:\r\n//   status_ok: true if exit_status is acceptable in the context of\r\n//              this particular death test, which fails if it is false\r\n//\r\n// Returns true if and only if all of the above conditions are met.  Otherwise,\r\n// the first failing condition, in the order given above, is the one that is\r\n// reported. Also sets the last death test message string.\r\nbool DeathTestImpl::Passed(bool status_ok) {\r\n  if (!spawned())\r\n    return false;\r\n\r\n  const std::string error_message = GetErrorLogs();\r\n\r\n  bool success = false;\r\n  Message buffer;\r\n\r\n  buffer << \"Death test: \" << statement() << \"\\n\";\r\n  switch (outcome()) {\r\n    case LIVED:\r\n      buffer << \"    Result: failed to die.\\n\"\r\n             << \" Error msg:\\n\" << FormatDeathTestOutput(error_message);\r\n      break;\r\n    case THREW:\r\n      buffer << \"    Result: threw an exception.\\n\"\r\n             << \" Error msg:\\n\" << FormatDeathTestOutput(error_message);\r\n      break;\r\n    case RETURNED:\r\n      buffer << \"    Result: illegal return in test statement.\\n\"\r\n             << \" Error msg:\\n\" << FormatDeathTestOutput(error_message);\r\n      break;\r\n    case DIED:\r\n      if (status_ok) {\r\n        if (matcher_.Matches(error_message)) {\r\n          success = true;\r\n        } else {\r\n          std::ostringstream stream;\r\n          matcher_.DescribeTo(&stream);\r\n          buffer << \"    Result: died but not with expected error.\\n\"\r\n                 << \"  Expected: \" << stream.str() << \"\\n\"\r\n                 << \"Actual msg:\\n\"\r\n                 << FormatDeathTestOutput(error_message);\r\n        }\r\n      } else {\r\n        buffer << \"    Result: died but not with expected exit code:\\n\"\r\n               << \"            \" << ExitSummary(status()) << \"\\n\"\r\n               << \"Actual msg:\\n\" << FormatDeathTestOutput(error_message);\r\n      }\r\n      break;\r\n    case IN_PROGRESS:\r\n    default:\r\n      GTEST_LOG_(FATAL)\r\n          << \"DeathTest::Passed somehow called before conclusion of test\";\r\n  }\r\n\r\n  DeathTest::set_last_death_test_message(buffer.GetString());\r\n  return success;\r\n}\r\n\r\n# if GTEST_OS_WINDOWS\r\n// WindowsDeathTest implements death tests on Windows. Due to the\r\n// specifics of starting new processes on Windows, death tests there are\r\n// always threadsafe, and Google Test considers the\r\n// --gtest_death_test_style=fast setting to be equivalent to\r\n// --gtest_death_test_style=threadsafe there.\r\n//\r\n// A few implementation notes:  Like the Linux version, the Windows\r\n// implementation uses pipes for child-to-parent communication. But due to\r\n// the specifics of pipes on Windows, some extra steps are required:\r\n//\r\n// 1. The parent creates a communication pipe and stores handles to both\r\n//    ends of it.\r\n// 2. The parent starts the child and provides it with the information\r\n//    necessary to acquire the handle to the write end of the pipe.\r\n// 3. The child acquires the write end of the pipe and signals the parent\r\n//    using a Windows event.\r\n// 4. Now the parent can release the write end of the pipe on its side. If\r\n//    this is done before step 3, the object's reference count goes down to\r\n//    0 and it is destroyed, preventing the child from acquiring it. The\r\n//    parent now has to release it, or read operations on the read end of\r\n//    the pipe will not return when the child terminates.\r\n// 5. The parent reads child's output through the pipe (outcome code and\r\n//    any possible error messages) from the pipe, and its stderr and then\r\n//    determines whether to fail the test.\r\n//\r\n// Note: to distinguish Win32 API calls from the local method and function\r\n// calls, the former are explicitly resolved in the global namespace.\r\n//\r\nclass WindowsDeathTest : public DeathTestImpl {\r\n public:\r\n  WindowsDeathTest(const char* a_statement, Matcher<const std::string&> matcher,\r\n                   const char* file, int line)\r\n      : DeathTestImpl(a_statement, std::move(matcher)),\r\n        file_(file),\r\n        line_(line) {}\r\n\r\n  // All of these virtual functions are inherited from DeathTest.\r\n  virtual int Wait();\r\n  virtual TestRole AssumeRole();\r\n\r\n private:\r\n  // The name of the file in which the death test is located.\r\n  const char* const file_;\r\n  // The line number on which the death test is located.\r\n  const int line_;\r\n  // Handle to the write end of the pipe to the child process.\r\n  AutoHandle write_handle_;\r\n  // Child process handle.\r\n  AutoHandle child_handle_;\r\n  // Event the child process uses to signal the parent that it has\r\n  // acquired the handle to the write end of the pipe. After seeing this\r\n  // event the parent can release its own handles to make sure its\r\n  // ReadFile() calls return when the child terminates.\r\n  AutoHandle event_handle_;\r\n};\r\n\r\n// Waits for the child in a death test to exit, returning its exit\r\n// status, or 0 if no child process exists.  As a side effect, sets the\r\n// outcome data member.\r\nint WindowsDeathTest::Wait() {\r\n  if (!spawned())\r\n    return 0;\r\n\r\n  // Wait until the child either signals that it has acquired the write end\r\n  // of the pipe or it dies.\r\n  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };\r\n  switch (::WaitForMultipleObjects(2,\r\n                                   wait_handles,\r\n                                   FALSE,  // Waits for any of the handles.\r\n                                   INFINITE)) {\r\n    case WAIT_OBJECT_0:\r\n    case WAIT_OBJECT_0 + 1:\r\n      break;\r\n    default:\r\n      GTEST_DEATH_TEST_CHECK_(false);  // Should not get here.\r\n  }\r\n\r\n  // The child has acquired the write end of the pipe or exited.\r\n  // We release the handle on our side and continue.\r\n  write_handle_.Reset();\r\n  event_handle_.Reset();\r\n\r\n  ReadAndInterpretStatusByte();\r\n\r\n  // Waits for the child process to exit if it haven't already. This\r\n  // returns immediately if the child has already exited, regardless of\r\n  // whether previous calls to WaitForMultipleObjects synchronized on this\r\n  // handle or not.\r\n  GTEST_DEATH_TEST_CHECK_(\r\n      WAIT_OBJECT_0 == ::WaitForSingleObject(child_handle_.Get(),\r\n                                             INFINITE));\r\n  DWORD status_code;\r\n  GTEST_DEATH_TEST_CHECK_(\r\n      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);\r\n  child_handle_.Reset();\r\n  set_status(static_cast<int>(status_code));\r\n  return status();\r\n}\r\n\r\n// The AssumeRole process for a Windows death test.  It creates a child\r\n// process with the same executable as the current process to run the\r\n// death test.  The child process is given the --gtest_filter and\r\n// --gtest_internal_run_death_test flags such that it knows to run the\r\n// current death test only.\r\nDeathTest::TestRole WindowsDeathTest::AssumeRole() {\r\n  const UnitTestImpl* const impl = GetUnitTestImpl();\r\n  const InternalRunDeathTestFlag* const flag =\r\n      impl->internal_run_death_test_flag();\r\n  const TestInfo* const info = impl->current_test_info();\r\n  const int death_test_index = info->result()->death_test_count();\r\n\r\n  if (flag != nullptr) {\r\n    // ParseInternalRunDeathTestFlag() has performed all the necessary\r\n    // processing.\r\n    set_write_fd(flag->write_fd());\r\n    return EXECUTE_TEST;\r\n  }\r\n\r\n  // WindowsDeathTest uses an anonymous pipe to communicate results of\r\n  // a death test.\r\n  SECURITY_ATTRIBUTES handles_are_inheritable = {sizeof(SECURITY_ATTRIBUTES),\r\n                                                 nullptr, TRUE};\r\n  HANDLE read_handle, write_handle;\r\n  GTEST_DEATH_TEST_CHECK_(\r\n      ::CreatePipe(&read_handle, &write_handle, &handles_are_inheritable,\r\n                   0)  // Default buffer size.\r\n      != FALSE);\r\n  set_read_fd(::_open_osfhandle(reinterpret_cast<intptr_t>(read_handle),\r\n                                O_RDONLY));\r\n  write_handle_.Reset(write_handle);\r\n  event_handle_.Reset(::CreateEvent(\r\n      &handles_are_inheritable,\r\n      TRUE,       // The event will automatically reset to non-signaled state.\r\n      FALSE,      // The initial state is non-signalled.\r\n      nullptr));  // The even is unnamed.\r\n  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != nullptr);\r\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\r\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\r\n                                  \".\" + info->name();\r\n  const std::string internal_flag =\r\n      std::string(\"--\") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag +\r\n      \"=\" + file_ + \"|\" + StreamableToString(line_) + \"|\" +\r\n      StreamableToString(death_test_index) + \"|\" +\r\n      StreamableToString(static_cast<unsigned int>(::GetCurrentProcessId())) +\r\n      // size_t has the same width as pointers on both 32-bit and 64-bit\r\n      // Windows platforms.\r\n      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.\r\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(write_handle)) +\r\n      \"|\" + StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));\r\n\r\n  char executable_path[_MAX_PATH + 1];  // NOLINT\r\n  GTEST_DEATH_TEST_CHECK_(_MAX_PATH + 1 != ::GetModuleFileNameA(nullptr,\r\n                                                                executable_path,\r\n                                                                _MAX_PATH));\r\n\r\n  std::string command_line =\r\n      std::string(::GetCommandLineA()) + \" \" + filter_flag + \" \\\"\" +\r\n      internal_flag + \"\\\"\";\r\n\r\n  DeathTest::set_last_death_test_message(\"\");\r\n\r\n  CaptureStderr();\r\n  // Flush the log buffers since the log streams are shared with the child.\r\n  FlushInfoLog();\r\n\r\n  // The child process will share the standard handles with the parent.\r\n  STARTUPINFOA startup_info;\r\n  memset(&startup_info, 0, sizeof(STARTUPINFO));\r\n  startup_info.dwFlags = STARTF_USESTDHANDLES;\r\n  startup_info.hStdInput = ::GetStdHandle(STD_INPUT_HANDLE);\r\n  startup_info.hStdOutput = ::GetStdHandle(STD_OUTPUT_HANDLE);\r\n  startup_info.hStdError = ::GetStdHandle(STD_ERROR_HANDLE);\r\n\r\n  PROCESS_INFORMATION process_info;\r\n  GTEST_DEATH_TEST_CHECK_(\r\n      ::CreateProcessA(\r\n          executable_path, const_cast<char*>(command_line.c_str()),\r\n          nullptr,  // Retuned process handle is not inheritable.\r\n          nullptr,  // Retuned thread handle is not inheritable.\r\n          TRUE,  // Child inherits all inheritable handles (for write_handle_).\r\n          0x0,   // Default creation flags.\r\n          nullptr,  // Inherit the parent's environment.\r\n          UnitTest::GetInstance()->original_working_dir(), &startup_info,\r\n          &process_info) != FALSE);\r\n  child_handle_.Reset(process_info.hProcess);\r\n  ::CloseHandle(process_info.hThread);\r\n  set_spawned(true);\r\n  return OVERSEE_TEST;\r\n}\r\n\r\n# elif GTEST_OS_FUCHSIA\r\n\r\nclass FuchsiaDeathTest : public DeathTestImpl {\r\n public:\r\n  FuchsiaDeathTest(const char* a_statement, Matcher<const std::string&> matcher,\r\n                   const char* file, int line)\r\n      : DeathTestImpl(a_statement, std::move(matcher)),\r\n        file_(file),\r\n        line_(line) {}\r\n\r\n  // All of these virtual functions are inherited from DeathTest.\r\n  int Wait() override;\r\n  TestRole AssumeRole() override;\r\n  std::string GetErrorLogs() override;\r\n\r\n private:\r\n  // The name of the file in which the death test is located.\r\n  const char* const file_;\r\n  // The line number on which the death test is located.\r\n  const int line_;\r\n  // The stderr data captured by the child process.\r\n  std::string captured_stderr_;\r\n\r\n  zx::process child_process_;\r\n  zx::channel exception_channel_;\r\n  zx::socket stderr_socket_;\r\n};\r\n\r\n// Utility class for accumulating command-line arguments.\r\nclass Arguments {\r\n public:\r\n  Arguments() { args_.push_back(nullptr); }\r\n\r\n  ~Arguments() {\r\n    for (std::vector<char*>::iterator i = args_.begin(); i != args_.end();\r\n         ++i) {\r\n      free(*i);\r\n    }\r\n  }\r\n  void AddArgument(const char* argument) {\r\n    args_.insert(args_.end() - 1, posix::StrDup(argument));\r\n  }\r\n\r\n  template <typename Str>\r\n  void AddArguments(const ::std::vector<Str>& arguments) {\r\n    for (typename ::std::vector<Str>::const_iterator i = arguments.begin();\r\n         i != arguments.end();\r\n         ++i) {\r\n      args_.insert(args_.end() - 1, posix::StrDup(i->c_str()));\r\n    }\r\n  }\r\n  char* const* Argv() {\r\n    return &args_[0];\r\n  }\r\n\r\n  int size() {\r\n    return args_.size() - 1;\r\n  }\r\n\r\n private:\r\n  std::vector<char*> args_;\r\n};\r\n\r\n// Waits for the child in a death test to exit, returning its exit\r\n// status, or 0 if no child process exists.  As a side effect, sets the\r\n// outcome data member.\r\nint FuchsiaDeathTest::Wait() {\r\n  const int kProcessKey = 0;\r\n  const int kSocketKey = 1;\r\n  const int kExceptionKey = 2;\r\n\r\n  if (!spawned())\r\n    return 0;\r\n\r\n  // Create a port to wait for socket/task/exception events.\r\n  zx_status_t status_zx;\r\n  zx::port port;\r\n  status_zx = zx::port::create(0, &port);\r\n  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n  // Register to wait for the child process to terminate.\r\n  status_zx = child_process_.wait_async(\r\n      port, kProcessKey, ZX_PROCESS_TERMINATED, ZX_WAIT_ASYNC_ONCE);\r\n  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n  // Register to wait for the socket to be readable or closed.\r\n  status_zx = stderr_socket_.wait_async(\r\n      port, kSocketKey, ZX_SOCKET_READABLE | ZX_SOCKET_PEER_CLOSED,\r\n      ZX_WAIT_ASYNC_ONCE);\r\n  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n  // Register to wait for an exception.\r\n  status_zx = exception_channel_.wait_async(\r\n      port, kExceptionKey, ZX_CHANNEL_READABLE, ZX_WAIT_ASYNC_ONCE);\r\n  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n  bool process_terminated = false;\r\n  bool socket_closed = false;\r\n  do {\r\n    zx_port_packet_t packet = {};\r\n    status_zx = port.wait(zx::time::infinite(), &packet);\r\n    GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n    if (packet.key == kExceptionKey) {\r\n      // Process encountered an exception. Kill it directly rather than\r\n      // letting other handlers process the event. We will get a kProcessKey\r\n      // event when the process actually terminates.\r\n      status_zx = child_process_.kill();\r\n      GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n    } else if (packet.key == kProcessKey) {\r\n      // Process terminated.\r\n      GTEST_DEATH_TEST_CHECK_(ZX_PKT_IS_SIGNAL_ONE(packet.type));\r\n      GTEST_DEATH_TEST_CHECK_(packet.signal.observed & ZX_PROCESS_TERMINATED);\r\n      process_terminated = true;\r\n    } else if (packet.key == kSocketKey) {\r\n      GTEST_DEATH_TEST_CHECK_(ZX_PKT_IS_SIGNAL_ONE(packet.type));\r\n      if (packet.signal.observed & ZX_SOCKET_READABLE) {\r\n        // Read data from the socket.\r\n        constexpr size_t kBufferSize = 1024;\r\n        do {\r\n          size_t old_length = captured_stderr_.length();\r\n          size_t bytes_read = 0;\r\n          captured_stderr_.resize(old_length + kBufferSize);\r\n          status_zx = stderr_socket_.read(\r\n              0, &captured_stderr_.front() + old_length, kBufferSize,\r\n              &bytes_read);\r\n          captured_stderr_.resize(old_length + bytes_read);\r\n        } while (status_zx == ZX_OK);\r\n        if (status_zx == ZX_ERR_PEER_CLOSED) {\r\n          socket_closed = true;\r\n        } else {\r\n          GTEST_DEATH_TEST_CHECK_(status_zx == ZX_ERR_SHOULD_WAIT);\r\n          status_zx = stderr_socket_.wait_async(\r\n              port, kSocketKey, ZX_SOCKET_READABLE | ZX_SOCKET_PEER_CLOSED,\r\n              ZX_WAIT_ASYNC_ONCE);\r\n          GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n        }\r\n      } else {\r\n        GTEST_DEATH_TEST_CHECK_(packet.signal.observed & ZX_SOCKET_PEER_CLOSED);\r\n        socket_closed = true;\r\n      }\r\n    }\r\n  } while (!process_terminated && !socket_closed);\r\n\r\n  ReadAndInterpretStatusByte();\r\n\r\n  zx_info_process_t buffer;\r\n  status_zx = child_process_.get_info(\r\n      ZX_INFO_PROCESS, &buffer, sizeof(buffer), nullptr, nullptr);\r\n  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);\r\n\r\n  GTEST_DEATH_TEST_CHECK_(buffer.exited);\r\n  set_status(buffer.return_code);\r\n  return status();\r\n}\r\n\r\n// The AssumeRole process for a Fuchsia death test.  It creates a child\r\n// process with the same executable as the current process to run the\r\n// death test.  The child process is given the --gtest_filter and\r\n// --gtest_internal_run_death_test flags such that it knows to run the\r\n// current death test only.\r\nDeathTest::TestRole FuchsiaDeathTest::AssumeRole() {\r\n  const UnitTestImpl* const impl = GetUnitTestImpl();\r\n  const InternalRunDeathTestFlag* const flag =\r\n      impl->internal_run_death_test_flag();\r\n  const TestInfo* const info = impl->current_test_info();\r\n  const int death_test_index = info->result()->death_test_count();\r\n\r\n  if (flag != nullptr) {\r\n    // ParseInternalRunDeathTestFlag() has performed all the necessary\r\n    // processing.\r\n    set_write_fd(kFuchsiaReadPipeFd);\r\n    return EXECUTE_TEST;\r\n  }\r\n\r\n  // Flush the log buffers since the log streams are shared with the child.\r\n  FlushInfoLog();\r\n\r\n  // Build the child process command line.\r\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\r\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\r\n                                  \".\" + info->name();\r\n  const std::string internal_flag =\r\n      std::string(\"--\") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag + \"=\"\r\n      + file_ + \"|\"\r\n      + StreamableToString(line_) + \"|\"\r\n      + StreamableToString(death_test_index);\r\n  Arguments args;\r\n  args.AddArguments(GetInjectableArgvs());\r\n  args.AddArgument(filter_flag.c_str());\r\n  args.AddArgument(internal_flag.c_str());\r\n\r\n  // Build the pipe for communication with the child.\r\n  zx_status_t status;\r\n  zx_handle_t child_pipe_handle;\r\n  int child_pipe_fd;\r\n  status = fdio_pipe_half(&child_pipe_fd, &child_pipe_handle);\r\n  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);\r\n  set_read_fd(child_pipe_fd);\r\n\r\n  // Set the pipe handle for the child.\r\n  fdio_spawn_action_t spawn_actions[2] = {};\r\n  fdio_spawn_action_t* add_handle_action = &spawn_actions[0];\r\n  add_handle_action->action = FDIO_SPAWN_ACTION_ADD_HANDLE;\r\n  add_handle_action->h.id = PA_HND(PA_FD, kFuchsiaReadPipeFd);\r\n  add_handle_action->h.handle = child_pipe_handle;\r\n\r\n  // Create a socket pair will be used to receive the child process' stderr.\r\n  zx::socket stderr_producer_socket;\r\n  status =\r\n      zx::socket::create(0, &stderr_producer_socket, &stderr_socket_);\r\n  GTEST_DEATH_TEST_CHECK_(status >= 0);\r\n  int stderr_producer_fd = -1;\r\n  status =\r\n      fdio_fd_create(stderr_producer_socket.release(), &stderr_producer_fd);\r\n  GTEST_DEATH_TEST_CHECK_(status >= 0);\r\n\r\n  // Make the stderr socket nonblocking.\r\n  GTEST_DEATH_TEST_CHECK_(fcntl(stderr_producer_fd, F_SETFL, 0) == 0);\r\n\r\n  fdio_spawn_action_t* add_stderr_action = &spawn_actions[1];\r\n  add_stderr_action->action = FDIO_SPAWN_ACTION_CLONE_FD;\r\n  add_stderr_action->fd.local_fd = stderr_producer_fd;\r\n  add_stderr_action->fd.target_fd = STDERR_FILENO;\r\n\r\n  // Create a child job.\r\n  zx_handle_t child_job = ZX_HANDLE_INVALID;\r\n  status = zx_job_create(zx_job_default(), 0, & child_job);\r\n  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);\r\n  zx_policy_basic_t policy;\r\n  policy.condition = ZX_POL_NEW_ANY;\r\n  policy.policy = ZX_POL_ACTION_ALLOW;\r\n  status = zx_job_set_policy(\r\n      child_job, ZX_JOB_POL_RELATIVE, ZX_JOB_POL_BASIC, &policy, 1);\r\n  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);\r\n\r\n  // Create an exception channel attached to the |child_job|, to allow\r\n  // us to suppress the system default exception handler from firing.\r\n  status =\r\n      zx_task_create_exception_channel(\r\n          child_job, 0, exception_channel_.reset_and_get_address());\r\n  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);\r\n\r\n  // Spawn the child process.\r\n  status = fdio_spawn_etc(\r\n      child_job, FDIO_SPAWN_CLONE_ALL, args.Argv()[0], args.Argv(), nullptr,\r\n      2, spawn_actions, child_process_.reset_and_get_address(), nullptr);\r\n  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);\r\n\r\n  set_spawned(true);\r\n  return OVERSEE_TEST;\r\n}\r\n\r\nstd::string FuchsiaDeathTest::GetErrorLogs() {\r\n  return captured_stderr_;\r\n}\r\n\r\n#else  // We are neither on Windows, nor on Fuchsia.\r\n\r\n// ForkingDeathTest provides implementations for most of the abstract\r\n// methods of the DeathTest interface.  Only the AssumeRole method is\r\n// left undefined.\r\nclass ForkingDeathTest : public DeathTestImpl {\r\n public:\r\n  ForkingDeathTest(const char* statement, Matcher<const std::string&> matcher);\r\n\r\n  // All of these virtual functions are inherited from DeathTest.\r\n  int Wait() override;\r\n\r\n protected:\r\n  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }\r\n\r\n private:\r\n  // PID of child process during death test; 0 in the child process itself.\r\n  pid_t child_pid_;\r\n};\r\n\r\n// Constructs a ForkingDeathTest.\r\nForkingDeathTest::ForkingDeathTest(const char* a_statement,\r\n                                   Matcher<const std::string&> matcher)\r\n    : DeathTestImpl(a_statement, std::move(matcher)), child_pid_(-1) {}\r\n\r\n// Waits for the child in a death test to exit, returning its exit\r\n// status, or 0 if no child process exists.  As a side effect, sets the\r\n// outcome data member.\r\nint ForkingDeathTest::Wait() {\r\n  if (!spawned())\r\n    return 0;\r\n\r\n  ReadAndInterpretStatusByte();\r\n\r\n  int status_value;\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(waitpid(child_pid_, &status_value, 0));\r\n  set_status(status_value);\r\n  return status_value;\r\n}\r\n\r\n// A concrete death test class that forks, then immediately runs the test\r\n// in the child process.\r\nclass NoExecDeathTest : public ForkingDeathTest {\r\n public:\r\n  NoExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher)\r\n      : ForkingDeathTest(a_statement, std::move(matcher)) {}\r\n  TestRole AssumeRole() override;\r\n};\r\n\r\n// The AssumeRole process for a fork-and-run death test.  It implements a\r\n// straightforward fork, with a simple pipe to transmit the status byte.\r\nDeathTest::TestRole NoExecDeathTest::AssumeRole() {\r\n  const size_t thread_count = GetThreadCount();\r\n  if (thread_count != 1) {\r\n    GTEST_LOG_(WARNING) << DeathTestThreadWarning(thread_count);\r\n  }\r\n\r\n  int pipe_fd[2];\r\n  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);\r\n\r\n  DeathTest::set_last_death_test_message(\"\");\r\n  CaptureStderr();\r\n  // When we fork the process below, the log file buffers are copied, but the\r\n  // file descriptors are shared.  We flush all log files here so that closing\r\n  // the file descriptors in the child process doesn't throw off the\r\n  // synchronization between descriptors and buffers in the parent process.\r\n  // This is as close to the fork as possible to avoid a race condition in case\r\n  // there are multiple threads running before the death test, and another\r\n  // thread writes to the log file.\r\n  FlushInfoLog();\r\n\r\n  const pid_t child_pid = fork();\r\n  GTEST_DEATH_TEST_CHECK_(child_pid != -1);\r\n  set_child_pid(child_pid);\r\n  if (child_pid == 0) {\r\n    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[0]));\r\n    set_write_fd(pipe_fd[1]);\r\n    // Redirects all logging to stderr in the child process to prevent\r\n    // concurrent writes to the log files.  We capture stderr in the parent\r\n    // process and append the child process' output to a log.\r\n    LogToStderr();\r\n    // Event forwarding to the listeners of event listener API mush be shut\r\n    // down in death test subprocesses.\r\n    GetUnitTestImpl()->listeners()->SuppressEventForwarding();\r\n    g_in_fast_death_test_child = true;\r\n    return EXECUTE_TEST;\r\n  } else {\r\n    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));\r\n    set_read_fd(pipe_fd[0]);\r\n    set_spawned(true);\r\n    return OVERSEE_TEST;\r\n  }\r\n}\r\n\r\n// A concrete death test class that forks and re-executes the main\r\n// program from the beginning, with command-line flags set that cause\r\n// only this specific death test to be run.\r\nclass ExecDeathTest : public ForkingDeathTest {\r\n public:\r\n  ExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher,\r\n                const char* file, int line)\r\n      : ForkingDeathTest(a_statement, std::move(matcher)),\r\n        file_(file),\r\n        line_(line) {}\r\n  TestRole AssumeRole() override;\r\n\r\n private:\r\n  static ::std::vector<std::string> GetArgvsForDeathTestChildProcess() {\r\n    ::std::vector<std::string> args = GetInjectableArgvs();\r\n#  if defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)\r\n    ::std::vector<std::string> extra_args =\r\n        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();\r\n    args.insert(args.end(), extra_args.begin(), extra_args.end());\r\n#  endif  // defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)\r\n    return args;\r\n  }\r\n  // The name of the file in which the death test is located.\r\n  const char* const file_;\r\n  // The line number on which the death test is located.\r\n  const int line_;\r\n};\r\n\r\n// Utility class for accumulating command-line arguments.\r\nclass Arguments {\r\n public:\r\n  Arguments() { args_.push_back(nullptr); }\r\n\r\n  ~Arguments() {\r\n    for (std::vector<char*>::iterator i = args_.begin(); i != args_.end();\r\n         ++i) {\r\n      free(*i);\r\n    }\r\n  }\r\n  void AddArgument(const char* argument) {\r\n    args_.insert(args_.end() - 1, posix::StrDup(argument));\r\n  }\r\n\r\n  template <typename Str>\r\n  void AddArguments(const ::std::vector<Str>& arguments) {\r\n    for (typename ::std::vector<Str>::const_iterator i = arguments.begin();\r\n         i != arguments.end();\r\n         ++i) {\r\n      args_.insert(args_.end() - 1, posix::StrDup(i->c_str()));\r\n    }\r\n  }\r\n  char* const* Argv() {\r\n    return &args_[0];\r\n  }\r\n\r\n private:\r\n  std::vector<char*> args_;\r\n};\r\n\r\n// A struct that encompasses the arguments to the child process of a\r\n// threadsafe-style death test process.\r\nstruct ExecDeathTestArgs {\r\n  char* const* argv;  // Command-line arguments for the child's call to exec\r\n  int close_fd;       // File descriptor to close; the read end of a pipe\r\n};\r\n\r\n#  if GTEST_OS_MAC\r\ninline char** GetEnviron() {\r\n  // When Google Test is built as a framework on MacOS X, the environ variable\r\n  // is unavailable. Apple's documentation (man environ) recommends using\r\n  // _NSGetEnviron() instead.\r\n  return *_NSGetEnviron();\r\n}\r\n#  else\r\n// Some POSIX platforms expect you to declare environ. extern \"C\" makes\r\n// it reside in the global namespace.\r\nextern \"C\" char** environ;\r\ninline char** GetEnviron() { return environ; }\r\n#  endif  // GTEST_OS_MAC\r\n\r\n#  if !GTEST_OS_QNX\r\n// The main function for a threadsafe-style death test child process.\r\n// This function is called in a clone()-ed process and thus must avoid\r\n// any potentially unsafe operations like malloc or libc functions.\r\nstatic int ExecDeathTestChildMain(void* child_arg) {\r\n  ExecDeathTestArgs* const args = static_cast<ExecDeathTestArgs*>(child_arg);\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args->close_fd));\r\n\r\n  // We need to execute the test program in the same environment where\r\n  // it was originally invoked.  Therefore we change to the original\r\n  // working directory first.\r\n  const char* const original_dir =\r\n      UnitTest::GetInstance()->original_working_dir();\r\n  // We can safely call chdir() as it's a direct system call.\r\n  if (chdir(original_dir) != 0) {\r\n    DeathTestAbort(std::string(\"chdir(\\\"\") + original_dir + \"\\\") failed: \" +\r\n                   GetLastErrnoDescription());\r\n    return EXIT_FAILURE;\r\n  }\r\n\r\n  // We can safely call execve() as it's a direct system call.  We\r\n  // cannot use execvp() as it's a libc function and thus potentially\r\n  // unsafe.  Since execve() doesn't search the PATH, the user must\r\n  // invoke the test program via a valid path that contains at least\r\n  // one path separator.\r\n  execve(args->argv[0], args->argv, GetEnviron());\r\n  DeathTestAbort(std::string(\"execve(\") + args->argv[0] + \", ...) in \" +\r\n                 original_dir + \" failed: \" +\r\n                 GetLastErrnoDescription());\r\n  return EXIT_FAILURE;\r\n}\r\n#  endif  // !GTEST_OS_QNX\r\n\r\n#  if GTEST_HAS_CLONE\r\n// Two utility routines that together determine the direction the stack\r\n// grows.\r\n// This could be accomplished more elegantly by a single recursive\r\n// function, but we want to guard against the unlikely possibility of\r\n// a smart compiler optimizing the recursion away.\r\n//\r\n// GTEST_NO_INLINE_ is required to prevent GCC 4.6 from inlining\r\n// StackLowerThanAddress into StackGrowsDown, which then doesn't give\r\n// correct answer.\r\nstatic void StackLowerThanAddress(const void* ptr,\r\n                                  bool* result) GTEST_NO_INLINE_;\r\n// HWAddressSanitizer add a random tag to the MSB of the local variable address,\r\n// making comparison result unpredictable.\r\nGTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_\r\nstatic void StackLowerThanAddress(const void* ptr, bool* result) {\r\n  int dummy;\r\n  *result = (&dummy < ptr);\r\n}\r\n\r\n// Make sure AddressSanitizer does not tamper with the stack here.\r\nGTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_\r\nGTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_\r\nstatic bool StackGrowsDown() {\r\n  int dummy;\r\n  bool result;\r\n  StackLowerThanAddress(&dummy, &result);\r\n  return result;\r\n}\r\n#  endif  // GTEST_HAS_CLONE\r\n\r\n// Spawns a child process with the same executable as the current process in\r\n// a thread-safe manner and instructs it to run the death test.  The\r\n// implementation uses fork(2) + exec.  On systems where clone(2) is\r\n// available, it is used instead, being slightly more thread-safe.  On QNX,\r\n// fork supports only single-threaded environments, so this function uses\r\n// spawn(2) there instead.  The function dies with an error message if\r\n// anything goes wrong.\r\nstatic pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {\r\n  ExecDeathTestArgs args = { argv, close_fd };\r\n  pid_t child_pid = -1;\r\n\r\n#  if GTEST_OS_QNX\r\n  // Obtains the current directory and sets it to be closed in the child\r\n  // process.\r\n  const int cwd_fd = open(\".\", O_RDONLY);\r\n  GTEST_DEATH_TEST_CHECK_(cwd_fd != -1);\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(cwd_fd, F_SETFD, FD_CLOEXEC));\r\n  // We need to execute the test program in the same environment where\r\n  // it was originally invoked.  Therefore we change to the original\r\n  // working directory first.\r\n  const char* const original_dir =\r\n      UnitTest::GetInstance()->original_working_dir();\r\n  // We can safely call chdir() as it's a direct system call.\r\n  if (chdir(original_dir) != 0) {\r\n    DeathTestAbort(std::string(\"chdir(\\\"\") + original_dir + \"\\\") failed: \" +\r\n                   GetLastErrnoDescription());\r\n    return EXIT_FAILURE;\r\n  }\r\n\r\n  int fd_flags;\r\n  // Set close_fd to be closed after spawn.\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(fd_flags = fcntl(close_fd, F_GETFD));\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(close_fd, F_SETFD,\r\n                                        fd_flags | FD_CLOEXEC));\r\n  struct inheritance inherit = {0};\r\n  // spawn is a system call.\r\n  child_pid =\r\n      spawn(args.argv[0], 0, nullptr, &inherit, args.argv, GetEnviron());\r\n  // Restores the current working directory.\r\n  GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd) != -1);\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(cwd_fd));\r\n\r\n#  else   // GTEST_OS_QNX\r\n#   if GTEST_OS_LINUX\r\n  // When a SIGPROF signal is received while fork() or clone() are executing,\r\n  // the process may hang. To avoid this, we ignore SIGPROF here and re-enable\r\n  // it after the call to fork()/clone() is complete.\r\n  struct sigaction saved_sigprof_action;\r\n  struct sigaction ignore_sigprof_action;\r\n  memset(&ignore_sigprof_action, 0, sizeof(ignore_sigprof_action));\r\n  sigemptyset(&ignore_sigprof_action.sa_mask);\r\n  ignore_sigprof_action.sa_handler = SIG_IGN;\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(sigaction(\r\n      SIGPROF, &ignore_sigprof_action, &saved_sigprof_action));\r\n#   endif  // GTEST_OS_LINUX\r\n\r\n#   if GTEST_HAS_CLONE\r\n  const bool use_fork = GTEST_FLAG(death_test_use_fork);\r\n\r\n  if (!use_fork) {\r\n    static const bool stack_grows_down = StackGrowsDown();\r\n    const auto stack_size = static_cast<size_t>(getpagesize() * 2);\r\n    // MMAP_ANONYMOUS is not defined on Mac, so we use MAP_ANON instead.\r\n    void* const stack = mmap(nullptr, stack_size, PROT_READ | PROT_WRITE,\r\n                             MAP_ANON | MAP_PRIVATE, -1, 0);\r\n    GTEST_DEATH_TEST_CHECK_(stack != MAP_FAILED);\r\n\r\n    // Maximum stack alignment in bytes:  For a downward-growing stack, this\r\n    // amount is subtracted from size of the stack space to get an address\r\n    // that is within the stack space and is aligned on all systems we care\r\n    // about.  As far as I know there is no ABI with stack alignment greater\r\n    // than 64.  We assume stack and stack_size already have alignment of\r\n    // kMaxStackAlignment.\r\n    const size_t kMaxStackAlignment = 64;\r\n    void* const stack_top =\r\n        static_cast<char*>(stack) +\r\n            (stack_grows_down ? stack_size - kMaxStackAlignment : 0);\r\n    GTEST_DEATH_TEST_CHECK_(\r\n        static_cast<size_t>(stack_size) > kMaxStackAlignment &&\r\n        reinterpret_cast<uintptr_t>(stack_top) % kMaxStackAlignment == 0);\r\n\r\n    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);\r\n\r\n    GTEST_DEATH_TEST_CHECK_(munmap(stack, stack_size) != -1);\r\n  }\r\n#   else\r\n  const bool use_fork = true;\r\n#   endif  // GTEST_HAS_CLONE\r\n\r\n  if (use_fork && (child_pid = fork()) == 0) {\r\n      ExecDeathTestChildMain(&args);\r\n      _exit(0);\r\n  }\r\n#  endif  // GTEST_OS_QNX\r\n#  if GTEST_OS_LINUX\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(\r\n      sigaction(SIGPROF, &saved_sigprof_action, nullptr));\r\n#  endif  // GTEST_OS_LINUX\r\n\r\n  GTEST_DEATH_TEST_CHECK_(child_pid != -1);\r\n  return child_pid;\r\n}\r\n\r\n// The AssumeRole process for a fork-and-exec death test.  It re-executes the\r\n// main program from the beginning, setting the --gtest_filter\r\n// and --gtest_internal_run_death_test flags to cause only the current\r\n// death test to be re-run.\r\nDeathTest::TestRole ExecDeathTest::AssumeRole() {\r\n  const UnitTestImpl* const impl = GetUnitTestImpl();\r\n  const InternalRunDeathTestFlag* const flag =\r\n      impl->internal_run_death_test_flag();\r\n  const TestInfo* const info = impl->current_test_info();\r\n  const int death_test_index = info->result()->death_test_count();\r\n\r\n  if (flag != nullptr) {\r\n    set_write_fd(flag->write_fd());\r\n    return EXECUTE_TEST;\r\n  }\r\n\r\n  int pipe_fd[2];\r\n  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);\r\n  // Clear the close-on-exec flag on the write end of the pipe, lest\r\n  // it be closed when the child process does an exec:\r\n  GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1], F_SETFD, 0) != -1);\r\n\r\n  const std::string filter_flag = std::string(\"--\") + GTEST_FLAG_PREFIX_ +\r\n                                  kFilterFlag + \"=\" + info->test_suite_name() +\r\n                                  \".\" + info->name();\r\n  const std::string internal_flag =\r\n      std::string(\"--\") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag + \"=\"\r\n      + file_ + \"|\" + StreamableToString(line_) + \"|\"\r\n      + StreamableToString(death_test_index) + \"|\"\r\n      + StreamableToString(pipe_fd[1]);\r\n  Arguments args;\r\n  args.AddArguments(GetArgvsForDeathTestChildProcess());\r\n  args.AddArgument(filter_flag.c_str());\r\n  args.AddArgument(internal_flag.c_str());\r\n\r\n  DeathTest::set_last_death_test_message(\"\");\r\n\r\n  CaptureStderr();\r\n  // See the comment in NoExecDeathTest::AssumeRole for why the next line\r\n  // is necessary.\r\n  FlushInfoLog();\r\n\r\n  const pid_t child_pid = ExecDeathTestSpawnChild(args.Argv(), pipe_fd[0]);\r\n  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));\r\n  set_child_pid(child_pid);\r\n  set_read_fd(pipe_fd[0]);\r\n  set_spawned(true);\r\n  return OVERSEE_TEST;\r\n}\r\n\r\n# endif  // !GTEST_OS_WINDOWS\r\n\r\n// Creates a concrete DeathTest-derived class that depends on the\r\n// --gtest_death_test_style flag, and sets the pointer pointed to\r\n// by the \"test\" argument to its address.  If the test should be\r\n// skipped, sets that pointer to NULL.  Returns true, unless the\r\n// flag is set to an invalid value.\r\nbool DefaultDeathTestFactory::Create(const char* statement,\r\n                                     Matcher<const std::string&> matcher,\r\n                                     const char* file, int line,\r\n                                     DeathTest** test) {\r\n  UnitTestImpl* const impl = GetUnitTestImpl();\r\n  const InternalRunDeathTestFlag* const flag =\r\n      impl->internal_run_death_test_flag();\r\n  const int death_test_index = impl->current_test_info()\r\n      ->increment_death_test_count();\r\n\r\n  if (flag != nullptr) {\r\n    if (death_test_index > flag->index()) {\r\n      DeathTest::set_last_death_test_message(\r\n          \"Death test count (\" + StreamableToString(death_test_index)\r\n          + \") somehow exceeded expected maximum (\"\r\n          + StreamableToString(flag->index()) + \")\");\r\n      return false;\r\n    }\r\n\r\n    if (!(flag->file() == file && flag->line() == line &&\r\n          flag->index() == death_test_index)) {\r\n      *test = nullptr;\r\n      return true;\r\n    }\r\n  }\r\n\r\n# if GTEST_OS_WINDOWS\r\n\r\n  if (GTEST_FLAG(death_test_style) == \"threadsafe\" ||\r\n      GTEST_FLAG(death_test_style) == \"fast\") {\r\n    *test = new WindowsDeathTest(statement, std::move(matcher), file, line);\r\n  }\r\n\r\n# elif GTEST_OS_FUCHSIA\r\n\r\n  if (GTEST_FLAG(death_test_style) == \"threadsafe\" ||\r\n      GTEST_FLAG(death_test_style) == \"fast\") {\r\n    *test = new FuchsiaDeathTest(statement, std::move(matcher), file, line);\r\n  }\r\n\r\n# else\r\n\r\n  if (GTEST_FLAG(death_test_style) == \"threadsafe\") {\r\n    *test = new ExecDeathTest(statement, std::move(matcher), file, line);\r\n  } else if (GTEST_FLAG(death_test_style) == \"fast\") {\r\n    *test = new NoExecDeathTest(statement, std::move(matcher));\r\n  }\r\n\r\n# endif  // GTEST_OS_WINDOWS\r\n\r\n  else {  // NOLINT - this is more readable than unbalanced brackets inside #if.\r\n    DeathTest::set_last_death_test_message(\r\n        \"Unknown death test style \\\"\" + GTEST_FLAG(death_test_style)\r\n        + \"\\\" encountered\");\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n# if GTEST_OS_WINDOWS\r\n// Recreates the pipe and event handles from the provided parameters,\r\n// signals the event, and returns a file descriptor wrapped around the pipe\r\n// handle. This function is called in the child process only.\r\nstatic int GetStatusFileDescriptor(unsigned int parent_process_id,\r\n                            size_t write_handle_as_size_t,\r\n                            size_t event_handle_as_size_t) {\r\n  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,\r\n                                                   FALSE,  // Non-inheritable.\r\n                                                   parent_process_id));\r\n  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {\r\n    DeathTestAbort(\"Unable to open parent process \" +\r\n                   StreamableToString(parent_process_id));\r\n  }\r\n\r\n  GTEST_CHECK_(sizeof(HANDLE) <= sizeof(size_t));\r\n\r\n  const HANDLE write_handle =\r\n      reinterpret_cast<HANDLE>(write_handle_as_size_t);\r\n  HANDLE dup_write_handle;\r\n\r\n  // The newly initialized handle is accessible only in the parent\r\n  // process. To obtain one accessible within the child, we need to use\r\n  // DuplicateHandle.\r\n  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,\r\n                         ::GetCurrentProcess(), &dup_write_handle,\r\n                         0x0,    // Requested privileges ignored since\r\n                                 // DUPLICATE_SAME_ACCESS is used.\r\n                         FALSE,  // Request non-inheritable handler.\r\n                         DUPLICATE_SAME_ACCESS)) {\r\n    DeathTestAbort(\"Unable to duplicate the pipe handle \" +\r\n                   StreamableToString(write_handle_as_size_t) +\r\n                   \" from the parent process \" +\r\n                   StreamableToString(parent_process_id));\r\n  }\r\n\r\n  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);\r\n  HANDLE dup_event_handle;\r\n\r\n  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,\r\n                         ::GetCurrentProcess(), &dup_event_handle,\r\n                         0x0,\r\n                         FALSE,\r\n                         DUPLICATE_SAME_ACCESS)) {\r\n    DeathTestAbort(\"Unable to duplicate the event handle \" +\r\n                   StreamableToString(event_handle_as_size_t) +\r\n                   \" from the parent process \" +\r\n                   StreamableToString(parent_process_id));\r\n  }\r\n\r\n  const int write_fd =\r\n      ::_open_osfhandle(reinterpret_cast<intptr_t>(dup_write_handle), O_APPEND);\r\n  if (write_fd == -1) {\r\n    DeathTestAbort(\"Unable to convert pipe handle \" +\r\n                   StreamableToString(write_handle_as_size_t) +\r\n                   \" to a file descriptor\");\r\n  }\r\n\r\n  // Signals the parent that the write end of the pipe has been acquired\r\n  // so the parent can release its own write end.\r\n  ::SetEvent(dup_event_handle);\r\n\r\n  return write_fd;\r\n}\r\n# endif  // GTEST_OS_WINDOWS\r\n\r\n// Returns a newly created InternalRunDeathTestFlag object with fields\r\n// initialized from the GTEST_FLAG(internal_run_death_test) flag if\r\n// the flag is specified; otherwise returns NULL.\r\nInternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {\r\n  if (GTEST_FLAG(internal_run_death_test) == \"\") return nullptr;\r\n\r\n  // GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we\r\n  // can use it here.\r\n  int line = -1;\r\n  int index = -1;\r\n  ::std::vector< ::std::string> fields;\r\n  SplitString(GTEST_FLAG(internal_run_death_test).c_str(), '|', &fields);\r\n  int write_fd = -1;\r\n\r\n# if GTEST_OS_WINDOWS\r\n\r\n  unsigned int parent_process_id = 0;\r\n  size_t write_handle_as_size_t = 0;\r\n  size_t event_handle_as_size_t = 0;\r\n\r\n  if (fields.size() != 6\r\n      || !ParseNaturalNumber(fields[1], &line)\r\n      || !ParseNaturalNumber(fields[2], &index)\r\n      || !ParseNaturalNumber(fields[3], &parent_process_id)\r\n      || !ParseNaturalNumber(fields[4], &write_handle_as_size_t)\r\n      || !ParseNaturalNumber(fields[5], &event_handle_as_size_t)) {\r\n    DeathTestAbort(\"Bad --gtest_internal_run_death_test flag: \" +\r\n                   GTEST_FLAG(internal_run_death_test));\r\n  }\r\n  write_fd = GetStatusFileDescriptor(parent_process_id,\r\n                                     write_handle_as_size_t,\r\n                                     event_handle_as_size_t);\r\n\r\n# elif GTEST_OS_FUCHSIA\r\n\r\n  if (fields.size() != 3\r\n      || !ParseNaturalNumber(fields[1], &line)\r\n      || !ParseNaturalNumber(fields[2], &index)) {\r\n    DeathTestAbort(\"Bad --gtest_internal_run_death_test flag: \"\r\n        + GTEST_FLAG(internal_run_death_test));\r\n  }\r\n\r\n# else\r\n\r\n  if (fields.size() != 4\r\n      || !ParseNaturalNumber(fields[1], &line)\r\n      || !ParseNaturalNumber(fields[2], &index)\r\n      || !ParseNaturalNumber(fields[3], &write_fd)) {\r\n    DeathTestAbort(\"Bad --gtest_internal_run_death_test flag: \"\r\n        + GTEST_FLAG(internal_run_death_test));\r\n  }\r\n\r\n# endif  // GTEST_OS_WINDOWS\r\n\r\n  return new InternalRunDeathTestFlag(fields[0], line, index, write_fd);\r\n}\r\n\r\n}  // namespace internal\r\n\r\n#endif  // GTEST_HAS_DEATH_TEST\r\n\r\n}  // namespace testing\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Test/lib/googletest/src/gtest-death-test.cc b/Test/lib/googletest/src/gtest-death-test.cc
--- a/Test/lib/googletest/src/gtest-death-test.cc	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Test/lib/googletest/src/gtest-death-test.cc	(date 1606989169152)
@@ -359,7 +359,7 @@
     GTEST_LOG_(FATAL) << error.GetString();
   } else {
     const int last_error = errno;
-    GTEST_LOG_(FATAL) << "Error while reading death test internal: "
+    GTEST_LOG_(FATAL) << "AbstractError while reading death test internal: "
                       << GetLastErrnoDescription() << " [" << last_error << "]";
   }
 }
@@ -579,15 +579,15 @@
   switch (outcome()) {
     case LIVED:
       buffer << "    Result: failed to die.\n"
-             << " Error msg:\n" << FormatDeathTestOutput(error_message);
+             << " AbstractError msg:\n" << FormatDeathTestOutput(error_message);
       break;
     case THREW:
       buffer << "    Result: threw an exception.\n"
-             << " Error msg:\n" << FormatDeathTestOutput(error_message);
+             << " AbstractError msg:\n" << FormatDeathTestOutput(error_message);
       break;
     case RETURNED:
       buffer << "    Result: illegal return in test statement.\n"
-             << " Error msg:\n" << FormatDeathTestOutput(error_message);
+             << " AbstractError msg:\n" << FormatDeathTestOutput(error_message);
       break;
     case DIED:
       if (status_ok) {
Index: cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.17\n\n# Relative path conversion top directories.\nset(CMAKE_RELATIVE_PATH_TOP_SOURCE \"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo\")\nset(CMAKE_RELATIVE_PATH_TOP_BINARY \"/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\")\n\n# Force unix paths in dependencies.\nset(CMAKE_FORCE_UNIX_PATHS 1)\n\n\n# The C and CXX include file regular expressions for this directory.\nset(CMAKE_C_INCLUDE_REGEX_SCAN \"^.*$\")\nset(CMAKE_C_INCLUDE_REGEX_COMPLAIN \"^$\")\nset(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})\nset(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
--- a/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake	(date 1606989169196)
@@ -2,8 +2,8 @@
 # Generated by "Unix Makefiles" Generator, CMake Version 3.17
 
 # Relative path conversion top directories.
-set(CMAKE_RELATIVE_PATH_TOP_SOURCE "/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo")
-set(CMAKE_RELATIVE_PATH_TOP_BINARY "/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug")
+set(CMAKE_RELATIVE_PATH_TOP_SOURCE "/home/hugo/MA3/Project_monte_carlo")
+set(CMAKE_RELATIVE_PATH_TOP_BINARY "/home/hugo/MA3/Project_monte_carlo/cmake-build-debug")
 
 # Force unix paths in dependencies.
 set(CMAKE_FORCE_UNIX_PATHS 1)
Index: cmake-build-debug/CMakeFiles/Makefile.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.17\n\n# The generator used is:\nset(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")\n\n# The top level Makefile was generated from the following files:\nset(CMAKE_MAKEFILE_DEPENDS\n  \"CMakeCache.txt\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCInformation.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCXXInformation.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCommonLanguageInclude.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeFindCodeBlocks.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeGenericSystem.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeInitializeConfigs.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeLanguageInformation.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInformation.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInitialize.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckCSourceCompiles.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckIncludeFile.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckLibraryExists.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/CMakeCommonCompilerMacros.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-C.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-CXX.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageMessage.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPythonInterp.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindThreads.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Internal/CMakeCheckCompilerFlag.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-C.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-CXX.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/UnixPaths.cmake\"\n  \"/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/ProcessorCount.cmake\"\n  \"../CMakeLists.txt\"\n  \"../Modules/CMakeLists.txt\"\n  \"../Test/CMakeLists.txt\"\n  \"../Test/basic_tests/CMakeLists.txt\"\n  \"../Test/lib/googletest/CMakeLists.txt\"\n  \"../Test/lib/googletest/cmake/internal_utils.cmake\"\n  \"CMakeFiles/3.17.3/CMakeCCompiler.cmake\"\n  \"CMakeFiles/3.17.3/CMakeCXXCompiler.cmake\"\n  \"CMakeFiles/3.17.3/CMakeSystem.cmake\"\n  )\n\n# The corresponding makefile is:\nset(CMAKE_MAKEFILE_OUTPUTS\n  \"Makefile\"\n  \"CMakeFiles/cmake.check_cache\"\n  )\n\n# Byproducts of CMake generate step:\nset(CMAKE_MAKEFILE_PRODUCTS\n  \"CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"Test/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"Test/basic_tests/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"Test/lib/googletest/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"Modules/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  )\n\n# Dependency information for all targets:\nset(CMAKE_DEPEND_INFO_FILES\n  \"CMakeFiles/monte_carlo_run.dir/DependInfo.cmake\"\n  \"Test/basic_tests/CMakeFiles/Input_test.dir/DependInfo.cmake\"\n  \"Test/lib/googletest/CMakeFiles/gtest_main.dir/DependInfo.cmake\"\n  \"Test/lib/googletest/CMakeFiles/gtest.dir/DependInfo.cmake\"\n  \"Modules/CMakeFiles/Modules.dir/DependInfo.cmake\"\n  )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/Makefile.cmake b/cmake-build-debug/CMakeFiles/Makefile.cmake
--- a/cmake-build-debug/CMakeFiles/Makefile.cmake	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/CMakeFiles/Makefile.cmake	(date 1607025467187)
@@ -7,35 +7,6 @@
 # The top level Makefile was generated from the following files:
 set(CMAKE_MAKEFILE_DEPENDS
   "CMakeCache.txt"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCInformation.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCXXInformation.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCommonLanguageInclude.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeFindCodeBlocks.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeGenericSystem.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeInitializeConfigs.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeLanguageInformation.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInformation.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInitialize.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckCSourceCompiles.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckIncludeFile.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/CheckLibraryExists.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/CMakeCommonCompilerMacros.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-C.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-CXX.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageMessage.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindPythonInterp.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/FindThreads.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Internal/CMakeCheckCompilerFlag.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-C.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-CXX.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/Platform/UnixPaths.cmake"
-  "/app/extra/clion/bin/cmake/linux/share/cmake-3.17/Modules/ProcessorCount.cmake"
   "../CMakeLists.txt"
   "../Modules/CMakeLists.txt"
   "../Test/CMakeLists.txt"
@@ -45,6 +16,35 @@
   "CMakeFiles/3.17.3/CMakeCCompiler.cmake"
   "CMakeFiles/3.17.3/CMakeCXXCompiler.cmake"
   "CMakeFiles/3.17.3/CMakeSystem.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCInformation.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCXXInformation.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeCommonLanguageInclude.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeFindCodeBlocks.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeGenericSystem.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeInitializeConfigs.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeLanguageInformation.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInformation.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CMakeSystemSpecificInitialize.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CheckCSourceCompiles.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CheckIncludeFile.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/CheckLibraryExists.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/CMakeCommonCompilerMacros.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-C.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU-CXX.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Compiler/GNU.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/FindPackageMessage.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/FindPythonInterp.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/FindThreads.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Internal/CMakeCheckCompilerFlag.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-C.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU-CXX.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux-GNU.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Platform/Linux.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/Platform/UnixPaths.cmake"
+  "/snap/clion/137/bin/cmake/linux/share/cmake-3.17/Modules/ProcessorCount.cmake"
   )
 
 # The corresponding makefile is:
Index: cmake-build-debug/CMakeFiles/Makefile2
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.17\n\n# Default target executed when no arguments are given to make.\ndefault_target: all\n\n.PHONY : default_target\n\n#=============================================================================\n# Special targets provided by cmake.\n\n# Disable implicit rules so canonical targets will work.\n.SUFFIXES:\n\n\n# Disable VCS-based implicit rules.\n% : %,v\n\n\n# Disable VCS-based implicit rules.\n% : RCS/%\n\n\n# Disable VCS-based implicit rules.\n% : RCS/%,v\n\n\n# Disable VCS-based implicit rules.\n% : SCCS/s.%\n\n\n# Disable VCS-based implicit rules.\n% : s.%\n\n\n.SUFFIXES: .hpux_make_needs_suffix_list\n\n\n# Command-line flag to silence nested $(MAKE).\n$(VERBOSE)MAKESILENT = -s\n\n# Suppress display of executed commands.\n$(VERBOSE).SILENT:\n\n\n# A target that is always out of date.\ncmake_force:\n\n.PHONY : cmake_force\n\n#=============================================================================\n# Set environment variables for the build.\n\n# The shell in which to execute make rules.\nSHELL = /bin/sh\n\n# The CMake executable.\nCMAKE_COMMAND = /app/extra/clion/bin/cmake/linux/bin/cmake\n\n# The command to remove a file.\nRM = /app/extra/clion/bin/cmake/linux/bin/cmake -E rm -f\n\n# Escaping for special characters.\nEQUALS = =\n\n# The top-level source directory on which CMake was run.\nCMAKE_SOURCE_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo\n\n# The top-level build directory on which CMake was run.\nCMAKE_BINARY_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug\n\n#=============================================================================\n# Directory level rules for the build root directory\n\n# The main recursive \"all\" target.\nall: CMakeFiles/monte_carlo_run.dir/all\nall: Test/all\nall: Modules/all\n\n.PHONY : all\n\n# The main recursive \"preinstall\" target.\npreinstall: Test/preinstall\npreinstall: Modules/preinstall\n\n.PHONY : preinstall\n\n# The main recursive \"clean\" target.\nclean: CMakeFiles/monte_carlo_run.dir/clean\nclean: Test/clean\nclean: Modules/clean\n\n.PHONY : clean\n\n#=============================================================================\n# Directory level rules for directory Modules\n\n# Recursive \"all\" directory target.\nModules/all: Modules/CMakeFiles/Modules.dir/all\n\n.PHONY : Modules/all\n\n# Recursive \"preinstall\" directory target.\nModules/preinstall:\n\n.PHONY : Modules/preinstall\n\n# Recursive \"clean\" directory target.\nModules/clean: Modules/CMakeFiles/Modules.dir/clean\n\n.PHONY : Modules/clean\n\n#=============================================================================\n# Directory level rules for directory Test\n\n# Recursive \"all\" directory target.\nTest/all: Test/basic_tests/all\nTest/all: Test/lib/googletest/all\n\n.PHONY : Test/all\n\n# Recursive \"preinstall\" directory target.\nTest/preinstall: Test/basic_tests/preinstall\nTest/preinstall: Test/lib/googletest/preinstall\n\n.PHONY : Test/preinstall\n\n# Recursive \"clean\" directory target.\nTest/clean: Test/basic_tests/clean\nTest/clean: Test/lib/googletest/clean\n\n.PHONY : Test/clean\n\n#=============================================================================\n# Directory level rules for directory Test/basic_tests\n\n# Recursive \"all\" directory target.\nTest/basic_tests/all: Test/basic_tests/CMakeFiles/Input_test.dir/all\n\n.PHONY : Test/basic_tests/all\n\n# Recursive \"preinstall\" directory target.\nTest/basic_tests/preinstall:\n\n.PHONY : Test/basic_tests/preinstall\n\n# Recursive \"clean\" directory target.\nTest/basic_tests/clean: Test/basic_tests/CMakeFiles/Input_test.dir/clean\n\n.PHONY : Test/basic_tests/clean\n\n#=============================================================================\n# Directory level rules for directory Test/lib/googletest\n\n# Recursive \"all\" directory target.\nTest/lib/googletest/all: Test/lib/googletest/CMakeFiles/gtest_main.dir/all\nTest/lib/googletest/all: Test/lib/googletest/CMakeFiles/gtest.dir/all\n\n.PHONY : Test/lib/googletest/all\n\n# Recursive \"preinstall\" directory target.\nTest/lib/googletest/preinstall:\n\n.PHONY : Test/lib/googletest/preinstall\n\n# Recursive \"clean\" directory target.\nTest/lib/googletest/clean: Test/lib/googletest/CMakeFiles/gtest_main.dir/clean\nTest/lib/googletest/clean: Test/lib/googletest/CMakeFiles/gtest.dir/clean\n\n.PHONY : Test/lib/googletest/clean\n\n#=============================================================================\n# Target rules for target CMakeFiles/monte_carlo_run.dir\n\n# All Build rule for target.\nCMakeFiles/monte_carlo_run.dir/all: Modules/CMakeFiles/Modules.dir/all\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/depend\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/build\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=21,22 \"Built target monte_carlo_run\"\n.PHONY : CMakeFiles/monte_carlo_run.dir/all\n\n# Build rule for subdir invocation for target.\nCMakeFiles/monte_carlo_run.dir/rule: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 16\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 CMakeFiles/monte_carlo_run.dir/all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : CMakeFiles/monte_carlo_run.dir/rule\n\n# Convenience name for target.\nmonte_carlo_run: CMakeFiles/monte_carlo_run.dir/rule\n\n.PHONY : monte_carlo_run\n\n# clean rule for target.\nCMakeFiles/monte_carlo_run.dir/clean:\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/clean\n.PHONY : CMakeFiles/monte_carlo_run.dir/clean\n\n#=============================================================================\n# Target rules for target Test/basic_tests/CMakeFiles/Input_test.dir\n\n# All Build rule for target.\nTest/basic_tests/CMakeFiles/Input_test.dir/all: Test/lib/googletest/CMakeFiles/gtest_main.dir/all\nTest/basic_tests/CMakeFiles/Input_test.dir/all: Test/lib/googletest/CMakeFiles/gtest.dir/all\nTest/basic_tests/CMakeFiles/Input_test.dir/all: Modules/CMakeFiles/Modules.dir/all\n\t$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/depend\n\t$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/build\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=1,2 \"Built target Input_test\"\n.PHONY : Test/basic_tests/CMakeFiles/Input_test.dir/all\n\n# Build rule for subdir invocation for target.\nTest/basic_tests/CMakeFiles/Input_test.dir/rule: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 20\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/basic_tests/CMakeFiles/Input_test.dir/all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : Test/basic_tests/CMakeFiles/Input_test.dir/rule\n\n# Convenience name for target.\nInput_test: Test/basic_tests/CMakeFiles/Input_test.dir/rule\n\n.PHONY : Input_test\n\n# clean rule for target.\nTest/basic_tests/CMakeFiles/Input_test.dir/clean:\n\t$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/clean\n.PHONY : Test/basic_tests/CMakeFiles/Input_test.dir/clean\n\n#=============================================================================\n# Target rules for target Test/lib/googletest/CMakeFiles/gtest_main.dir\n\n# All Build rule for target.\nTest/lib/googletest/CMakeFiles/gtest_main.dir/all: Test/lib/googletest/CMakeFiles/gtest.dir/all\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/depend\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/build\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=19,20 \"Built target gtest_main\"\n.PHONY : Test/lib/googletest/CMakeFiles/gtest_main.dir/all\n\n# Build rule for subdir invocation for target.\nTest/lib/googletest/CMakeFiles/gtest_main.dir/rule: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 4\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/lib/googletest/CMakeFiles/gtest_main.dir/all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : Test/lib/googletest/CMakeFiles/gtest_main.dir/rule\n\n# Convenience name for target.\ngtest_main: Test/lib/googletest/CMakeFiles/gtest_main.dir/rule\n\n.PHONY : gtest_main\n\n# clean rule for target.\nTest/lib/googletest/CMakeFiles/gtest_main.dir/clean:\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/clean\n.PHONY : Test/lib/googletest/CMakeFiles/gtest_main.dir/clean\n\n#=============================================================================\n# Target rules for target Test/lib/googletest/CMakeFiles/gtest.dir\n\n# All Build rule for target.\nTest/lib/googletest/CMakeFiles/gtest.dir/all:\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/depend\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/build\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=17,18 \"Built target gtest\"\n.PHONY : Test/lib/googletest/CMakeFiles/gtest.dir/all\n\n# Build rule for subdir invocation for target.\nTest/lib/googletest/CMakeFiles/gtest.dir/rule: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 2\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/lib/googletest/CMakeFiles/gtest.dir/all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : Test/lib/googletest/CMakeFiles/gtest.dir/rule\n\n# Convenience name for target.\ngtest: Test/lib/googletest/CMakeFiles/gtest.dir/rule\n\n.PHONY : gtest\n\n# clean rule for target.\nTest/lib/googletest/CMakeFiles/gtest.dir/clean:\n\t$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/clean\n.PHONY : Test/lib/googletest/CMakeFiles/gtest.dir/clean\n\n#=============================================================================\n# Target rules for target Modules/CMakeFiles/Modules.dir\n\n# All Build rule for target.\nModules/CMakeFiles/Modules.dir/all:\n\t$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/depend\n\t$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/build\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=3,4,5,6,7,8,9,10,11,12,13,14,15,16 \"Built target Modules\"\n.PHONY : Modules/CMakeFiles/Modules.dir/all\n\n# Build rule for subdir invocation for target.\nModules/CMakeFiles/Modules.dir/rule: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 14\n\t$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Modules/CMakeFiles/Modules.dir/all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0\n.PHONY : Modules/CMakeFiles/Modules.dir/rule\n\n# Convenience name for target.\nModules: Modules/CMakeFiles/Modules.dir/rule\n\n.PHONY : Modules\n\n# clean rule for target.\nModules/CMakeFiles/Modules.dir/clean:\n\t$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/clean\n.PHONY : Modules/CMakeFiles/Modules.dir/clean\n\n#=============================================================================\n# Special targets to cleanup operation of make.\n\n# Special rule to run CMake to check the build system integrity.\n# No rule that depends on this can have commands that come from listfiles\n# because they might be regenerated.\ncmake_check_build_system:\n\t$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0\n.PHONY : cmake_check_build_system\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/CMakeFiles/Makefile2 b/cmake-build-debug/CMakeFiles/Makefile2
--- a/cmake-build-debug/CMakeFiles/Makefile2	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/cmake-build-debug/CMakeFiles/Makefile2	(date 1607025467187)
@@ -55,19 +55,19 @@
 SHELL = /bin/sh
 
 # The CMake executable.
-CMAKE_COMMAND = /app/extra/clion/bin/cmake/linux/bin/cmake
+CMAKE_COMMAND = /snap/clion/137/bin/cmake/linux/bin/cmake
 
 # The command to remove a file.
-RM = /app/extra/clion/bin/cmake/linux/bin/cmake -E rm -f
+RM = /snap/clion/137/bin/cmake/linux/bin/cmake -E rm -f
 
 # Escaping for special characters.
 EQUALS = =
 
 # The top-level source directory on which CMake was run.
-CMAKE_SOURCE_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo
+CMAKE_SOURCE_DIR = /home/hugo/MA3/Project_monte_carlo
 
 # The top-level build directory on which CMake was run.
-CMAKE_BINARY_DIR = /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug
+CMAKE_BINARY_DIR = /home/hugo/MA3/Project_monte_carlo/cmake-build-debug
 
 #=============================================================================
 # Directory level rules for the build root directory
@@ -176,14 +176,14 @@
 CMakeFiles/monte_carlo_run.dir/all: Modules/CMakeFiles/Modules.dir/all
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/depend
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/monte_carlo_run.dir/build.make CMakeFiles/monte_carlo_run.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=21,22 "Built target monte_carlo_run"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=21,22 "Built target monte_carlo_run"
 .PHONY : CMakeFiles/monte_carlo_run.dir/all
 
 # Build rule for subdir invocation for target.
 CMakeFiles/monte_carlo_run.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 16
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 16
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 CMakeFiles/monte_carlo_run.dir/all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : CMakeFiles/monte_carlo_run.dir/rule
 
 # Convenience name for target.
@@ -205,14 +205,14 @@
 Test/basic_tests/CMakeFiles/Input_test.dir/all: Modules/CMakeFiles/Modules.dir/all
 	$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/depend
 	$(MAKE) $(MAKESILENT) -f Test/basic_tests/CMakeFiles/Input_test.dir/build.make Test/basic_tests/CMakeFiles/Input_test.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=1,2 "Built target Input_test"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=1,2 "Built target Input_test"
 .PHONY : Test/basic_tests/CMakeFiles/Input_test.dir/all
 
 # Build rule for subdir invocation for target.
 Test/basic_tests/CMakeFiles/Input_test.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 20
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 20
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/basic_tests/CMakeFiles/Input_test.dir/all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : Test/basic_tests/CMakeFiles/Input_test.dir/rule
 
 # Convenience name for target.
@@ -232,14 +232,14 @@
 Test/lib/googletest/CMakeFiles/gtest_main.dir/all: Test/lib/googletest/CMakeFiles/gtest.dir/all
 	$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/depend
 	$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest_main.dir/build.make Test/lib/googletest/CMakeFiles/gtest_main.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=19,20 "Built target gtest_main"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=19,20 "Built target gtest_main"
 .PHONY : Test/lib/googletest/CMakeFiles/gtest_main.dir/all
 
 # Build rule for subdir invocation for target.
 Test/lib/googletest/CMakeFiles/gtest_main.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 4
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 4
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/lib/googletest/CMakeFiles/gtest_main.dir/all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : Test/lib/googletest/CMakeFiles/gtest_main.dir/rule
 
 # Convenience name for target.
@@ -259,14 +259,14 @@
 Test/lib/googletest/CMakeFiles/gtest.dir/all:
 	$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/depend
 	$(MAKE) $(MAKESILENT) -f Test/lib/googletest/CMakeFiles/gtest.dir/build.make Test/lib/googletest/CMakeFiles/gtest.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=17,18 "Built target gtest"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=17,18 "Built target gtest"
 .PHONY : Test/lib/googletest/CMakeFiles/gtest.dir/all
 
 # Build rule for subdir invocation for target.
 Test/lib/googletest/CMakeFiles/gtest.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 2
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 2
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Test/lib/googletest/CMakeFiles/gtest.dir/all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : Test/lib/googletest/CMakeFiles/gtest.dir/rule
 
 # Convenience name for target.
@@ -286,14 +286,14 @@
 Modules/CMakeFiles/Modules.dir/all:
 	$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/depend
 	$(MAKE) $(MAKESILENT) -f Modules/CMakeFiles/Modules.dir/build.make Modules/CMakeFiles/Modules.dir/build
-	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=3,4,5,6,7,8,9,10,11,12,13,14,15,16 "Built target Modules"
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles --progress-num=3,4,5,6,7,8,9,10,11,12,13,14,15,16 "Built target Modules"
 .PHONY : Modules/CMakeFiles/Modules.dir/all
 
 # Build rule for subdir invocation for target.
 Modules/CMakeFiles/Modules.dir/rule: cmake_check_build_system
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 14
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 14
 	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 Modules/CMakeFiles/Modules.dir/all
-	$(CMAKE_COMMAND) -E cmake_progress_start /home/mehdi/Documents/MA3/git_PCSP/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/hugo/MA3/Project_monte_carlo/cmake-build-debug/CMakeFiles 0
 .PHONY : Modules/CMakeFiles/Modules.dir/rule
 
 # Convenience name for target.
Index: Modules/Error.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/Error.hpp b/Modules/AbstractError.hpp
rename from Modules/Error.hpp
rename to Modules/AbstractError.hpp
--- a/Modules/Error.hpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/AbstractError.hpp	(date 1607025998563)
@@ -7,45 +7,70 @@
 
 #include <string>
 #include <exception>
+#include <iostream>
 
 /**
  * \brief Manages all errors encountered by the program.
  */
-class Error : public std::exception {
+class AbstractError : public std::exception {
 protected:
-    std::string error_tag;               ///< Error number
-    std::string error_message;      ///< Error message
 
 public:
-    /** Constructor (C++ STL string, int, int).
-     *  @param msg The error message
-     *  @param err_num Error number
+    /** Constructor.
      */
     explicit
-    Error(const std::string& msg, const std::string& tag):
-            error_tag(tag),
-            error_message(msg)
-    {}
+    AbstractError() {}
 
     /** Destructor.
      *  Virtual to allow for subclassing.
      */
-    virtual ~Error() throw () {}
+    virtual ~AbstractError() throw () {}
 
     /** Returns a pointer to the (constant) error description.
      *  @return A pointer to a const char*. The underlying memory
-     *  is in possession of the Error object. Callers must
+     *  is in possession of the AbstractError object. Callers must
      *  not attempt to free the memory.
      */
-    virtual const char* what() const throw () {
-        return error_message.c_str();
+    virtual const char * what () const throw ()  {
+        std::cerr<<"An exception was thrown!"<< std::endl;
+        return "F't be opened!";
     }
 
-    /** Returns error number.
-     *  @return #error_number
-     */
-    virtual const char* getErrorTag() const throw() {
-        return error_tag.c_str();
+};
+
+struct FileError : public AbstractError{
+    const char * what () const throw () override {
+        return "File coudn't be opened!";
+    }
+};
+struct VectSizeError : public AbstractError{
+    const char * what () const throw () override {
+        return "Vector size must be a positive integer !";
+    }
+};
+struct MeanError : public AbstractError{
+    const char * what () const throw () override {
+        return "Mean must a float number!";
+    }
+};
+struct VarError : public AbstractError{
+    const char * what () const throw () override {
+        return "Variance must a positive float number!";
+    }
+};
+struct LowerError : public AbstractError{
+    const char * what () const throw () override {
+        return "Lower bound needs to be a float!";
+    }
+};
+struct UpperError : public AbstractError{
+    const char * what () const throw () override {
+        return "Upper bound needs to a float!";
+    }
+};
+struct BoundError : public AbstractError{
+    const char * what () const throw () override {
+        return "Lower bound greater than upper bound!";
     }
 };
 #endif /* ERROR_HPP_*/
\ No newline at end of file
Index: Modules/FunctReader.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by mehdi on 30/11/20.\n//\n\n#include <iostream>\n#include <fstream>\n#include \"FunctReader.h\"\n#include \"PolynomlFunc.h\"\n#include \"ExpFunc.h\"\n#include \"TrigoFunc.h\"\n\nFunctReader::FunctReader()= default;\nFunctReader::~FunctReader()= default;\n\nvoid FunctReader::read_file(const char* file, AbstractFunc* &pFunction,int &order)\n{\n    std::ifstream read_input (file);\n    std::cout<< \"File = \"<< file<< std::endl;\n    if(!read_input.is_open()){\n        throw Error(\"Couldn't open it  \", \"FILE\");\n    }\n    read_input.clear();\n    char functionType;\n    read_input >> functionType;\n    switch(functionType)\n    {\n        case 'P' :\n        {\n            std::cout << \"Reading polynomiale coef:\\n \" ;\n            int a,b,c;\n            read_input >> a;\n            read_input >> b;\n            read_input >> c;\n            read_input >> order;\n            pFunction = new PolynomlFunc(a,b,c);\n            break;\n        }\n        case 'E':\n        {\n            std::cout << \"Reading Exponential coef:\\n \" ;\n            int a,b;\n            read_input >> a;\n            read_input >> b;\n            read_input >> order;\n            //pFunction = new ExpFunc(a, b);\n            break;\n        }\n        case 'T':\n        {\n            std::cout << \"Reading Trigonometric coef:\\n \" ;\n            int a,b;\n            read_input >> a;\n            read_input >> b;\n            read_input >> order;\n            break;\n            //pFunction = new TrigoFunc(a, b);\n        }\n        default:\n        {\n            std::cout << \"Wrong File Format ! \" << std::endl; //QUITTER PROGRAMME\n            break;\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Modules/FunctReader.cpp b/Modules/FunctReader.cpp
--- a/Modules/FunctReader.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/Modules/FunctReader.cpp	(date 1607026069128)
@@ -14,10 +14,11 @@
 
 void FunctReader::read_file(const char* file, AbstractFunc* &pFunction,int &order)
 {
+    std::cout<<"h"<<std::endl;
     std::ifstream read_input (file);
-    std::cout<< "File = "<< file<< std::endl;
+    std::cout<<"h"<<std::endl;
     if(!read_input.is_open()){
-        throw Error("Couldn't open it  ", "FILE");
+        throw FileError();
     }
     read_input.clear();
     char functionType;
Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\n *\n * main.cpp\n *\n *  Created on: Nov 24, 2020\n * \t   Authors: Akeddar Mehdi <mehdi.akeddar@epfl.ch> &\n * \t            Birch Hugo <hugo.birchd@epfl.ch>\n */\n\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <MonteCarloExpectation.h>\n#include <AbstractExpectation.h>\n#include <NormalDist.h>\n#include <StatisticalMoment.h>\n#include <FunctReader.h>\n\n#include \"AbstractReader.h\"\n#include \"AbstractFunc.h\"\n#include \"PolynomlFunc.h\"\n#include \"NormalReader.h\"\n#include \"UniformReader.h\"\n#include \"AbstractVariable.h\"\n#include \"Error.hpp\"\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n\n    const char *file_name;\n    const char *function_file_name;\n    const char *dist_type;\n    AbstractVariable *pRandom = 0;\n    string file;\n    string input;\n    AbstractReader *pReader;\n    FunctReader *pFunReader;\n    AbstractFunc *pFunction ;\n    AbstractExpectation *pExpectation;\n    int order;\n\n    if(argc == 4){\n\n        file_name = argv[1];\n        function_file_name = argv[2];\n        dist_type = argv[3];\n\n        pFunReader = new FunctReader;\n        pFunReader ->read_file(function_file_name,pFunction,order);\n\n        if( strcmp(dist_type , \"N\") == 0 ) {\n            pReader = new NormalReader;\n        }\n        else if(strcmp(dist_type , \"U\") == 0)\n                pReader = new UniformReader;\n        else{\n            string input;\n            cerr << \"Wrong distribution type. Please refer to README\" << endl;\n            cout << \"Please enter the of the two distribution types: [U/N] \" << endl;\n            cin >> input;\n\n            if (input == \"U\")\n                pReader = new UniformReader;\n            else if (input == \"N\")\n                pReader = new NormalReader;\n            else{\n                cerr << \"Input invalid !\" << endl;\n                return -1;\n            }\n        }\n    }\n    cout<< \"file = \"<< file_name<< endl;\n    try{\n        pReader->read_file(file_name,pRandom);\n    }catch(Error& e){\n        cerr << \"Exception thrown: \" << e.getErrorTag() << e.what() << endl;\n        return -1;\n    }\n    delete pReader;\n\n//////////////////////////////////////FUNCTION//////////////////////////////////////////////////\n\n    cout << \"Calulating Expectation\" << endl;\n    pExpectation = new MonteCarloExpectation(pFunction,pRandom);\n    cout << \"Expectation Calculated\" << endl;\n    cout << pExpectation->getExpectation() << endl;\n\n    //////////////////////////////////////MOMENT//////////////////////////////////////////////////\n    StatisticalMoment *pMoment = new StatisticalMoment(pRandom);\n    pMoment->write_csv(\"moments.csv\",order);\n    cout << \"Moment written !\" << endl;\n\n\n    return 0;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	(revision 77caae49be92130746108fdf572fe6e3c66b5173)
+++ b/main.cpp	(date 1607026569268)
@@ -21,8 +21,9 @@
 #include "PolynomlFunc.h"
 #include "NormalReader.h"
 #include "UniformReader.h"
+#include "ExpFunc.h"
 #include "AbstractVariable.h"
-#include "Error.hpp"
+#include "AbstractError.hpp"
 
 using namespace std;
 
@@ -70,11 +71,12 @@
             }
         }
     }
-    cout<< "file = "<< file_name<< endl;
     try{
+        std::cout<<"h"<<std::endl;
         pReader->read_file(file_name,pRandom);
-    }catch(Error& e){
-        cerr << "Exception thrown: " << e.getErrorTag() << e.what() << endl;
+        std::cout<<"h"<<std::endl;
+    }catch(AbstractError& e){
+        cerr << "Exception thrown: " << e.what() << endl;
         return -1;
     }
     delete pReader;
